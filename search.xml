<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Performance的使用</title>
      <link href="/2023/05/17/Performance%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/17/Performance%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Performance的使用"><a href="#Performance的使用" class="headerlink" title="Performance的使用"></a>Performance的使用</h3><h4 id="浏览器多进程架构"><a href="#浏览器多进程架构" class="headerlink" title="浏览器多进程架构"></a>浏览器多进程架构</h4><table><thead><tr><th>进程</th><th>负责的工作</th><th>包含的线程</th></tr></thead><tbody><tr><td>浏览器进程</td><td>负责浏览器的导航栏、书签、前进、后退按钮等，还会控制我们看不见的部分，包括文件的读写等</td><td>UI线程等</td></tr><tr><td>渲染进程</td><td>渲染进程负责网页展示相关的所有工作，主要任务是将HTML，CSS，以及JavaScript转变为我们可以进程交互的网页内容。每一个tab页、页面内的每一个iframe都会分配一个单独的渲染进程</td><td>主线程:渲染主线程的任务执行过程; <br>Compositor: 合成线程，将绘制列表合成页面;<br>Chrome_ChildIOThread线程: IO线程；<br>Raster: 光栅化线程池等</td></tr><tr><td>GPU进程</td><td>负责独立于其他进程的GPU任务，处理来自不同tab的渲染请求，并把他们在界面上画出来</td><td></td></tr><tr><td>网络进程</td><td>负责页面的网络资源加载</td><td></td></tr><tr><td>Plugin进程</td><td>负责网页使用的所有插件</td></tr></tbody></table><a id="more"></a><h5 id="多进程架构的优点"><a href="#多进程架构的优点" class="headerlink" title="多进程架构的优点"></a>多进程架构的优点</h5><ol><li>容错性：每个tab都有独立的渲染进程，当一个tab也崩溃时，关闭这个tab，不影响其他tab页</li><li>安全性和沙盒性：操作系统提供方法限制每个进程拥有的能力，所以浏览器可以让某些进程不具备某些特定的功能，比如tab渲染进程会处理来自用户的输入，所以chrome限制了他们对系统文件随机读写的能力</li></ol><h5 id="多进程架构的缺点"><a href="#多进程架构的缺点" class="headerlink" title="多进程架构的缺点"></a>多进程架构的缺点</h5><ol><li><p>内存消耗：每个进程都有独立的内存空间，不像一个进程中的所有线程可以公用内存空间，这会造成一些基础架构会在不同进程的内存空间同时存在(比如V8 JavaScript引擎)，这些重复内容会消耗更多的内存。为了节省内存，chrome会限制启动的进程数目，当进程数达到一定的界限后，chrome会将访问同一个站点的tab都放在一个进程里面跑</p><blockquote><p>同一站点的定义为：根域名+协议</p></blockquote></li></ol><h4 id="性能指标简介"><a href="#性能指标简介" class="headerlink" title="性能指标简介"></a>性能指标简介</h4><p>Performance面板中的各项指标就记录了浏览器多个进程之间配合完成页面渲染的流程，先简单介绍一下各个指标的基本内容。</p><h5 id="Network指标"><a href="#Network指标" class="headerlink" title="Network指标"></a>Network指标</h5><p>Network指标主要是记录页面中每个网络请求在网络进程中所消耗的时长</p><ul><li>HTML: 蓝色</li><li>CSS: 紫色</li><li>JS: 黄色</li><li>Images: 绿色</li></ul><p><img src="../imgs/Performance的使用/截屏2022-02-18 上午8.53.27.png" alt="截屏2022-02-18 上午8.53.27"></p><p>上图每个请求的柱状图对应Network的Timing面板：</p><p><img src="../imgs/Performance的使用/截屏2022-02-18 上午8.54.10.png" alt="截屏2022-02-18 上午8.54.10"></p><p>左侧的灰线表示请求<code>排队时间(Queueing)</code>和<code>发起连接(Connection Start)</code>这一组操作共花费的时间。</p><p><code>排队时间(Queueing)</code>请求正在排队指的是：</p><ol><li>请求被渲染引擎推迟，因为该请求的优先级低于其他关键资源的优先级</li><li>请求被暂停，等待将要释放的TCP套接字</li><li>请求被暂停，因为有“队头阻塞”, 浏览器仅允许每个域名同时最多发起6个请求(http1.0/http1.1)</li><li>生成磁盘缓存条目所用的时间</li></ol><p><code>发起连接(Connection Start)</code>包括阻塞时间(Stalled)、DNS Lookup、建立TCP连接(TCP握手、协商SSL)等；</p><p>浅色代表发送请求(Request sent)和等待首字节响应(TTFB)的时间，这部分包括服务器处理的时间，网络延迟时间等；</p><p>深色代表下载内容，即从接收到第一个字节到最后一个字节接收完毕花费的时间；</p><p>右侧的灰线表示等待渲染主线程响应的时间；</p><h5 id="Timings指标"><a href="#Timings指标" class="headerlink" title="Timings指标"></a>Timings指标</h5><p>记录关键的时间节点产生的数据信息，FP，FCP，LCP等</p><p><img src="../imgs/Performance的使用/截屏2022-02-03 下午2.09.28.png" alt="截屏2022-02-03 下午2.09.28"></p><table><thead><tr><th>指标</th><th>触发事件</th><th>触发时间</th></tr></thead><tbody><tr><td>DCL</td><td>DOMContentLoaded</td><td>当初始的 <strong>HTML</strong> 文档被完全加载和解析完成之后，<strong><code>DOMContentLoaded</code></strong> 事件被触发，无需等待样式表、图像和子框架的完全加载。</td></tr><tr><td>L</td><td>load</td><td>当整个页面及所有依赖资源如样式表和图片都已完成加载时，将触发<code>load</code>事件</td></tr><tr><td>FP</td><td>First Paint</td><td>首次绘制（First Paint）渲染进程确认要渲染当前的请求后，渲染进程会创建一个空白页面，我们把创建空白页面的这个时间点称为FP</td></tr><tr><td>FCP</td><td><a href="https://web.dev/fcp/" target="_blank" rel="noopener"><strong>First Contentful Paint</strong></a></td><td>首次有内容的绘制，第一个dom元素绘制完成的时间点</td></tr><tr><td>LCP</td><td><a href="https://web.dev/lcp/" target="_blank" rel="noopener"><strong>Largest Contentful Paint</strong></a></td><td>最大内容绘制,报告从首次开始加载的时间开始，到可视区域内可见的最大<a href="https://web.dev/i18n/zh/lcp/#what-elements-are-considered" target="_blank" rel="noopener">图像或文本块</a>完成渲染的相对时间，最大元素完成渲染的时间点</td></tr><tr><td></td><td></td></tr></tbody></table><h5 id="Frame指标"><a href="#Frame指标" class="headerlink" title="Frame指标"></a>Frame指标</h5><p>记录浏览器生成每帧的记录</p><p>鼠标移到某个帧上，会展示渲染当前帧花费的时间和fps(帧每秒)</p><p><img src="/Users/sunjiali/Library/Application Support/typora-user-images/截屏2022-02-02 下午3.24.04.png" alt="截屏2022-02-02 下午3.24.04"></p><p>60fps就是60帧每秒，屏幕每秒会展示60帧静态图像，1000ms / 60 ≈ 16.7ms，所以只有在16.7毫秒内完成一次帧绘制，页面看起来才会更流畅，一帧绘制的时间超过16.7ms，就会出现掉帧的情况，页面会表现出卡顿的现象</p><p>Layout Shift由Layout Instability API定义，每当视口中两次渲染帧之间的可视元素改变了其起始位置时都会触发layout-shift entries，<strong>改变了起始位置的元素被认为是不稳定元素</strong>。由于LS只会发生在改变了初始位置的已有元素上，只要新加入的元素并不会造成其他可见元素改变位置，它将不会被当成是LS元素。</p><h5 id="Main指标"><a href="#Main指标" class="headerlink" title="Main指标"></a>Main指标</h5><p>记录渲染进程中主线程的执行记录，渲染进程负责标签（tab）内发生的所有事情，在渲染进程里面，主线程（main thread）处理了绝大多数你发送给用户的代码。</p><h6 id="Event-beforeunload"><a href="#Event-beforeunload" class="headerlink" title="Event: beforeunload"></a>Event: beforeunload</h6><p>当浏览器窗口关闭或者刷新时，会触发beforeunload事件。当前页面不会直接关闭，可以点击确定按钮关闭或刷新，也可以取消关闭或刷新。如果实现了beforeunload事件，就会在这一阶段被触发。</p><p><img src="../imgs/Performance的使用/截屏2022-02-03 下午5.25.19.png" alt="截屏2022-02-03 下午5.25.19"></p><h6 id="Event-pagehide"><a href="#Event-pagehide" class="headerlink" title="Event: pagehide"></a>Event: pagehide</h6><p>当浏览器在显示与会话历史记录不同的页面的过程中隐藏当前页面时, <strong><code>pagehide</code></strong>(页面隐藏)事件会被发送到一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noopener"><code>Window</code></a> 。例如，当用户单击浏览器的“后退”按钮时，当前页面在显示上一页之前会收到一个<code>pagehide</code>(页面隐藏)事件。</p><h6 id="Event-visibilitychange"><a href="#Event-visibilitychange" class="headerlink" title="Event: visibilitychange"></a>Event: visibilitychange</h6><p>当其选项卡的内容变得可见或被隐藏时，会在文档上触发 <code>visibilitychange</code> (能见度更改)事件</p><h6 id="Event-webkitvisibilitychange"><a href="#Event-webkitvisibilitychange" class="headerlink" title="Event: webkitvisibilitychange"></a>Event: webkitvisibilitychange</h6><p>当前网页在可见和不可见之间变换的时候调用</p><h6 id="Event-unload"><a href="#Event-unload" class="headerlink" title="Event: unload"></a>Event: unload</h6><p>当文档或一个子资源正在被卸载时, 触发 <strong>unload</strong>事件。</p><h6 id="Send-Request"><a href="#Send-Request" class="headerlink" title="Send Request"></a>Send Request</h6><p>表示网络请求已发送</p><h6 id="Receive-Response"><a href="#Receive-Response" class="headerlink" title="Receive Response"></a>Receive Response</h6><p>表示已经接收到HTTP响应头</p><h6 id="commitNavigationEnd"><a href="#commitNavigationEnd" class="headerlink" title="commitNavigationEnd"></a>commitNavigationEnd</h6><p>导航结束</p><h6 id="Receive-Data"><a href="#Receive-Data" class="headerlink" title="Receive Data"></a>Receive Data</h6><p>接收数据，如果数据量大会存在多个Recive Data过程</p><h6 id="Finish-Loading"><a href="#Finish-Loading" class="headerlink" title="Finish Loading"></a>Finish Loading</h6><p>所有数据接收完成后执行，表示网络请求已经完成</p><h6 id="Parse-HTML"><a href="#Parse-HTML" class="headerlink" title="Parse HTML"></a>Parse HTML</h6><p>构建DOM树，以内渲染引擎无法直接理解html内容，需要将其解析为DOM树结构，DOM树表示了页面上所有节点的内容和节点之间的关系。</p><p><img src="../imgs/Performance的使用/full-process.png" alt="DOM construction process"></p><p>如果遇到script标签，就暂停DOM树构建，如果是内联script，直接执行代码，如果是外部js文件，在过去会触发Send Request事件，网络进程开始请求外部js文件，请求完成后触发Finish Loading事件, 之后触发Evaluate Script事件，开始执行js代码，执行完成后再继续执行Parse HTML构建DOM树，如果遇到如.css等子资源，还是会触发Send Request事件，网络进程请求资源，但是不会阻塞DOM树的构建。</p><blockquote><p>现在chrome已做预解析优化，在渲染主线程接收到HTML的字节流后，会开启预解析线程，分析HTML中包含的JS、CSS等资源，解析到这些资源链接后，预解析线程会让网络进程提前下载这些文件，</p></blockquote><p>资源接收的流程：</p><p>Send Request</p><p>Receive Response</p><p>Receive Data</p><p>Receive Data</p><p>….</p><p>Receive Data</p><p>Parse Stylesheet/Parse HTML</p><p>Receive Data</p><p>….</p><p>Finish Loading</p><p>js文件是先Finish Loading后再Evaluate Script。</p><p>js下载：js下载会阻塞其他资源的下载，chrome做了预加载优化，会提前下载资源</p><p>js执行：script标签会中断DOM树构建</p><h6 id="Parse-Stylesheet"><a href="#Parse-Stylesheet" class="headerlink" title="Parse Stylesheet"></a>Parse Stylesheet</h6><p>构建CSSOM，跟html一样，渲染引擎也无法直接理解css内容，所以需要将 CSS 文本转换为渲染引擎可以理解的结构CSSOM，转换为CSSOM之后，js可以直接操作样式，也为下一步合成布局树提供样式信息。可以在控制台通过styleSheets查看：</p><p><img src="../imgs/Performance的使用/8ec7d5ecfadcd05b3f1ec762223a9aab.png" alt="img"></p><h6 id="Evaluate-Script"><a href="#Evaluate-Script" class="headerlink" title="Evaluate Script"></a>Evaluate Script</h6><p>执行js代码</p><h6 id="Recalculate-Style"><a href="#Recalculate-Style" class="headerlink" title="Recalculate Style"></a>Recalculate Style</h6><p>计算 DOM 树中每个节点的样式，涉及css继承规则和层叠规则，这个阶段最终输出的内容是每个 DOM 节点的样式，可以在devtools的 ComputedStyle 内查看</p><p><img src="../imgs/Performance的使用/cssom-tree.png" alt="CSSOM tree"></p><h6 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h6><p>生成可见节点的布局树，这个布局树中只包含DOM树中的可见节点，并计算出每个DOM 元素的几何位置信息。</p><p><img src="../imgs/Performance的使用/截屏2022-02-04 下午6.13.59.png" alt="截屏2022-02-04 下午6.13.59"></p><h6 id="Update-Layer-Tree"><a href="#Update-Layer-Tree" class="headerlink" title="Update Layer Tree"></a>Update Layer Tree</h6><p>构建渲染图层树，什么情况下会为节点创建新图层：</p><ol><li><p>页面的根元素</p></li><li><p>拥有层叠上下文属性的元素会被提升为单独的一层。</p><blockquote><p>明确定位属性的元素、定义透明属性的元素、使用 CSS 滤镜的元素等，都拥有层叠上下文属性。</p></blockquote></li><li><p>需要剪裁（clip）的地方也会被创建为图层</p><blockquote><p>剪裁区域占一层，内容占一层，如果有滚动条，滚动单独占一层</p></blockquote></li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>web performance<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> students<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ne-smalltown.com/453.jpg--ljg4NsMmh4S3skxKXaOaZsdjXjn0?imageView2/2/w/327/h/312/interlace/1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p><img src="../imgs/Performance的使用/截屏2022-02-05 下午4.58.32.png" alt="截屏2022-02-05 下午4.58.32"></p><h6 id="Paint"><a href="#Paint" class="headerlink" title="Paint"></a>Paint</h6><p>生成绘制列表，绘制列表用来记录绘制顺序和绘制指令，从下图可以看到图层p的绘制列表：</p><p><img src="../imgs/Performance的使用/截屏2022-02-05 下午5.11.26.png" alt="截屏2022-02-05 下午5.11.26"></p><h6 id="Composite-Layers"><a href="#Composite-Layers" class="headerlink" title="Composite Layers"></a>Composite Layers</h6><p>将绘制列表提交给渲染进程中的合成线程</p><h5 id="Compositor指标"><a href="#Compositor指标" class="headerlink" title="Compositor指标"></a>Compositor指标</h5><p>记录渲染进程中合成线程的执行记录，合成线程主要负责将图层划分为图块，然后会向光栅化线程发送指令，由光栅化线程池来生成位图</p><h5 id="Raster指标"><a href="#Raster指标" class="headerlink" title="Raster指标"></a>Raster指标</h5><p>记录渲染进程光栅化线程池中每个光栅化线程的执行记录，光栅化负责将图块转为位图，最小的执行单位是图块，光栅化线程回和GPU进程通信，利用GPU进程来实现快速栅格化。</p><h5 id="GPU指标"><a href="#GPU指标" class="headerlink" title="GPU指标"></a>GPU指标</h5><p>执行raster指标中的快速光栅化任务生成位图，并保存在GPU内存中</p><h5 id="Chrome-ChildIOThread指标"><a href="#Chrome-ChildIOThread指标" class="headerlink" title="Chrome_ChildIOThread指标"></a>Chrome_ChildIOThread指标</h5><p>记录用户输入事件、网络事件、设备相关等事件</p><h5 id="Interactions指标"><a href="#Interactions指标" class="headerlink" title="Interactions指标"></a>Interactions指标</h5><p>记录用户的交互操作</p><h4 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h4><h5 id="在Performance面板看css加载阻塞"><a href="#在Performance面板看css加载阻塞" class="headerlink" title="在Performance面板看css加载阻塞"></a>在Performance面板看css加载阻塞</h5><h6 id="script会阻塞DOM树构建，那css会阻塞DOM树构建吗？"><a href="#script会阻塞DOM树构建，那css会阻塞DOM树构建吗？" class="headerlink" title="script会阻塞DOM树构建，那css会阻塞DOM树构建吗？"></a>script会阻塞DOM树构建，那css会阻塞DOM树构建吗？</h6><p>因为js可以更改DOM，所以js代码一定会阻塞DOM树构建：</p><ol><li><p>内部script代码: </p><p>Parse HTML时遇到内部script代码时，会暂停DOM树构建，先执行js代码，执行完成之后再继续进行DOM树构建</p></li><li><p>外部script代码<br>先通过网络进程下载script代码，下载后执行js代码，执行完成之后再继续进行DOM树构建</p></li></ol><p>因为js也可以更改样式，所以css在某些情况下会阻塞js资源下载和执行，相当于阻塞了DOM树构建：</p><ol><li>通过外部引入css资源，后面跟有嵌入js代码时：等待css资源下载和Parse Stylesheet，然后才能执行嵌入的js代码</li><li>通过外部引入css资源，后面根据有js外部引入资源时：因为css不会阻塞DOM树构建，所以会同时发起css和js资源请求，但无论请求完成的快慢，js资源请求都需要等待css资源下载并且在主线程完成Parse Stylesheet后，再执行js代码</li></ol><h5 id="帧优化"><a href="#帧优化" class="headerlink" title="帧优化"></a>帧优化</h5><p><a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">https://googlechrome.github.io/devtools-samples/jank/</a></p><h5 id="层爆炸"><a href="#层爆炸" class="headerlink" title="层爆炸"></a>层爆炸</h5><h5 id="长任务优化"><a href="#长任务优化" class="headerlink" title="长任务优化"></a>长任务优化</h5><p>因为页面渲染和 JS的 执行都在主线程中执行，会相互阻塞，如果 JS 有长时间(超过50ms)执行的 Task，就会长期占据主线程，阻塞渲染，导致页面卡顿。可以通过Performance面板找出长任务，优化长任务。</p><p>有两种常见的造成长任务的方式：</p><ol><li><p>一段同步代码被递归调用或者处理一段复杂的逻辑导致耗时较长</p><p>long task:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i    div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="../imgs/Performance的使用/截屏2022-02-07 下午5.04.18.png" alt="截屏2022-02-07 下午5.04.18"></p><p>优化:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> current<span class="token operator">++</span>    div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> j<span class="token operator">+</span><span class="token operator">=</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="../imgs/Performance的使用/截屏2022-02-07 下午5.01.48.png" alt="截屏2022-02-07 下午5.01.48"></p></li></ol><ol start="2"><li><p>一个Promise具有多个<code>.then</code>处理程序，由于Promise的then处理程序是在MicroTask队列中排队，并且将MicroTask队列中的任务连续执行，直到队列为空，它可能会导致当前任务执行超过50ms:</p><p>long task:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> current<span class="token operator">++</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="../imgs/Performance的使用/截屏2022-02-07 下午5.09.33.png" alt="截屏2022-02-07 下午5.09.33"></p><p>优化：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> span <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`hello`</span></span><span class="token punctuation">;</span>    span<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> current<span class="token operator">++</span><span class="token punctuation">;</span>    div<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>span<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>   <img src="/Users/sunjiali/Library/Application Support/typora-user-images/截屏2022-02-07 下午5.14.59.png" alt="截屏2022-02-07 下午5.14.59"></p><blockquote><p>使用webworker进行优化</p></blockquote><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>示例： <a href="https://googlechrome.github.io/devtools-samples/jank/" target="_blank" rel="noopener">https://googlechrome.github.io/devtools-samples/jank/</a></p><p>示例2： <a href="https://www.ne-smalltown.com/" target="_blank" rel="noopener">https://www.ne-smalltown.com/</a></p><ol><li><p><a href="https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit#" target="_blank" rel="noopener">https://docs.google.com/document/d/1bCDuq9H1ih9iNjgzyAL0gpwNFiEP4TZS-YLRp_RuMlc/edit#</a></p></li><li><p><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=en</a></p></li><li><p><a href="https://developer.chrome.com/docs/devtools/evaluate-performance/performance-reference/" target="_blank" rel="noopener">https://developer.chrome.com/docs/devtools/evaluate-performance/performance-reference/</a></p></li><li><p><a href="https://time.geekbang.org/column/article/118826" target="_blank" rel="noopener">https://time.geekbang.org/column/article/118826</a></p></li><li><p><a href="https://w3c.github.io/longtasks/" target="_blank" rel="noopener">https://w3c.github.io/longtasks/</a></p></li><li><p><a href="https://web.dev/rail/#response:-process-events-in-under-50ms" target="_blank" rel="noopener">https://web.dev/rail/#response:-process-events-in-under-50ms</a></p></li><li><p><a href="https://javascript.plainenglish.io/how-to-optimize-long-tasks-blocking-javascript-in-browsers-d49508f72c9" target="_blank" rel="noopener">https://javascript.plainenglish.io/how-to-optimize-long-tasks-blocking-javascript-in-browsers-d49508f72c9</a></p></li></ol><p>父元素设置了filter，子元素设置定位属性，将根据父元素来定位</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>vh<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span>>div </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>I am fixed on scroll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>I move with the scroll<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>下面属性都应用：</p><ul><li><code>filter</code></li><li><code>transform</code> <a href="https://drafts.csswg.org/css-transforms-1/#containing-block-for-all-descendants" target="_blank" rel="noopener">ref</a></li><li><code>backdrop-filter</code> <a href="https://drafts.fxtf.org/filter-effects-2/#BackdropFilterProperty" target="_blank" rel="noopener">ref</a></li><li><code>perspective</code> <a href="https://drafts.csswg.org/css-transforms-2/#propdef-perspective" target="_blank" rel="noopener">ref</a></li><li><code>contain</code> <a href="https://drafts.csswg.org/css-contain/" target="_blank" rel="noopener">ref</a></li><li><code>transform-style</code> <a href="https://drafts.csswg.org/css-transforms-2/#transform-style-property" target="_blank" rel="noopener">ref</a></li><li><code>content-visibility</code> <a href="https://drafts.csswg.org/css-contain/#containment-layout" target="_blank" rel="noopener">ref</a></li><li><code>will-change</code> when used with one of the above values</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染流程</title>
      <link href="/2023/04/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%88%E6%88%90%E5%B1%82/"/>
      <url>/2023/04/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%88%E6%88%90%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h4 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h4><ol><li>构建DOM树(Parse HTML)：浏览器无法直接理解和使用HTML，需要通过html解析器，处理HTML标记并构造DOM树，可以通过document节点查看</li></ol><a id="more"></a><ol start="2"><li><p>构建CSSOM树(Parse Stylesheet)：和HTML一样，浏览器需要将CSS转换成可以使用的CSSOM，CSS对象模型是一组允许使用JavaScript操作CSS的API，通过CSSOM实现动态读取和修改CSS样式，可以通过document.stylesheets查看</p></li><li><p>构建渲染树(Recalculate Style)：结合DOM树和CSSOM树，计算 DOM 树中每个节点的样式，涉及css继承规则和层叠规则，这个阶段最终输出的内容是包含样式的DOM树，每个 DOM 节点的样式，可以在devtools的 ComputedStyle 内查看</p></li><li><p>构建布局树(Layout)：根据渲染树生成布局树，布局树会计算每个DOM元素的大小和几何位置信息，且布局树中只包含可见节点，如<code>display:none</code>的DOM节点不包含在布局树中。第一次确认元素的大小和位置叫布局，之后对节点大小或位置的重新计算叫做回流</p></li><li><p>生成渲染层树(Layout): 构建布局树的同时会生成渲染层树，当DOM的LayoutObject在相同的坐标空间时(可以理解为Z轴)，将形成渲染层，渲染层树可以理解为<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener">层叠上下文</a>，确保页面元素以正确的顺序显示</p></li><li><p>生成合成层树(Update Layer Tree)：为一些<strong>特殊的渲染层</strong>生成<strong>合成层</strong>，不是合成层的其他渲染层与拥有合成层的第一个父级共享合成层，每个合成层对应一个图层(GraphicsLayer)，可以在<code>Devtools-Layers</code>面板查看当前的所有图层</p><p><img src="https://yqintl.alicdn.com/de1854a7a33b0453e7b73763d68617a3dc6215b2.jpeg" alt="2"></p></li><li><p>绘制(Paint)：为每个图层(GraphicsLayer)生成绘制列表，用来记录绘制指令和绘制顺序，这些指令在分块光栅化的时候才会被执行</p></li><li><p>合成层(Composite Layers): 并不是在主线程中合成层，而是把合成层信息提交给合成线程，相当于在合成线程中备份一个图层树，这个操作是同步的，会阻塞主线程。这样做的好处是，有了这份拷贝，合成线程可以不必与主线程交互来进行合成操作。因此，当主线程在进行 Javascript 计算等操作时，合成线程仍然可以正常工作而不被打断。</p></li><li><p>生成位图：合成线程接手后，将图层分块，然后光栅化图块(将图块转换为位图)，光栅化的方式有两种：</p><ul><li>第一种是CPU光栅化：通过光栅化线程池将图块绘制进位图，再将位图作为纹理上传到GPU</li><li>第二种是GPU光栅化：浏览器开启了GPU硬件加速，光栅化线程池会将光栅化指令提交给GPU进程，在GPU进程中进行快速光栅化，并保存在GPU内存</li></ul></li><li><p>合成：光栅化完成后，所有的纹理都在GPU内存中，GPU会把所有纹理绘制到最终的一个位图里，从而完成纹理的合并</p></li><li><p>显示：纹理合并完成后，合成线程会通知浏览器进程，浏览器进程将页面绘制到内存中，最终显示在屏幕上</p></li></ol><p>总结一下，浏览器的渲染机制可以简单理解为“纵向分层，横向分块”。</p><h4 id="什么是合成层"><a href="#什么是合成层" class="headerlink" title="什么是合成层"></a>什么是合成层</h4><p>WebKit将网页一帧的渲染分为绘制和合成两个步骤。绘制是将网页分层绘制为图像的过程，合成是将所有图像混合在一起后显示在屏幕上的过程。</p><p>对于显示器来说，无论当前页面有没有发生变化，它在下一帧总是要刷新的，意味着系统需要提供一个完整的屏幕内容供显示器显示，在这样的场景下，把网页分层，当只有其中一层的内容发生变化时，只用对变化的层执行绘制操作，然后与上一帧中没有变化的图层进行合成，就可以得到最终整个屏幕的内容，避免了绘制操作，与绘制相比，合成是很轻量级的操作，尤其是对于GPU来说。</p><p>图层基本都由浏览器去管理，开发者通常不会去干涉，但浏览器回流和重绘的代价很大，在一些情况下合成层能大大提高绘制效率：</p><ol><li><p>合成层可以减少绘制区域，当需要重绘时，只需要合成层重绘，其他层不受影响</p></li><li><p>利用GPU高效实现滚动、3D变换等动画效果，这些动画的执行过程不需要主线程的参与，在纹理合成前，使用 3D API 对合成层进行变形</p></li></ol><h4 id="在Chrome-DevTools查看合成层"><a href="#在Chrome-DevTools查看合成层" class="headerlink" title="在Chrome DevTools查看合成层"></a>在Chrome DevTools查看合成层</h4><h5 id="layer面板"><a href="#layer面板" class="headerlink" title="layer面板"></a>layer面板</h5><h5 id><a href="#" class="headerlink" title></a><img src="../imgs/Chrome优先级调度规则/截屏2022-03-01 上午8.24.43.png" alt="截屏2022-03-01 上午8.24.43"></h5><p><img src="../imgs/Chrome优先级调度规则/截屏2022-02-26 下午4.04.20.png" alt="截屏2022-02-26 下午4.04.20"></p><h5 id="show-layer-border"><a href="#show-layer-border" class="headerlink" title="show layer border"></a>show layer border</h5><p><img src="../imgs/Chrome优先级调度规则/截屏2022-02-26 下午4.05.58.png" alt="截屏2022-02-26 下午4.05.58"></p><h5 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h5><p><img src="../imgs/Chrome优先级调度规则/截屏2022-02-26 下午4.01.56.png" alt="截屏2022-02-26 下午4.01.56"></p><h4 id="生成合成层的原因-Compositing-Reason"><a href="#生成合成层的原因-Compositing-Reason" class="headerlink" title="生成合成层的原因(Compositing Reason)"></a>生成合成层的原因(Compositing Reason)</h4><p>生成合成层的原因有很多，如果想知道全部情况还是需要参考源码，或者参考这边文章<a href="https://blog.csdn.net/Luoshengyang/article/details/50661553?spm=1001.2014.3001.5502" target="_blank" rel="noopener">Chromium网页Graphics Layer Tree创建过程分析</a>，下面列出一些常见的从渲染层提升为合成层的原因：</p><h5 id="直接提升"><a href="#直接提升" class="headerlink" title="直接提升"></a>直接提升</h5><ol><li>硬件加速的iframe元素，<code>video</code>元素，3D <code>canvas</code>元素，2D加速的<code>canvas</code>元素，硬件加速插件(如<code>flash</code>)</li><li>3D变换 <code>transform</code>：<code>translateZ(0)</code>，<code>translate3d(0,0,0)</code>，<code>rotateX(0deg)</code>，<code>rotateY(0deg)</code>，<code>rotateZ(0deg)</code>，<code>rotate3d(1,1,145deg)</code>，<code>scaleZ(1)</code>，<code>scale3d(1,1,1)</code>;</li><li><code>backface-visibility`:`hidden</code>;</li><li><code></code>animation<code>:</code>opacity<code>，</code>transform，<code>，</code> filter<code>，</code>backdrop-filter`;</li><li><p><code>transition</code>设置<code>opacity</code> ，<code>transform</code>， <code>filter</code>， <code>backdrop-filter</code>属性的变换，并且被激活状态`;</p></li><li><p><code>will-change</code>设置为<code>opacity</code>,<code>transform</code></p></li><li><code>will-change</code>设置为<code>left</code>，<code>top</code>，<code>right</code>，<code>bottom</code>，并且设置<code>position</code>定位属性为<code>relative</code>，<code>absolute</code>，<code>fixed</code>，<code>sticky的</code>元素</li><li>在高dpi的显示器上，元素的<code>width</code>和<code>height</code>已知，并且设置<code>position:fixed</code>属性的情况下，元素会自动升为合成层</li></ol><h5 id="子元素影响"><a href="#子元素影响" class="headerlink" title="子元素影响"></a>子元素影响</h5><p>受子元素影响，父元素可能会被提升为合成层，常见的有以下几种情况：</p><ol><li>子元素包含合成层，并且自身设置了<code>opacity &lt; 1</code>,<code>transform</code>,<code>mask</code>,<code>filter</code></li><li>子元素宽高超过父元素，父元素的<code>overflow</code>属性为<code>auto</code>或<code>scroll</code>，父元素会被提升为合成层，滚动条也被提升为单独的合成层</li><li>子元素是3d变换属性生成的合成层，并且自身具有<code>perspective</code>属性</li></ol><h5 id="隐式合成"><a href="#隐式合成" class="headerlink" title="隐式合成"></a>隐式合成</h5><ol><li><p>层叠：从堆叠顺序上来看，为保持正确的渲染顺序，在合成层上一层的元素会被隐式提升为合成层。</p><p>如下图所示，第一张图是正确的渲染结果，但如果蓝色块被提升为合成层，绿色不提升的话，绿色块将和它的父元素白色块渲染到图一图层上，导致渲染结果出错，这种情况下只能将绿色也提升合成层。</p><p><img src="../imgs/Chrome优先级调度规则/overlay.png" alt="overlay"></p></li></ol><ol start="2"><li><p>滚动重叠：浏览器判定该元素在元素滚动时可能会和合成层重叠，就将该元素提升为合成层，示例见<strong>层爆炸</strong></p></li><li><p>假设重叠：元素具有css动画效果，在动画运行期间，动画元素可以重叠其他元素，哪怕目前哪怕视觉上没有重叠，浏览器也会判定假设已经重叠，会将在动画元素之上的元素升级为合成层。</p><pre class=" language-css"><code class="language-css">&lt;style>  <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> slide</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">transform</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.animating</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> slide <span class="token number">5</span>s alternate linear infinite<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>&lt;/style></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animating<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p><img src="../imgs/Chrome优先级调度规则/截屏2022-02-27 下午6.20.47.png" alt="截屏2022-02-27 下午6.20.47"></p></li></ol><h4 id="层压缩和层爆炸"><a href="#层压缩和层爆炸" class="headerlink" title="层压缩和层爆炸"></a>层压缩和层爆炸</h4><h5 id="层压缩"><a href="#层压缩" class="headerlink" title="层压缩"></a>层压缩</h5><p>前面介绍的隐式合成，都很有可能在不知不觉的情况下形成大量的合成层，消耗CPU和内存资源，影响页面性能，浏览器也考虑到了这个问题，会对一些非直接原因创建的合成层进行压缩，避免层爆炸。</p><p>下面的例子中，红色块div1通过<code>transform: translateZ(0);</code>将自身提升为合成层，绿色块布局在它上面，为了保持正确的渲染顺序，绿色块div2也被提升为合成层，依次类推，后面的蓝色和紫色div也应该被提升，但是浏览器对这种非直接因素的提升做了优化，将绿蓝紫都放在同一个合成层</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">div </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box2</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box3</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box4</span> </span><span class="token punctuation">{</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="/Users/sunjiali/Library/Application Support/typora-user-images/截屏2022-02-27 下午6.28.49.png" alt="截屏2022-02-27 下午6.28.49"></p><h5 id="层爆炸"><a href="#层爆炸" class="headerlink" title="层爆炸"></a>层爆炸</h5><p>但还有一些情况，浏览器也无法自动处理压缩，为页面性能埋下隐患，看下面例子，由于滚动元素和合成层重叠，浏览器判定该元素在元素滚动时内部的子元素会和合成层重叠，会将子元素提升为合成层，造成的层爆炸的现象：</p><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>  <span class="token class">.animating</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* overflow: hidden; */</span>  <span class="token punctuation">}</span>&lt;/style></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>animating<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>111111111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p><img src="../imgs/Chrome优先级调度规则/截屏2022-02-27 下午5.29.25.png" alt="截屏2022-02-27 下午5.29.25"></p><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ol><li>合成层的位图会交由 <code>GPU</code> 合成，相比 <code>CPU</code> 处理要快</li><li>将动画效果提升到合成层</li><li>升级为合成层后，执行<code>transform</code>和<code>opacity</code>动画不会触发回流和重绘，只会触发合成</li></ol><h5 id="谨慎使用"><a href="#谨慎使用" class="headerlink" title="谨慎使用"></a>谨慎使用</h5><ol><li>每个合成层都会占用内存资源，过度使用合成层会带来反向效果</li><li>隐式合成容易在意料之外产生大量合成层，需要特别注意</li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://blog.csdn.net/Luoshengyang/article/details/50661553?spm=1001.2014.3001.5502" target="_blank" rel="noopener">Chromium网页Graphics Layer Tree创建过程分析</a></li><li><a href="https://time.geekbang.org/column/article/118826?cid=100033601" target="_blank" rel="noopener">渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work" target="_blank" rel="noopener">How_browsers_work</a></li><li><a href="https://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome/" target="_blank" rel="noopener">GPU Accelerated Compositing in Chrome</a></li><li><a href="https://www.alibabacloud.com/blog/front-end-performance-optimization-with-accelerated-compositing-part-1_594194?spm=a2c65.11461447.0.0.67682379iZXt9m" target="_blank" rel="noopener">Front-End Performance Optimization with Accelerated Compositing Part 1</a></li><li><a href="https://zhuanlan.zhihu.com/p/88288584" target="_blank" rel="noopener">Compositing Layers</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="noopener">stick to compositor only properties and manage layer count</a></li><li><a href="https://james-priest.github.io/udacity-nanodegree-mws/course-notes/browser-rendering-optimization.html" target="_blank" rel="noopener">Browser Rendering Optimization</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 浏览器 </category>
          
          <category> Chrome </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trilium notes基本使用</title>
      <link href="/2022/05/28/trilium%20notes%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/05/28/trilium%20notes%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h4><p>社区有兄弟做了汉化，点这个 <a href="https://github.com/Nriver/trilium-translation/blob/main/README_CN.md" target="_blank" rel="noopener">汉化地址</a></p><a id="more"></a><h4 id="导入导出markdown"><a href="#导入导出markdown" class="headerlink" title="导入导出markdown"></a>导入导出markdown</h4><p>1. 剪贴板导入</p><p><img src="../imgs/trilium notes基本使用/markdown-inline-import.gif" alt></p><p>2. 文件导入</p><p><img src="../imgs/trilium notes基本使用/markdown-file-import.gif" alt></p><p>3. 导出整个目录</p><p><img src="../imgs/trilium notes基本使用/markdown-export-subtree.gif" alt></p><p>4. 导出单个文件</p><p><img src="../imgs/trilium notes基本使用/markdown-export-note.gif" alt></p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>可以参考自带的主题<code>Steel Blue</code><br>1. 建一个code 类型为css的文件<br>2. 字体等资源文件可以放在css文件的下面<br>3. 给css文件加上 #appTheme=steel-blue 标签</p><p>这时就可以在<code>选项→外观→主题</code>的下拉框中选中<code>Steel Blue</code>这个主题了。</p><h4 id><a href="#" class="headerlink" title></a><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%884.58.13.png" alt></h4><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.11.15.png" alt></p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.12.57.png" alt></p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.11.43.png" alt></p><p>trilium notes的github仓库提供了几个写好的主题，可以点这个<a href="https://github.com/zadam/trilium/wiki/Themes" target="_blank" rel="noopener">链接</a>查看和使用。</p><p>很多时候别人预设的主题并不完全符合自己的心意，可以通过自己修改css文件来完善主题样式，trilium给我们提供了开发者工具，在开发者工具中，可以选中某个元素调整它的样式，效果满意后再把代码粘进主题css文件中</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.17.27.png" alt></p><h4 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h4><p>示例中给我们添加了一个 <a href="#root/jtZ7mjUTVn36/uN5bmGeXykM8/aVPvhtvgYAZr">Day template</a> 模板</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.35.30.png" alt></p><p>这个模板会自带一个 TODO的标题，和一个checkbox列表，如果想使用这个模板，需要添加<code>~template=Day template</code> 标签</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.37.58.png" alt></p><p>我们可以建立自己的模板库，放入我们习惯的读书笔记模板，工作会议模板等等，只用在写笔记的时候添加对应的模板标签就可以了</p><h4 id="chrome网页保存"><a href="#chrome网页保存" class="headerlink" title="chrome网页保存"></a>chrome网页保存</h4><p>1. chrome添加扩展程序 <strong>Trilium Web Clipper</strong>  </p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8A%E5%8D%8811.52.43.png" alt></p><p>2. 设置保存路径<br>默认从网页上剪辑的内容都保存在今天日期的日记下，如果想保存在自定义目录，只用在自定义目录中添加<code>#clipperinbox</code> 标签</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8A%E5%8D%8811.49.08.png" alt></p><h4 id="查看文件保存路径"><a href="#查看文件保存路径" class="headerlink" title="查看文件保存路径"></a>查看文件保存路径</h4><p>左侧工具栏的图标 → 关于Trilium Notes</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%885.23.28.png" alt></p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><p>trilium自身功能有限，但是它提供了插件能力，可以通过插件实现一些它自身没有的功能，比如代码块高亮。</p><p>github有一个实现了trilium 代码块高亮的库，<a href="https://github.com/antoniotejada/Trilium-SyntaxHighlightWidget" target="_blank" rel="noopener">点击地址</a>，根据这个库的描述，我们来使用这个它：</p><ol><li>新建一个code类型为js的文件，名字随便取</li><li>为这个文件添加一个标签 <code>#widget</code></li><li>把<a href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js" target="_blank" rel="noopener">highlight.min.js</a>文件附加到上面建好的文件</li></ol><p>看一下效果：</p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.07.27.png" alt></p><p><img src="../imgs/trilium notes基本使用/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.07.43.png" alt></p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>添加标签 #run=frontendStartup </p><p>隐藏文章标题的示例：</p><pre class=" language-js"><code class="language-js">    api<span class="token punctuation">.</span><span class="token function">addButtonToToolbar</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'隐藏文章标题'</span><span class="token punctuation">,</span>        icon<span class="token punctuation">:</span> <span class="token string">'low-vision'</span><span class="token punctuation">,</span>        action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> title <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.title-row'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">':hidden'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.title-row'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.title-row'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-loader都做了些什么</title>
      <link href="/2021/05/28/vue-loader%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"/>
      <url>/2021/05/28/vue-loader%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要内容：</p><ol><li>vue-loader解析vue单文件组件的过程分析</li><li>VueLoaderPlugin的作用</li></ol></blockquote><a id="more"></a><h4 id="1-import一个vue单文件组件时，实际引入是什么"><a href="#1-import一个vue单文件组件时，实际引入是什么" class="headerlink" title="1. import一个vue单文件组件时，实际引入是什么"></a>1. <code>import</code>一个<code>vue</code>单文件组件时，实际引入是什么</h4><p>新建一个<code>index.vue</code>文件，内容如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>ul @click<span class="token operator">=</span><span class="token string">"handleClick"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in list"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>  ul <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>在其他文件中导入 index.vue，并查看输出结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">'./index.vue'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><a href="https://imgtu.com/i/2i7PBj" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/05/28/2i7PBj.png" alt="2i7PBj.png"></a></p><p>看图可以知道，import 一个单文件组件其实就是导入了这样一个对象。</p><h4 id="2-webpack中的loader和plugin"><a href="#2-webpack中的loader和plugin" class="headerlink" title="2.  webpack中的loader和plugin"></a>2.  webpack中的loader和plugin</h4><blockquote><p>webpack 中 loader 的作用是将匹配后缀名的文件从源文件导出为 js 模块，是源文件到 js 模块的转换。</p></blockquote><blockquote><p>plugin 可以在 webpack 构建过程中插入自定义行为，插件的原型对象上都有一个 apply 方法，这个 apply 方法在安装插件时会被 webpack 编译器调用一次。</p></blockquote><p>众所周知，要想使用 vue 单文件组件，必须在 webpack 中配置 vue-loader 和 vueLoaderPlugin 插件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> VueLoaderPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'vue-loader/lib/plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>      loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">VueLoaderPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h4 id="3-vue-loader的解析流程"><a href="#3-vue-loader的解析流程" class="headerlink" title="3. vue-loader的解析流程"></a>3. vue-loader的解析流程</h4><h5 id="1-从字符串到AST抽象语法树"><a href="#1-从字符串到AST抽象语法树" class="headerlink" title="1. 从字符串到AST抽象语法树"></a>1. 从字符串到AST抽象语法树</h5><p>import .vue文件时，会命中vue-loader，第一次调用 vue-loader，原文件首先会被从字符串解析为 AST 抽象语法树，即用普通 js 对象来描述组件中的内容:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/component-compiler-utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> descriptor <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  source<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//source是loader接收到的源代码字符串</span>  compiler<span class="token punctuation">:</span> options<span class="token punctuation">.</span>compiler <span class="token operator">||</span> <span class="token function">loadTemplateCompiler</span><span class="token punctuation">(</span>loaderContext<span class="token punctuation">)</span><span class="token punctuation">,</span>  filename<span class="token punctuation">,</span>  sourceRoot<span class="token punctuation">,</span>  needMap<span class="token punctuation">:</span> sourceMap<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用结果：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'template'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'\n'</span> <span class="token operator">+</span>      <span class="token string">'&lt;ul @click="handleClick">\n'</span> <span class="token operator">+</span>      <span class="token string">'  &lt;li v-for="item in list" :key="item">{{ item }}&lt;/li>\n'</span> <span class="token operator">+</span>      <span class="token string">'&lt;/ul>\n'</span><span class="token punctuation">,</span>    start<span class="token punctuation">:</span> <span class="token number">54</span><span class="token punctuation">,</span>    attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    end<span class="token punctuation">:</span> <span class="token number">148</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  script<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'script'</span><span class="token punctuation">,</span>    content<span class="token punctuation">:</span> <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'//\n'</span> <span class="token operator">+</span>      <span class="token string">'\n'</span> <span class="token operator">+</span>      <span class="token string">'export default {\n'</span> <span class="token operator">+</span>      <span class="token string">'  data() {\n'</span> <span class="token operator">+</span>      <span class="token string">'    return {\n'</span> <span class="token operator">+</span>      <span class="token string">"      list:  ['a', 'b', 'c', 'd', 'e']\n"</span> <span class="token operator">+</span>      <span class="token string">'    };\n'</span> <span class="token operator">+</span>      <span class="token string">'  },\n'</span> <span class="token operator">+</span>      <span class="token string">'  methods: {\n'</span> <span class="token operator">+</span>      <span class="token string">'    handleClick() {\n'</span> <span class="token operator">+</span>      <span class="token string">"      this.list =  ['h', 'i', 'a', 'j', 'k']\n"</span> <span class="token operator">+</span>      <span class="token string">'    },\n'</span> <span class="token operator">+</span>      <span class="token string">'  }\n'</span> <span class="token operator">+</span>      <span class="token string">'};\n'</span><span class="token punctuation">,</span>    start<span class="token punctuation">:</span> <span class="token number">168</span><span class="token punctuation">,</span>    attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    end<span class="token punctuation">:</span> <span class="token number">353</span><span class="token punctuation">,</span>    map<span class="token punctuation">:</span> <span class="token punctuation">{</span>      version<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      sources<span class="token punctuation">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>      names<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      mappings<span class="token punctuation">:</span> <span class="token string">';;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA'</span><span class="token punctuation">,</span>      file<span class="token punctuation">:</span> <span class="token string">'index.vue'</span><span class="token punctuation">,</span>      sourceRoot<span class="token punctuation">:</span> <span class="token string">'src/vue'</span><span class="token punctuation">,</span>      sourcesContent<span class="token punctuation">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  styles<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">'style'</span><span class="token punctuation">,</span>      content<span class="token punctuation">:</span> <span class="token string">'\nul {\n  color: red;\n}\n'</span><span class="token punctuation">,</span>      start<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>      attrs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      end<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>      map<span class="token punctuation">:</span> <span class="token punctuation">[</span>Object<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  customBlocks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  errors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h5 id="2-将AST各部分转换为特殊的引用路径"><a href="#2-将AST各部分转换为特殊的引用路径" class="headerlink" title="2. 将AST各部分转换为特殊的引用路径"></a>2. 将AST各部分转换为特殊的引用路径</h5><p>对这个AST的每部分进行处理，.vue文件会被转换为下面这样的代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//代码1</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  render<span class="token punctuation">,</span>  staticRenderFns<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.vue?vue&amp;type=template&amp;id=21fec300&amp;'</span><span class="token punctuation">;</span><span class="token keyword">import</span> script <span class="token keyword">from</span> <span class="token string">'./index.vue?vue&amp;type=script&amp;lang=js&amp;'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./index.vue?vue&amp;type=script&amp;lang=js&amp;'</span><span class="token punctuation">;</span><span class="token keyword">import</span> style0 <span class="token keyword">from</span> <span class="token string">'./index.vue?vue&amp;type=style&amp;index=0&amp;lang=css&amp;'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* normalize component */</span><span class="token keyword">import</span> normalizer <span class="token keyword">from</span> <span class="token string">'!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js'</span><span class="token punctuation">;</span><span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token function">normalizer</span><span class="token punctuation">(</span>  script<span class="token punctuation">,</span>  render<span class="token punctuation">,</span>  staticRenderFns<span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>component<span class="token punctuation">.</span>options<span class="token punctuation">.</span>__file <span class="token operator">=</span> <span class="token string">'src/vue/index.vue'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> component<span class="token punctuation">.</span>exports<span class="token punctuation">;</span></code></pre><p>关注最前面的import语句，在原本的index.vue后面加入了查询条件，包括vue,type,id,lang等，之后将通过不同的查询条件来处理不同部分的代码</p><h5 id="3-VueLoaderPlugin插件处理rules"><a href="#3-VueLoaderPlugin插件处理rules" class="headerlink" title="3. VueLoaderPlugin插件处理rules"></a>3. VueLoaderPlugin插件处理rules</h5><p>VueLoaderPlugin的主要作用就是对vue不同模块配置不同的loader，在webpack安装插件时，也就是预处理阶段，VueLoaderPlugin的apply会被调用，该方法中拦截了用户自定义的rules属性，加入对 vue 单文件模块处理的规则后，返回调整后的<code>rules</code>列表，看下面的例子：</p><p>自定义rules：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>VueLoaderPlugin处理后的rules：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'xxx/xx/xx/pitcher.js'</span><span class="token punctuation">,</span>        resourceQuery<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">:</span> resourceQuery<span class="token punctuation">]</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span> cacheDirectory<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> cacheIdentifier<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> ident<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> ident<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        resource<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">:</span> resource<span class="token punctuation">]</span><span class="token punctuation">,</span>        resourceQuery<span class="token punctuation">:</span> <span class="token punctuation">[</span>Function<span class="token punctuation">:</span> resourceQuery<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> ident<span class="token punctuation">:</span> <span class="token string">'vue-loader-options'</span> <span class="token punctuation">}</span>            <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> ident<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> undefined<span class="token punctuation">,</span> ident<span class="token punctuation">:</span> undefined <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>可以看出自定义的两个 rules 只是对格式进行统一，主要的修改是添加了 pitcher loader, 复用了处理 css 的 loader，重定义了 它们的resource 和 resourceQuery 属性，resourceQuery属性是通过匹配链接中的查询参数来判断链接是否命中。</p><blockquote><p>resourceQuery: 此选项用于测试请求字符串的查询部分（即从问号开始)<br>resource: 简单理解就是匹配到的资源文件的绝对路径</p></blockquote><p>挨个看一下新加的rule:</p><p>pitcher loader的resourceQuery属性只是简单的匹配第一个查询条件是否是vue</p><pre class=" language-javascript"><code class="language-javascript">resourceQuery<span class="token punctuation">:</span> query <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>    <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parsed<span class="token punctuation">.</span>vue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>复用的rule，resource 和 resourceQuery具体内容如下</p><pre class=" language-javascript"><code class="language-javascript">resource<span class="token punctuation">:</span> resources <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  currentResource <span class="token operator">=</span> resources  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span>resourceQuery<span class="token punctuation">:</span> query <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>  <span class="token keyword">const</span> parsed <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">.</span>vue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> fakeResourcePath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>currentResource<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>parsed<span class="token punctuation">.</span>lang<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> condition <span class="token keyword">of</span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// add support for resourceQuery</span>    <span class="token keyword">const</span> request <span class="token operator">=</span> condition<span class="token punctuation">.</span>property <span class="token operator">===</span> <span class="token string">'resourceQuery'</span> <span class="token operator">?</span> query <span class="token punctuation">:</span>fakeResourcePath    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>condition<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p>resource只是为了获取当前资源文件的绝对路径，赋值给currentResource</p><p>resourceQuery简单来说就是将<code>.</code>+查询条件中<code>lang</code>属性作为后缀名添加到当前请求的最末尾，判断这个后缀名是否在rules中配置了对应的loader，如果有loader返回true,否则返回false。</p><h5 id="4-执行pitching-loader，生成内联loader"><a href="#4-执行pitching-loader，生成内联loader" class="headerlink" title="4. 执行pitching loader，生成内联loader"></a>4. 执行pitching loader，生成内联loader</h5><p>rules列表中目前配置了四个rule，正常情况下loader 总是 从右到左被调用，即import文件时，匹配的顺序是.css -&gt; .vue -&gt; resourceQuery -&gt; pitcher resourceQuery，但这组的第一个loader定义了pitch方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//pitcher.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> code <span class="token operator">=</span><span class="token operator">></span> code module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>pitch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>remainingRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//code</span><span class="token punctuation">}</span></code></pre><p>查看文档上关于<a href="https://webpack.docschina.org/api/loaders/#pitching-loader" target="_blank" rel="noopener">pitching loader的介绍</a></p><blockquote><p>loader 总是 从右到左被调用。有些情况下，loader 只关心 request 后面的 元数据(metadata)，并且忽略前一个 loader 的结果。在实际（从右到左）执行 loader 之前，会先 从左到右 调用 loader 上的 pitch 方法。</p></blockquote><p>重点是会先从左到右调用 loader 上的 pitch 方法，举个例子，当执行这句代码时，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> staticRenderFns<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./index.vue?vue&amp;type=template&amp;id=21fec300&amp;'</span><span class="token punctuation">;</span></code></pre><p>执行顺序可以看做是：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">|</span><span class="token operator">-</span> pitcher<span class="token operator">-</span>loader <span class="token template-string"><span class="token string">`pitch`</span></span>  <span class="token operator">|</span><span class="token operator">-</span> resourceQuery<span class="token operator">-</span>loader <span class="token template-string"><span class="token string">`pitch`</span></span> <span class="token comment" spellcheck="true">//匹配了resourceQuery</span>    <span class="token operator">|</span><span class="token operator">-</span> vue<span class="token operator">-</span>loader <span class="token template-string"><span class="token string">`pitch`</span></span>      <span class="token operator">|</span><span class="token operator">-</span> css<span class="token operator">-</span>loader <span class="token template-string"><span class="token string">`pitch`</span></span>        <span class="token operator">|</span><span class="token operator">-</span> requested module is picked up <span class="token keyword">as</span> a dependency      <span class="token operator">|</span><span class="token operator">-</span> css<span class="token operator">-</span>loader normal execution    <span class="token operator">|</span><span class="token operator">-</span> vue<span class="token operator">-</span>loader normal execution  <span class="token operator">|</span><span class="token operator">-</span> resourceQuery<span class="token operator">-</span>loader normal execution<span class="token operator">|</span><span class="token operator">-</span> pitcher<span class="token operator">-</span>loader normal execution</code></pre><p>在这里参数?vue命中了pitcher loader的resourceQuery，执行pitcher loader的pitch方法，这个方法根据参数type来生成<a href="https://webpack.docschina.org/concepts/loaders/#inline" target="_blank" rel="noopener">内联lodaer</a>,如<code>type=template</code>执行完pitch会返回值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"-!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&amp;type=template&amp;id=21fec300&amp;"</span></code></pre><p>这个阶段中，如果某个 loader 在 pitch 方法中返回一个结果，那么这个过程会回过身来，并跳过剩下的 loader。<br>也就是只会执行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">|</span><span class="token operator">-</span> pitcher<span class="token operator">-</span>loader <span class="token template-string"><span class="token string">`pitch`</span></span></code></pre><p>其他import语句中带有<code>?vue&amp;type=xxx&amp;lang=xxx&amp;&#39;</code>的链接都是同理，最终都会被转换为如上所示的一段内联loader</p><h5 id="5-执行内联loader"><a href="#5-执行内联loader" class="headerlink" title="5. 执行内联loader"></a>5. 执行内联loader</h5><p>内联loader按照从右到左的顺序执行，还看上面的例子,<code>export  &#39;./index.vue?vue&amp;type=template&amp;id=21fec300&amp;&#39;</code>的loader是<code>vue-loader/lib/index.js</code>,因为链接查询条件中带有type属性，直接命中下面这段代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// if the query has a type field, this is a language block request</span>  <span class="token comment" spellcheck="true">// e.g. foo.vue?type=template&amp;id=xxxxx</span>  <span class="token comment" spellcheck="true">// and we will return early</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>incomingQuery<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">selectBlock</span><span class="token punctuation">(</span>      descriptor<span class="token punctuation">,</span>      loaderContext<span class="token punctuation">,</span>      incomingQuery<span class="token punctuation">,</span>      <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>appendExtension    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>返回template部分的代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>这段代码会传入<code>loaders/templateLoader.js</code>被解析，<code>templateLoader</code>使用<code>vue-template-compiler</code>将<code>html</code>代码转换为<code>render</code>和<code>staticRenderFns</code>，最终用<code>exports</code> 导出，这也是为什么<code>vue-cli</code>文档上要求将<code>vue-loader</code>和<code>vue-template-compiler</code>一起安装的原因。</p><blockquote><p>你应该将 vue-loader 和 vue-template-compiler 一起安装——除非你是使用自行 fork 版本的 Vue 模板编译器的高阶用户</p></blockquote><p>vue单文件组件中的不同模块都是按照这种模式使用对应的loader来处理，回看<code>代码1</code>，<code>import</code>都导入完成之后，执行<code>normalizer</code>方法，将script标签中定义的data,methods等对象和render,staticRenderFns组装在同一个对象中返回，这就是导入一个单文件组件的大致流程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue-loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码阅读——从单文件组件到dom渲染</title>
      <link href="/2021/05/03/Vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94%E4%BB%8E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%E5%88%B0dom%E6%B8%B2%E6%9F%93/"/>
      <url>/2021/05/03/Vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94%E4%BB%8E%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6%E5%88%B0dom%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>导入一个单文件组件并用 console.log 输出，可以看到就是导入了如下这样的对象：</p><a id="more"></a><p><a href="https://imgtu.com/i/2TBXTO" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/06/14/2TBXTO.png" alt="2TBXTO.png"></a></p><p>渲染单文件组件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>h 函数就是$createElement函数，$createElement 函数的第一个参数应该是 tag，也就是渲染单文件组件时，传入的 tag 是一个如上图的对象，$createElement 的处理也很直接，如果 tag 不是 string 类型的话，直接去 createComponent：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  vnode <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//主要关注tag参数</span><span class="token punctuation">}</span></code></pre><p>通过赋值的变量名知道，createComponent 是返回了一个 vnode 对象，看一下具体处理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">,</span> data<span class="token punctuation">,</span> context<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Ctor对应调用时传入的tag</span>  <span class="token keyword">const</span> baseCtor <span class="token operator">=</span> context<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>_base<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在initGlobalAPI时被赋值为Vue实例</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Ctor <span class="token operator">=</span> baseCtor<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建Vue的子类</span>  <span class="token punctuation">}</span>  data <span class="token operator">=</span> data <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">installComponentHooks</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>    <span class="token template-string"><span class="token string">`vue-component-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Ctor<span class="token punctuation">.</span>cid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">,</span>    undefined<span class="token punctuation">,</span>    undefined<span class="token punctuation">,</span>    undefined<span class="token punctuation">,</span>    context<span class="token punctuation">,</span>    <span class="token punctuation">{</span>      Ctor<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*其他*/</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>extend 函数是创建 Vue 的子类，创建 VNode 实例时第七个参数是 componentOptions，将这个子类包含进去了，之后会用到，这里先知道 createComponent 实际就是返回了一个 vnode，可以理解为这里生成vnode是一个组件的占位vnode。</p><p>生成 vnode 后，下一步就是去 patch，看下面的代码(简化后)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>        oldVnode <span class="token operator">=</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">;</span>      <span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span>      <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>elm  <span class="token punctuation">}</span></code></pre><p>第一次挂载，这里的 oldVnode 就是#app 元素，它是一个真实的 dom 节点，会创建一个空的 vnode，然后执行 createElm：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> vnode<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>hook<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isDef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> i<span class="token punctuation">.</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">i</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">initComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">initComponent</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span>$el<span class="token punctuation">}</span></code></pre><p>i.init方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> componentVNodeHooks <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">init</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> child <span class="token operator">=</span> vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>Ctor</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      _isComponent<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      _parentVnode<span class="token punctuation">:</span> vnode<span class="token punctuation">,</span>      parent    <span class="token punctuation">}</span><span class="token punctuation">)</span>    child<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> child<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述都是简化后的代码，步骤就是根据上面使用extend创建Vue子类创建组件实例，并调用$mount挂载。</p><p>挂载的过程首先会调用render生成vnode，这次调用render，将会调用组件真正的render，获取组件的vnode树，因为是第一次挂载，patch的过程中直接生成dom节点，子节点插入父节点，组成dom树，patch方法最终返回的vnode.elm，就是真实的dom树，它将被复制给组件实例的$el属性，组件实例的$el属性又会在组件挂载结束后被赋值给组件占位vnode的elm属性，最终插入#app节点，完成组件的渲染</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue源码阅读——从render函数到dom渲染</title>
      <link href="/2021/05/01/Vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94%E4%BB%8Erender%E5%88%B0dom%E6%B8%B2%E6%9F%93/"/>
      <url>/2021/05/01/Vue%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E2%80%94%E2%80%94%E4%BB%8Erender%E5%88%B0dom%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<p>大部分源码解析的文章都是从项目结构开始，然后再从入口处跟着它的执行流程一步步分析，但我发现那不适合我，很容易看着看着就不知道自己在看什么，我的方法是带着问题出发，先把自己想知道的点拆解成一个个问题，由浅入深，多次有选择的去看源码，每次只关注一个问题，解决一个问题后再继续下一个，最后再回过头来总结整体</p><a id="more"></a><p>考虑下面的代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>      <span class="token string">'div'</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">'hello world'</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这段 vue 代码，最终会生成下面的 dom 结构并渲染到页面上</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>很显然 render 方法中传入的这个 h 参数是一个函数，这个函数可以将标签 div，属性 id，内容 hello world 转换成 dom 元素，看一下 vue 源码中的处理，注意这里简化源码但不破坏源码的结构：</p><p>vue/src/core/instance/index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Vue</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>new Vue()</code>时会调用实例的<code>_init</code> 方法，这个方法挂载在 Vue 原型上</p><p>vue/src/core/instance/init.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_init <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    vm<span class="token punctuation">.</span>$options <span class="token operator">=</span> options<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//简化了源码中对用户传入options的处理</span>    <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//initRender在实例上绑定render相关的代码，这里主要关注$createElement方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//第一次挂载时将执行到这里，vm.$options.el即 ”el: '#app'“</span>      vm<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$options<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vue/src/core/instance/render.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initRender</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span>$createElement <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">createElement</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vue/src/core/vdom/create-element.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>  children <span class="token operator">=</span> <span class="token function">normalizeChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> data<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>暂时只用知道，<code>initRender</code>在实例上绑定<code>$createElement</code>方法，调用<code>vm.$createElement</code>方法，会返回一个 <code>VNode</code> 实例，继续往下走，第一次渲染时，如果options中传入了 el 参数，会自动执行实例上的<code>$mount</code>方法，否则需要自己手动调用:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//传入el参数，自动挂载</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手动挂载</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    render<span class="token punctuation">:</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>'div<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>继续看<code>$mount</code>方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'core/index'</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token punctuation">{</span> mountComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'core/instance/lifecycle'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> query <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'web/util/index'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$mount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  el <span class="token operator">=</span> el <span class="token operator">&amp;&amp;</span> inBrowser <span class="token operator">?</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">:</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//query方法就是根据el选择器获取dom元素</span>  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  vm<span class="token punctuation">.</span>$el <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vm<span class="token punctuation">,</span> el<span class="token punctuation">)</span> <span class="token punctuation">{</span>  vm<span class="token punctuation">.</span><span class="token function">_update</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">_render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>vue/src/core/instance/render.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> vm<span class="token punctuation">.</span>$options<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里解构出来的render就是new Vue时传入的render</span>    <span class="token keyword">let</span> vnode<span class="token punctuation">;</span>    vnode <span class="token operator">=</span> render<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_renderProxy<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>$createElement<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//vm._renderProxy可以暂看做vm本身</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们都知道，render函数的参数为h，从<code>render.call(vm._renderProxy, vm.$createElement)</code>看出，参数h就是<code>vm.$createElement</code>方法，这个方法最终返回VNode，有一个很妙的地方是h的第三个参数children, 看下面的代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span>    <span class="token string">'div'</span><span class="token punctuation">,</span>     <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">'hello'</span><span class="token punctuation">,</span>         <span class="token string">'world'</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>children的每一项都是h()的调用结果，也就是vnode对象，<a href="https://cn.vuejs.org/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">vue文档</a>中说children是</p><blockquote><p>{String | Array}<br>  子级虚拟节点 (VNodes)，由 <code>createElement()</code> 构建而成，<br>  也可以使用字符串来生成“文本虚拟节点”。可选。</p></blockquote><p>这样的写法直接构造了vnode树，是diff算法、dom挂载的基础。</p><p>继续之前的代码，_render的返回值是一个vnode，传入_update中，_update主要调用patch对比上一次渲染的vnode和本次渲染的vnode，由于是第一次渲染，不存在上一次的vnode，所以对比vm.$el和本次vnode</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">lifecycleMixin</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    vm<span class="token punctuation">.</span><span class="token function">__patch__</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>$el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//vm.$el是dom元素，在$mount中被赋值</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__patch__ <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> insertedVnodeQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isRealElement <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//判断是否是dom元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRealElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    oldVnode <span class="token operator">=</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//根据dom元素的tag创建VNode</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> oldElm <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>elm<span class="token punctuation">;</span>  <span class="token keyword">const</span> parentElm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取父元素</span>  <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldElm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">removeVnodes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>oldVnode<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>vue/src/core/vdom/patch.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">emptyNodeAt</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VNode</span><span class="token punctuation">(</span>nodeOps<span class="token punctuation">.</span><span class="token function">tagName</span><span class="token punctuation">(</span>elm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> elm<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElm</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    vnode<span class="token punctuation">.</span>elm <span class="token operator">=</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">insert</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> refElm<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createChildren</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> children<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">createElm</span><span class="token punctuation">(</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    nodeOps<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeOps<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">,</span> ref<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      nodeOps<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> elm<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以上是大部分简化的代码，VNode对象的代码可以查看源码，很好理解，另外关于nodeOps的代码这里不列出来了，就是对dom元素的操作，根据名字很容易理解。</p><p>很清晰的可以看出，从createElm开始深度遍历vnode树，从上到下遍历时创建dom元素，回溯时再从下到上将子dom节点插入父节点，最终根vnode的elm属性就是完整的dom结构，最终插入$el元素的父元素上，在本例子中就是body元素，至此页面上就会渲染出dom元素了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML查漏补缺</title>
      <link href="/2020/11/04/HTML%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/2020/11/04/HTML%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="1-a标签"><a href="#1-a标签" class="headerlink" title="1. a标签"></a>1. a标签</h4><h5 id="a标签可以调起系统自带的电话和发送邮件功能"><a href="#a标签可以调起系统自带的电话和发送邮件功能" class="headerlink" title="a标签可以调起系统自带的电话和发送邮件功能"></a>a标签可以调起系统自带的电话和发送邮件功能</h5><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel:+18500000000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mailto:123456@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h5 id="a标签不能嵌套a标签"><a href="#a标签不能嵌套a标签" class="headerlink" title="a标签不能嵌套a标签"></a>a标签不能嵌套a标签</h5><p>HTML规范中，<a>标签不能嵌套另一可交互元素，比如<code>&lt;a&gt;</code>,<code>&lt;button&gt;</code></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白话JS观察者模式和发布订阅模式</title>
      <link href="/2020/10/25/%E7%99%BD%E8%AF%9DJS%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/10/25/%E7%99%BD%E8%AF%9DJS%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>从对观察者模式和发布订阅模式有疑问开始，连续看了好几篇文章，最后疑惑依然存在，这到底哪里不一样？？进一步研究和思考后才搞明白，我决定用最大白话最直观的代码方式来记录下来，以便未来再次忘记时来翻阅。<br><a id="more"></a></p><p>观察者模式和发布订阅模式最大的区别就是调度的方式不同，观察者模式是由目标直接调度，发布订阅模式由调度中心调度，这句话比较抽象，用最简单的代码表现一下大概是下面这样：</p><ol><li>纯享版观察者模式</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Subject <span class="token operator">=</span> <span class="token punctuation">{</span>  observers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//观察者列表</span>  <span class="token function">add</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加观察者</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//移除观察者</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通知所有观察者</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>纯享版发布订阅模式</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Event <span class="token operator">=</span> <span class="token punctuation">{</span>  _listeners<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//订阅通道</span>  on<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  emit<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_listeners<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试</span>Event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 'hello world' 和 'test'</span></code></pre><p>从上面两个纯享版代码可以看出来，观察者模式就是维护一个观察者列表，当需要时，直接广播通知(遍历整个观察者列表)；发布订阅模式是维护一个订阅通道，所谓订阅通道就是一个按事件名称存储订阅列表的地方，当某个事件名称被触发时，会在订阅通道中查找对应的订阅者列表，所以说白了发布订阅模式就是若干个观察者模式的集合，这样够直白了吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从前端角度记录superset二次开发</title>
      <link href="/2020/08/07/superset%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
      <url>/2020/08/07/superset%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>项目里 superset 版本是 0.36.0, python 版本是 3.6, 网上大部分资料都是后端开发人员贡献的，这篇文章我从一个前端的角度记录一下 superset 二次开发遇到的一些问题和解决方法。<br><a id="more"></a><br>先讲一下项目的大概结构：</p><ul><li>整个项目的后台代码使用了 python，这部分放在项目根目录的 superset 目录下</li><li>一整个后台的框架页面使用了 jinjia2，在项目根目录/superset/templates 下查看</li><li>页面上图表相关的展示和操作使用了 react，在/superset-frontend 目录下查看</li><li>前端打包后的页面放在/superset/static 目录下</li></ul><h4 id="1-修改-添加生成图表的表单项"><a href="#1-修改-添加生成图表的表单项" class="headerlink" title="1. 修改/添加生成图表的表单项"></a>1. 修改/添加生成图表的表单项</h4><p>src/explore目录中都是生成图表的表单项相关的代码，如果想添加一项只用在src/explore/controls.jsx文件中，模拟controls对象中的一项去添加一个属性，如添加一个’all_columns_x’</p><pre class=" language-javascript"><code class="language-javascript">all_columns_x<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'SelectControl'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//可以在explore/components/controls目录中找到对应的组件</span>    label<span class="token punctuation">:</span> <span class="token string">'X'</span><span class="token punctuation">,</span>    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    description<span class="token punctuation">:</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">'Columns to display'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    mapStateToProps<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      choices<span class="token punctuation">:</span> <span class="token function">columnChoices</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>datasource<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h4 id="2-修改透视表-Pivot-Table-中的默认排序列"><a href="#2-修改透视表-Pivot-Table-中的默认排序列" class="headerlink" title="2. 修改透视表(Pivot Table)中的默认排序列"></a>2. 修改透视表(Pivot Table)中的默认排序列</h4><h4 id="3-透视表表头和表内容列错位"><a href="#3-透视表表头和表内容列错位" class="headerlink" title="3. 透视表表头和表内容列错位"></a>3. 透视表表头和表内容列错位</h4><h4 id="4-修改默认语言为中文"><a href="#4-修改默认语言为中文" class="headerlink" title="4. 修改默认语言为中文"></a>4. 修改默认语言为中文</h4><p>修改<code>superset/config.py</code>文件</p><pre class=" language-python"><code class="language-python">BABEL_DEFAULT_LOCALE <span class="token operator">=</span> <span class="token string">"zh"</span></code></pre><h4 id="5-添加新菜单、菜单跳转到新页面"><a href="#5-添加新菜单、菜单跳转到新页面" class="headerlink" title="5. 添加新菜单、菜单跳转到新页面"></a>5. 添加新菜单、菜单跳转到新页面</h4><h5 id="找到-navbar-menu-html"><a href="#找到-navbar-menu-html" class="headerlink" title="找到 navbar_menu.html"></a>找到 navbar_menu.html</h5><p>添加菜单涉及到权限，需要后台开发人员配合，可以先避开权限问题，让添加的菜单显示出来，完成前端部分工作。</p><p>打开 superset/templates/appbuilder/navbar_menu.html 文件，如果 appbuilder 下没有 navbar_menu.html，可以到本地安装的 superset 目录下找，比如我的 superset 装在/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/superset/下，那就可以到这个目录找 templates/appbuilder/navbar_menu.html，在修改过程中遇到项目中没有的 html 文件都是这样操作，找到后如果需要修改这个 html 文件，可以把它复制到自己项目的对应文件夹下。</p><h5 id="修改-navbar-menu-html-文件"><a href="#修改-navbar-menu-html-文件" class="headerlink" title="修改 navbar_menu.html 文件"></a>修改 navbar_menu.html 文件</h5><p><code>is_menu_visible</code>是用来过滤菜单的，先把它注释掉</p><pre class=" language-html"><code class="language-html">{% for item1 in menu.get_list() %}<span class="token comment" spellcheck="true">&lt;!-- is_menu_visible --></span>{% if item1 | is_menu_visible %} {% if item1.childs %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-toggle<span class="token punctuation">"</span></span> <span class="token attr-name">data-toggle</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>noopener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% if item1.icon %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa {{item1.icon}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span> {% endif %} {{_(item1.label)}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>caret<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropdown-menu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {% for item2 in item1.childs %} {% if item2 %} {% if item2.name == '-' %} {%    if not loop.last %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>divider<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endif %}    <span class="token comment" spellcheck="true">&lt;!-- | is_menu_visible  --></span>    {% elif item2 | is_menu_visible %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ menu_item(item2) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    {% endif %} {% endif %} {% endfor %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>{% else %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{{ menu_item(item1) }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>{% endif %} {% endif %} {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h5 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h5><p>修改 superset/app.py 文件</p><pre class=" language-python"><code class="language-python">appbuilder<span class="token punctuation">.</span>add_link<span class="token punctuation">(</span>    <span class="token string">"New Menu"</span><span class="token punctuation">,</span>    label<span class="token operator">=</span>__<span class="token punctuation">(</span><span class="token string">"New Menu"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    href<span class="token operator">=</span><span class="token string">"/superset/new"</span><span class="token punctuation">,</span>    icon<span class="token operator">=</span><span class="token string">"fa-cloud-upload"</span><span class="token punctuation">,</span>    category<span class="token operator">=</span><span class="token string">"New"</span><span class="token punctuation">,</span>    category_label<span class="token operator">=</span>__<span class="token punctuation">(</span><span class="token string">"New"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_icon<span class="token operator">=</span><span class="token string">"fa-wrench"</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h5 id="添加处理函数"><a href="#添加处理函数" class="headerlink" title="添加处理函数"></a>添加处理函数</h5><p>修改 <code>superset/views/core.py</code> 文件， 在<code>class Superset</code>下添加</p><pre class=" language-python"><code class="language-python">@has_access@expose<span class="token punctuation">(</span><span class="token string">"/new"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">doudizhu_events</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""SQL Editor"""</span>    bootstrap_data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>render_template<span class="token punctuation">(</span>        <span class="token string">"superset/basic.html"</span><span class="token punctuation">,</span> entry<span class="token operator">=</span><span class="token string">"new"</span><span class="token punctuation">,</span> bootstrap_data<span class="token operator">=</span>bootstrap_data    <span class="token punctuation">)</span></code></pre><p>在<code>class Superset</code>中定义的处理函数根路径都是<code>/superset</code>,所以现在就有了一个<code>/superset/new</code>的路径，与上面<code>add_link</code>的<code>href</code>属性对应，这里的<code>entry=&quot;new&quot;</code>指向的是 react 的入口文件</p><h5 id="添加入口文件"><a href="#添加入口文件" class="headerlink" title="添加入口文件"></a>添加入口文件</h5><p>修改<code>/superset-frontend/webpack.config.js</code>文件，在 config.entry 下添加新的入口</p><pre class=" language-javascript"><code class="language-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>  theme<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>APP_DIR<span class="token punctuation">,</span> <span class="token string">"/src/new/index.jsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在对应的<code>/src/new</code>下添加<code>index.jsx</code>文件，可以仿照<code>superset-frontend/src/addSlice</code>下的文件</p><p>index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App"</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>App.jsx</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> hot <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-hot-loader/root"</span><span class="token punctuation">;</span><span class="token keyword">import</span> setupApp <span class="token keyword">from</span> <span class="token string">"../../setup/setupApp"</span><span class="token punctuation">;</span><span class="token keyword">import</span> setupPlugins <span class="token keyword">from</span> <span class="token string">"../../setup/setupPlugins"</span><span class="token punctuation">;</span><span class="token keyword">import</span> New <span class="token class-name">from</span> <span class="token string">"./New"</span><span class="token punctuation">;</span><span class="token function">setupApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setupPlugins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> appContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bootstrapData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>appContainer<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>New <span class="token class-name">datasources</span><span class="token operator">=</span><span class="token punctuation">{</span>bootstrapData<span class="token punctuation">.</span>datasources<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">hot</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="编写组件代码"><a href="#编写组件代码" class="headerlink" title="编写组件代码"></a>编写组件代码</h5><p>New.jsx 中就是正常的 react 组件代码</p><h4 id="6-添加新图例，引入-echarts"><a href="#6-添加新图例，引入-echarts" class="headerlink" title="6. 添加新图例，引入 echarts"></a>6. 添加新图例，引入 echarts</h4><p><a href="https://blog.csdn.net/wenqiang1208/article/details/105362561/" target="_blank" rel="noopener">参考</a></p><p>以添加一个简单的折线图为例</p><ul><li>在 superset-frontend/src/visualizations/ 目录下新建文件夹 SimpleLine，在 SimpleLine 文件夹下新建 images 文件夹,images 文件夹中放 SimpleLine 这个新图例的的缩略图，然后继续在 SimpleLine 文件夹下新建 SimpleLine.jsx,SimpleLinePlugin.js,transformProps.js，</li></ul><h5 id="新建-SimpleLinePlugin-js"><a href="#新建-SimpleLinePlugin-js" class="headerlink" title="新建 SimpleLinePlugin.js"></a>新建 SimpleLinePlugin.js</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@superset-ui/translation"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ChartMetadata<span class="token punctuation">,</span> ChartPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@superset-ui/chart"</span><span class="token punctuation">;</span><span class="token keyword">import</span> transformProps <span class="token keyword">from</span> <span class="token string">"./transformProps"</span><span class="token punctuation">;</span><span class="token keyword">import</span> thumbnail <span class="token keyword">from</span> <span class="token string">"./images/thumbnail.png"</span><span class="token punctuation">;</span><span class="token keyword">const</span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChartMetadata</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"Simple Line"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  thumbnail<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SimpleLinePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">ChartPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      metadata<span class="token punctuation">,</span>      transformProps<span class="token punctuation">,</span>      loadChart<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./SimpleLine.jsx"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="新建-transformProps-js"><a href="#新建-transformProps-js" class="headerlink" title="新建 transformProps.js"></a>新建 transformProps.js</h5><p>这个文件单纯的用来转换数据，可以在这里把从后端接收到的数据处理成前端展示需要的格式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">transformProps</span><span class="token punctuation">(</span>chartProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    height<span class="token punctuation">,</span>    width<span class="token punctuation">,</span>    datasource<span class="token punctuation">,</span>    formData<span class="token punctuation">,</span>    queryData<span class="token punctuation">,</span>    rawFormData<span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> chartProps<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> records<span class="token punctuation">,</span> columns <span class="token punctuation">}</span> <span class="token operator">=</span> queryData<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    width<span class="token punctuation">,</span>    height<span class="token punctuation">,</span>    data<span class="token punctuation">:</span> records<span class="token punctuation">,</span>    columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span>    columns_x<span class="token punctuation">:</span> rawFormData<span class="token punctuation">.</span>all_columns_x<span class="token punctuation">,</span>    columns_y<span class="token punctuation">:</span> rawFormData<span class="token punctuation">.</span>all_columns_y<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="新建-SimpleLine-jsx"><a href="#新建-SimpleLine-jsx" class="headerlink" title="新建 SimpleLine.jsx"></a>新建 SimpleLine.jsx</h5><p>这部分代码我只放了个大概，主要做的工作就是通过 props 接收参数，然后导入<code>echarts-for-react</code>并使用，关于 echarts 的配置，直接参考 echarts 文档。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactEcharts <span class="token keyword">from</span> <span class="token string">"echarts-for-react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>  columns<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>  width<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  height<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  columns_x<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>  columns_y<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检查类型，其中data包含viz.py中返回的数据，width和height为图表宽高</span><span class="token keyword">class</span> <span class="token class-name">SimpleLine</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> yName<span class="token punctuation">,</span>          data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>ReactEcharts        option<span class="token operator">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>height <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ReactEcharts<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>SimpleLine<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token string">"simple line"</span><span class="token punctuation">;</span>SimpleLine<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> propTypes<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> SimpleLine<span class="token punctuation">;</span></code></pre><h5 id="修改文件-superset-frontend-src-setup-setupPlugins-ts"><a href="#修改文件-superset-frontend-src-setup-setupPlugins-ts" class="headerlink" title="修改文件/superset-frontend/src/setup/setupPlugins.ts"></a>修改文件/superset-frontend/src/setup/setupPlugins.ts</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 文件开头导入SimpleLine</span><span class="token keyword">import</span> SimpleLine <span class="token keyword">from</span> <span class="token string">'../explore/controlPanels/SimpleLine'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册SimpleLine,在getChartControlPanelRegistry()方法的链式调用后追加一句</span><span class="token punctuation">.</span><span class="token function">registerValue</span><span class="token punctuation">(</span><span class="token string">'simple_line'</span><span class="token punctuation">,</span> SimpleLine<span class="token punctuation">)</span></code></pre><h5 id="修改文件-superset-frontend-src-visualizations-presets-MainPreset-js"><a href="#修改文件-superset-frontend-src-visualizations-presets-MainPreset-js" class="headerlink" title="修改文件/superset-frontend/src/visualizations/presets/MainPreset.js"></a>修改文件/superset-frontend/src/visualizations/presets/MainPreset.js</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导入</span><span class="token keyword">import</span> SimpleLineChartPlugin <span class="token keyword">from</span> <span class="token string">"../SimpleLine/SimpleLinePlugin"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在plugins后添加</span><span class="token keyword">new</span> <span class="token class-name">SimpleLineChartPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">"simple_line"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="后端代码添加-class-SimpleLine"><a href="#后端代码添加-class-SimpleLine" class="headerlink" title="后端代码添加 class SimpleLine"></a>后端代码添加 class SimpleLine</h5><p>修改<code>/superset/viz.py</code>文件,在<code>viz_types</code>的定义前添加<code>class SimpleLine</code>,下面这段代码根据你需要的数据自行进行处理，这里只做最简单的演示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SimpleLine</span><span class="token punctuation">(</span>BaseViz<span class="token punctuation">)</span><span class="token punctuation">:</span>    viz_type <span class="token operator">=</span> <span class="token string">'simple_line'</span>    verbose_name <span class="token operator">=</span> <span class="token string">"simple line"</span>    sort_series <span class="token operator">=</span> <span class="token boolean">False</span>    is_timeseries <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">query_obj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query_obj<span class="token punctuation">(</span><span class="token punctuation">)</span>        fd <span class="token operator">=</span> self<span class="token punctuation">.</span>form_data <span class="token comment" spellcheck="true">#form_data中包含界面左侧组件内容</span>        columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> fd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'all_columns'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这个字段对应×××组件，不为空</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Choose Columns'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> fd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'all_columns'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span><span class="token string">'columns'</span><span class="token punctuation">]</span> <span class="token operator">=</span> columns <span class="token comment" spellcheck="true"># all_columns是左侧组件名，后面会提到</span>        <span class="token keyword">return</span> d    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># df是pandas的DataFrame类型</span>        data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#假设数据很简单，不需要做别的处理</span>        <span class="token comment" spellcheck="true"># 如果除了绘图用的数据还有别的信息，可以构造一个字典来返回</span>        <span class="token comment" spellcheck="true"># data = {'plot_data':plot_data,'other_info':other_info}</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>handle_js_int_overflow<span class="token punctuation">(</span>            dict<span class="token punctuation">(</span>records<span class="token operator">=</span>df<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span></code></pre><p>这样就大功告成了。</p><h4 id="7-三级菜单"><a href="#7-三级菜单" class="headerlink" title="7. 三级菜单"></a>7. 三级菜单</h4><p>菜单的修改都需要注意，登录成功后进入的welcome页面和其他页面使用的模板不一样，welcome页面的菜单是通过react代码写的，写两套的用意大概是向开发者展示两种写法，我们可以使用其中一种，如果两种都用了， 在修改菜单时需要注意两处都要修改：</p><ol><li><code>superset/templates/appbuilder/navbar_menu.html</code><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item1 <span class="token keyword">in</span> menu<span class="token punctuation">.</span>get_list<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item1 <span class="token operator">|</span> is_menu_visible <span class="token operator">%</span><span class="token punctuation">}</span>     <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item1<span class="token punctuation">.</span>childs <span class="token operator">%</span><span class="token punctuation">}</span>         <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown-toggle"</span> data<span class="token operator">-</span>toggle<span class="token operator">=</span><span class="token string">"dropdown"</span> href<span class="token operator">=</span><span class="token string">"javascript:void(0)"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> rel<span class="token operator">=</span><span class="token string">"noopener"</span><span class="token operator">></span>         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item1<span class="token punctuation">.</span>icon <span class="token operator">%</span><span class="token punctuation">}</span>             <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa {{item1.icon}}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>         <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>         <span class="token punctuation">{</span><span class="token punctuation">{</span>_<span class="token punctuation">(</span>item1<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"caret"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>         <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown-menu"</span><span class="token operator">></span>         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item2 <span class="token keyword">in</span> item1<span class="token punctuation">.</span>childs <span class="token operator">%</span><span class="token punctuation">}</span>             <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item2 <span class="token operator">%</span><span class="token punctuation">}</span>                 <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item2<span class="token punctuation">.</span>childs <span class="token operator">%</span><span class="token punctuation">}</span>                     <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown-submenu"</span> style<span class="token operator">=</span><span class="token string">"position:relative"</span><span class="token operator">></span>                         <span class="token operator">&lt;</span>a <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown-toggle"</span> data<span class="token operator">-</span>toggle<span class="token operator">=</span><span class="token string">"dropdown"</span> href<span class="token operator">=</span><span class="token string">"javascript:void(0)"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> rel<span class="token operator">=</span><span class="token string">"noopener"</span><span class="token operator">></span>                         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item2<span class="token punctuation">.</span>icon <span class="token operator">%</span><span class="token punctuation">}</span>                             <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa {{item2.icon}}"</span> style<span class="token operator">=</span><span class="token string">"width: 18px; text-align: center;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>                         <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>                         <span class="token punctuation">{</span><span class="token punctuation">{</span>_<span class="token punctuation">(</span>item2<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-chevron-right"</span> style<span class="token operator">=</span><span class="token string">"margin-left:10px"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>b<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>                         <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dropdown-menu"</span> style<span class="token operator">=</span><span class="token string">"left: 100%;top: -3px;"</span><span class="token operator">></span>                             <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item3 <span class="token keyword">in</span> item2<span class="token punctuation">.</span>childs <span class="token operator">%</span><span class="token punctuation">}</span>                                 <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item3 <span class="token operator">%</span><span class="token punctuation">}</span>                                     <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item3<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">%</span><span class="token punctuation">}</span>                                         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token operator">not</span> loop<span class="token punctuation">.</span>last <span class="token operator">%</span><span class="token punctuation">}</span>                                             <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                         <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>                                         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">elif</span> item3 <span class="token operator">%</span><span class="token punctuation">}</span>                                             <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> menu_item<span class="token punctuation">(</span>item3<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                                     <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>                                 <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>                             <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>                  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> item2<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">%</span><span class="token punctuation">}</span>                         <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token operator">not</span> loop<span class="token punctuation">.</span>last <span class="token operator">%</span><span class="token punctuation">}</span>                         <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"divider"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                         <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>                  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">elif</span> item2 <span class="token operator">|</span> is_menu_visible <span class="token operator">%</span><span class="token punctuation">}</span>                      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> menu_item<span class="token punctuation">(</span>item2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>              <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>          <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>li<span class="token operator">></span>          <span class="token punctuation">{</span><span class="token punctuation">{</span> menu_item<span class="token punctuation">(</span>item1<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></code></pre></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>NavDropdownid<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`menu-dropdown-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>eventKey<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>title<span class="token operator">=</span><span class="token punctuation">{</span>navTitle<span class="token punctuation">}</span>className<span class="token operator">=</span><span class="token punctuation">{</span>className<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>childs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> index1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//新添加，递归多级菜单</span> child<span class="token punctuation">.</span>childs <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>childs<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span>   <span class="token operator">&lt;</span>MenuObject <span class="token punctuation">{</span><span class="token operator">...</span>child<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"right_menu_wrap"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> child <span class="token operator">===</span> <span class="token string">'-'</span> <span class="token operator">?</span> <span class="token punctuation">(</span>   <span class="token operator">&lt;</span>MenuItem key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span> divider <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>   <span class="token operator">&lt;</span>MenuItem     key<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>label<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>     href<span class="token operator">=</span><span class="token punctuation">{</span>child<span class="token punctuation">.</span>url<span class="token punctuation">}</span>     eventKey<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span>   <span class="token operator">></span>     <span class="token operator">&lt;</span>i className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`fa </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>child<span class="token punctuation">.</span>icon<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>     <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token punctuation">{</span>child<span class="token punctuation">.</span>label<span class="token punctuation">}</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>MenuItem<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>NavDropdown<span class="token operator">></span></code></pre>添加js和css<br>修改文件<code>superset/templates/appbuilder/baselayout.html</code><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.dropdown-submenu'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>修改文件<code>superset/templates/superset/basic.html</code><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style><span class="token class">.dropdown-submenu</span> </span><span class="token punctuation">{</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dropdown-submenu</span><span class="token pseudo-class">:hover</span>><span class="token class">.dropdown-menu</span> </span><span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.fa</span> </span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">18</span>px<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span>&lt;/style></code></pre><h4 id="8-修改看板tab的选项卡最大数量"><a href="#8-修改看板tab的选项卡最大数量" class="headerlink" title="8. 修改看板tab的选项卡最大数量"></a>8. 修改看板tab的选项卡最大数量</h4>目录：<code>superset-frontend/src/dashboard/components/gridComponents/Tabs.jsx</code>，修改<code>MAX_TAB_COUNT</code></li></ol><h4 id="9-扩展看板能保存的最长字符"><a href="#9-扩展看板能保存的最长字符" class="headerlink" title="9. 扩展看板能保存的最长字符"></a>9. 扩展看板能保存的最长字符</h4><p>修改<code>superset/config.py</code>下的<code>SUPERSET_DASHBOARD_POSITION_DATA_LIMIT</code>字段</p><h4 id="9-解决在看板中快速切换筛选条件导致的数据错乱（自定义图例）"><a href="#9-解决在看板中快速切换筛选条件导致的数据错乱（自定义图例）" class="headerlink" title="9. 解决在看板中快速切换筛选条件导致的数据错乱（自定义图例）"></a>9. 解决在看板中快速切换筛选条件导致的数据错乱（自定义图例）</h4><p>解决方法：</p><ol><li>中断请求</li><li>记录上一次请求的时间，并将时间作为参数传到后台，请求成功后，后台返回的数据中返回请求时传入的时间，对比两次时间，如果不一致，丢弃请求结果</li></ol><h4 id="10-修改翻译文件后更新看不到效果"><a href="#10-修改翻译文件后更新看不到效果" class="headerlink" title="10. 修改翻译文件后更新看不到效果"></a>10. 修改翻译文件后更新看不到效果</h4><p>翻译文件修改后需要编译，将.po文件编译为.mo文件才会生效</p><pre class=" language-python"><code class="language-python">cd <span class="token operator">~</span><span class="token operator">/</span>superset<span class="token operator">/</span>superset<span class="token operator">/</span>translations<span class="token operator">/</span>zh<span class="token operator">/</span>LC_MESSAGESmsgfmt <span class="token punctuation">.</span><span class="token operator">/</span>messages<span class="token punctuation">.</span>po <span class="token operator">-</span>o <span class="token punctuation">.</span><span class="token operator">/</span>messages<span class="token punctuation">.</span>mo</code></pre><h4 id="11-修改页面默认筛选条件"><a href="#11-修改页面默认筛选条件" class="headerlink" title="11. 修改页面默认筛选条件"></a>11. 修改页面默认筛选条件</h4><p>举个例子，比如数据表页面，默认的显示的筛选条件是<code>表名/以开始</code>，但最常用的是<code>表名/包含</code>，想让页面默认筛选条件显示<code>表名/包含</code>，只用修改配置文件中链接地址，在<code>superset/app.py</code>文件下找到指定页面的菜单修改：</p><pre class=" language-javascript"><code class="language-javascript">appbuilder<span class="token punctuation">.</span><span class="token function">add_link</span><span class="token punctuation">(</span>    <span class="token string">"Tables"</span><span class="token punctuation">,</span>    label<span class="token operator">=</span><span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"Tables"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    href<span class="token operator">=</span><span class="token string">"/tablemodelview/list/?_flt_2_table_name"</span><span class="token punctuation">,</span>    icon<span class="token operator">=</span><span class="token string">"fa-table"</span><span class="token punctuation">,</span>    category<span class="token operator">=</span><span class="token string">"Sources"</span><span class="token punctuation">,</span>    category_label<span class="token operator">=</span><span class="token function">__</span><span class="token punctuation">(</span><span class="token string">"Sources"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    category_icon<span class="token operator">=</span><span class="token string">"fa-table"</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><p>这里主要修改<code>_flt_2_table_name</code>，其中的数字表示的是筛选条件下拉列表中选项的下标，其中<code>包含</code>的下标是2，所以改为<code>_flt_2_table_name</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> superset </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Echarts配置项</title>
      <link href="/2020/07/01/%E5%AD%A6%E4%B9%A0Echarts%E9%85%8D%E7%BD%AE%E9%A1%B9/"/>
      <url>/2020/07/01/%E5%AD%A6%E4%B9%A0Echarts%E9%85%8D%E7%BD%AE%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><p>color是一个常用的属性，在很多配置项里用来设置填充颜色，color的值有rgb，rgba，16进制的颜色值，还支持渐变和纹理.</p><h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><p>纯色很好理解，这里主要说一下渐变，以线性渐变为例<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//线性渐变的color配置</span>color<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'linear'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// x,y 线的起点</span>    x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// x2,y2 线的终点</span>    x2<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    y2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    colorStops<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token comment" spellcheck="true">// 0%(线的起点) 处的颜色</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'blue'</span> <span class="token comment" spellcheck="true">// 100%(线的终点) 处的颜色</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    global<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 缺省为 false</span><span class="token punctuation">}</span></code></pre><p>那最大的问题就是绘制图形时的坐标了，很容易被误导的点在于绘制出来的坐标系跟绘制图形时的坐标系不是一个东西，看下图，绘制好的图形原点(0,0)位于左下角</p><div id="echarts9582" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts9582'));        // 指定图表的配置项和数据        var option = {    xAxis: {        type: 'category',        boundaryGap: false,        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [820, 932, 901, 934, 1290, 1330, 1320],        type: 'line',        areaStyle: {}    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><p>但绘制图形时，原点是在左上角的</p><pre class=" language-javascript"><code class="language-javascript">options <span class="token operator">=</span> <span class="token punctuation">{</span>    xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        boundaryGap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mon'</span><span class="token punctuation">,</span> <span class="token string">'Tue'</span><span class="token punctuation">,</span> <span class="token string">'Wed'</span><span class="token punctuation">,</span> <span class="token string">'Thu'</span><span class="token punctuation">,</span> <span class="token string">'Fri'</span><span class="token punctuation">,</span> <span class="token string">'Sat'</span><span class="token punctuation">,</span> <span class="token string">'Sun'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'value'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>        areaStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">'linear'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// x,y 线的起点在左上角</span>                x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// x2,y2 线的终点在左下角</span>                x2<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                y2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                colorStops<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token comment" spellcheck="true">// 0%(线的起点) 处的颜色</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'blue'</span> <span class="token comment" spellcheck="true">// 100%(线的终点) 处的颜色</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                global<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 缺省为 false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面的代码，用过ps的人可以想象从左上角到左下角拉渐变线，拉出来就是从红到蓝的垂直渐变了</p><div id="echarts5926" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts5926'));        // 指定图表的配置项和数据        var option = {    xAxis: {        type: 'category',        boundaryGap: false,        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [1320, 1320, 1320, 1320, 1320, 1320, 1320],        type: 'line',        areaStyle: {            color: {                type: 'linear',                // x,y 线的起点                x: 0,                y: 0,                // x2,y2 线的终点                x2: 0,                y2: 1,                colorStops: [{                    offset: 0, color: 'red' // 0%(线的起点) 处的颜色                }, {                    offset: 1, color: 'blue' // 100%(线的终点) 处的颜色                }],                global: false // 缺省为 false            }        }    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><p>水平的线性渐变就是从(0,0) -&gt; (1,0)</p><pre class=" language-javascript"><code class="language-javascript">options <span class="token operator">=</span> <span class="token punctuation">{</span>    xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'category'</span><span class="token punctuation">,</span>        boundaryGap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'Mon'</span><span class="token punctuation">,</span> <span class="token string">'Tue'</span><span class="token punctuation">,</span> <span class="token string">'Wed'</span><span class="token punctuation">,</span> <span class="token string">'Thu'</span><span class="token punctuation">,</span> <span class="token string">'Fri'</span><span class="token punctuation">,</span> <span class="token string">'Sat'</span><span class="token punctuation">,</span> <span class="token string">'Sun'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">'value'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">,</span> <span class="token number">1320</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>        areaStyle<span class="token punctuation">:</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span> <span class="token punctuation">{</span>                type<span class="token punctuation">:</span> <span class="token string">'linear'</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// x,y 线的起点在左上角</span>                x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment" spellcheck="true">// x2,y2 线的终点在左下角</span>                x2<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                y2<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                colorStops<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span> <span class="token comment" spellcheck="true">// 0%(线的起点) 处的颜色</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                    offset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token string">'blue'</span> <span class="token comment" spellcheck="true">// 100%(线的终点) 处的颜色</span>                <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                global<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 缺省为 false</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><div id="echarts1334" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts1334'));        // 指定图表的配置项和数据        var option = {    xAxis: {        type: 'category',        boundaryGap: false,        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [1320, 1320, 1320, 1320, 1320, 1320, 1320],        type: 'line',        areaStyle: {            color: {                type: 'linear',                // x,y 线的起点                x: 0,                y: 0,                // x2,y2 线的终点                x2: 1,                y2: 0,                colorStops: [{                    offset: 0, color: 'red' // 0%(线的起点) 处的颜色                }, {                    offset: 1, color: 'blue' // 100%(线的终点) 处的颜色                }],                global: false // 缺省为 false            }        }    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><p>依次类推，从左上角到右下角的，(0,0) -&gt; (1,1)</p><div id="echarts2112" style="width: 85%;height: 400px;margin: 0 auto"></div><script src="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js"></script><script type="text/javascript">        // 基于准备好的dom，初始化echarts实例        var myChart = echarts.init(document.getElementById('echarts2112'));        // 指定图表的配置项和数据        var option = {    xAxis: {        type: 'category',        boundaryGap: false,        data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']    },    yAxis: {        type: 'value'    },    series: [{        data: [1320, 1320, 1320, 1320, 1320, 1320, 1320],        type: 'line',        areaStyle: {            color: {                type: 'linear',                // x,y 线的起点                x: 0,                y: 0,                // x2,y2 线的终点                x2: 1,                y2: 1,                colorStops: [{                    offset: 0, color: 'red' // 0%(线的起点) 处的颜色                }, {                    offset: 1, color: 'blue' // 100%(线的终点) 处的颜色                }],                global: false // 缺省为 false            }        }    }]};        // 使用刚指定的配置项和数据显示图表。        myChart.setOption(option);</script><h4 id="纹理"><a href="#纹理" class="headerlink" title="纹理"></a>纹理</h4><pre class=" language-javascript"><code class="language-javascript">color<span class="token punctuation">:</span> <span class="token punctuation">{</span>    image<span class="token punctuation">:</span> imageDom<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 支持为 HTMLImageElement, HTMLCanvasElement，不支持路径字符串</span>    repeat<span class="token punctuation">:</span> <span class="token string">'repeat'</span> <span class="token comment" spellcheck="true">// 是否平铺，可以是 'repeat-x', 'repeat-y', 'no-repeat'</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVG基础</title>
      <link href="/2020/06/20/SVG%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/06/20/SVG%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>SVG是可缩放矢量图形的缩写，它使用XML来定义图像，这篇文章记录我学习SVG的过程。<br><a id="more"></a></p><p>SVG和普通的HTML + CSS的绘图方式差别不大，只是刚好弥补了HTML元素在绘制矢量图方面的不足，但原理上都是相同的，</p><ol><li><p>SVG的命名空间</p></li><li><p>SVG的基本标签</p></li><li><p>SVG坐标系统</p></li><li><p>SVG绘制基本图形</p></li><li><p>SVG分组</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SVG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹性盒模型之flex属性</title>
      <link href="/2019/11/27/%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B9%8Bflex%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/11/27/%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B9%8Bflex%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>flex属性用来设置弹性盒子项的拉伸，收缩和自身主大小，flex的属性值有多种形式，可以为一个值，两个值，或三个值<br><a id="more"></a></p><p>一个值</p><blockquote><p>initial | auto | none | flex-grow | flex-basis</p></blockquote><p>两个值</p><blockquote><p>flex-grow | (flex-shrink | flex-basis)</p></blockquote><p>三个值</p><blockquote><p>flex-grow flex-shrink flex-basis</p></blockquote><p>其中，flex为单数值，initial，auto，none时其实是特定三个值的简写</p><blockquote><p>flex:1 -&gt; flex: 1 1 0;</p></blockquote><blockquote><p>flex:initial -&gt; flex:0 1 auto</p></blockquote><blockquote><p>flex:auto -&gt; flex: 1 1 auto</p></blockquote><blockquote><p>flex:none -&gt; flex: 0 0 auto</p></blockquote><p>flex-grow属性值是数值，默认值0，它定义弹性盒子项如何拉伸,当弹性项的flex-basis值相加小于盒子宽度时，弹性项的拉伸生效<br>单个弹性项宽度的计算方式为：</p><blockquote><p>该项basis值 + 该项grow值 * ((总宽度 - basis值总和) / 可拉伸项数量)</p></blockquote><p>flex-shrink属性值是数值，默认值1，它定义弹性盒子项如何收缩，当弹性项的flex-basis值相加大于盒子宽度时，弹性项的收缩生效，<br>单个弹性项宽度的计算方式为：</p><blockquote><p>flex-basis值 - (basis总和 - 总宽度) <em> 该项basis值 / (第一项shrink值 </em> 第一项宽度 + 第二项shrink值 * 第二项宽度….第n项..)</p></blockquote><p>flex-basis属性值是一个带宽度单位的数值或是auto,content,initial，默认值auto</p><ul><li>auto: 表示元素的basis值是自身的width值，在元素的宽度计算中，当弹性盒子有空间拉伸并且flex-grow不等0时，元素宽度等于自身width值加上拉伸值</li><li>initial: 元素的basis值是自身的width值，在元素的宽度计算中，元素的宽度保持自身width值，并且flex-grow不算入计算内，也就是说，当flex-basis为initial时，flex-grow不管等于几都可以直接看成0</li><li>content：不知道是测试的浏览器不支持还是怎样，在整个测试过程中congtent的表现跟initial的表现一致</li></ul><p>下面有几个例子，这些例子公用下面这一段html和css代码</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid green<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第一个例子，当4个div的flex设置为下面四个值时，计算各自的宽度</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#content</span> <span class="token class">.box1</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box2</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span> initial<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box3</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">80</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box4</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先看所有元素flex-basis的和是否超出盒子的总宽度200px</p><p>auto和initial就是元素的width,也就是30px,所以</p><p>flex-basis的和 = 30px + 30px + 80px + 40px = 180px, 180 &lt; 200可拉伸，不收缩</p><blockquote><p>flex-grow的和 = 2，因为box2的flex-basis值为initial,所以就把它的flex-grow算成是0</p></blockquote><p>box1的宽度 = 30 + 1 * ((200 - 180) / 2) = 40</p><p>box2的宽度 = 30</p><p>box3的宽度 = 80 + 1 * ((200 - 180) / 2) = 90</p><p>box3的宽度 = 40</p><p>第二个例子，计算各自的宽度<br>100 </p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#content</span> <span class="token class">.box1</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box2</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span> initial<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box3</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> <span class="token class">.box4</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先看所有元素flex-basis的和是否超出盒子的总宽度200px</p><p>auto和initial就是元素的width,也就是30px,所以</p><p>flex-basis的和 = 30px + 30px + 120px + 120px = 300px, 300 &gt; 200不可拉伸，会收缩,</p><blockquote><p>flex-shrink省略时取默认值1，超出的宽度值为100</p></blockquote><p>box1的宽度 = 30 - 100 <em> 30 / (1 </em> 30 + 1 <em> 30 + 0 </em> 120 + 1 * 120) = 13.33</p><p>box2的宽度 = 同上 = 13.33</p><p>box3的宽度 = 不收缩 = 120</p><p>box3的宽度 = 120 - 100 <em> 120 / (1 </em> 30 + 1 <em> 30 + 0 </em> 120 + 1 * 120) = 53.33</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为了弄明白Promise的运行顺序，手写一个Promise</title>
      <link href="/2019/10/20/%E4%B8%BA%E4%BA%86%E5%BC%84%E6%98%8E%E7%99%BDPromise%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/"/>
      <url>/2019/10/20/%E4%B8%BA%E4%BA%86%E5%BC%84%E6%98%8E%E7%99%BDPromise%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/</url>
      
        <content type="html"><![CDATA[<p>最开始我没想去写Promise, 都是因为一道面试题，我开始怀疑自己对Promise有什么误解，或是根本不了解，这还是自己工作中用的挺多的一个东西，感到很惭愧，于是就想去认真了解一下，这道面试题放在下面：<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1 resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'----'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2 resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise3 resolved"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise4 resolved"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise5 resolved"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><details><br><summary>运行结果</summary><br><pre><br>promise1 resolved<br>promise2 resolved<br>promise3 resolved<br>promise4 resolved<br>—- 2<br>promise5 resolved<br></pre><br></details><details><br><summary>在最开始，我认为的运行结果</summary><br><pre><br>promise1 resolved<br>promise2 resolved<br>—- 2<br>promise3 resolved<br>promise4 resolved<br>promise5 resolved<br></pre><br></details><p>也就是说，当时我认为return Promise.resolve(2)这句是直接替换掉了包裹它的then返回的promise，连上了后面的then，事实显然不是这样, 在网上看了很多解析，最后还是不是很理解，我就决定自己按照promiseA+规范一个promise来看看到底是怎样的，虽然实现之后发现这跟promiseA+规范没有什么关系。。。</p><ol><li>Promise应该接受一个函数，这个函数是立即执行的</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>一个Promise的当前状态必须为以下三种状态中的一种：等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。promise当前状态为Pending时可以改变为Fulfilled或Rejected,当前状态为Fulfilled或Rejected时不能改变状态</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认是pending</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"fulfilled"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"rejected"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//发生异常后立刻更改Promsie状态为rejected</span>        <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>一个Promise必须提供一个then方法以访问其当前值、终值和据因</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//规范：then方法接受两个参数promise.then(onFulfilled, onRejected)</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//规范：如果 onFulfilled 不是函数，其必须被忽略，如果 onRejected 不是函数，其必须被忽略</span>    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">?</span> onFulfilled <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span>    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//规范：then 方法必须返回一个 promise 对象</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>onFulfilled和onRejected的特性</li></ol><p>规范上说onFulfilled在 promise 执行结束后必须被调用，第一个参数为 promise 的终值， onRejected在promise 被拒绝执行后必须调用，第一个参数为 promise 的据因，在promies执行结束前都不能调用，且只能调用一次，promise的resolve或reject被调用是表示promise执行结束了，所以这里要用到观察者模式, 每个promise对象作为主体，在promise.then负责注册事件回调，当promise的状态发生改变时，调用对应状态的回调事件列表。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">MyPromise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认是pending</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//新增</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilleds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//完成态的回调事件列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejecteds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//拒绝态的回调事件列表</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"fulfilled"</span>            <span class="token comment" spellcheck="true">//规范：当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fn <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilleds<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reject <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason            <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"rejected"</span>            <span class="token comment" spellcheck="true">//当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fn <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onRejecteds<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//发生异常后立刻更改Promsie状态为rejected</span>        <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>MyPromise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//规范：如果 onFulfilled 不是函数，其必须被忽略，如果 onRejected 不是函数，其必须被忽略</span>    onFulfilled <span class="token operator">=</span> <span class="token keyword">typeof</span> onFulfilled <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">?</span> onFulfilled <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x    <span class="token punctuation">}</span>    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">?</span> onRejected <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> e    <span class="token punctuation">}</span>    <span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在promies执行结束前不能调用，当status为pending代表promise还没有执行完,将回调加入对应状态的回调列表</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            self<span class="token punctuation">.</span>onFulfilleds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//规范：onFulfilled 和 onRejected 只有在执行环境堆栈仅包含平台代码时才可被调用 </span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// PromiseResolve(promise, x) //promise的解决过程</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>onRejecteds<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//规范：onFulfilled 和 onRejected 只有在执行环境堆栈仅包含平台代码时才可被调用，所以将回调函数加入事件循环队列 </span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">// PromiseResolve(promise, x)</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"fulfilled"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//status为fulfilled代表promise已经执行完，直接将回调函数加入事件循环队列</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// PromiseResolve(promise, x)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//status为rejected代表promise已经执行完(被拒绝)，直接将回调函数加入事件循环队列</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// PromiseResolve(promise, x)</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>Promise解决过程：<a href="promise2, x">[Resolve]</a></li></ol><p>在上面的代码中我们在执行了onFulfilled回调后直接决议了then返回的promise对象，但规范中还做了其他处理，当得到回调函数的返回值后，还经历了一个Promise的解决过程，我们来实现以下这个解决过程PromiseResolve</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// resolve(x)</span><span class="token comment" spellcheck="true">//这里不会直接决议，还有一个解决过程，我们叫他PromiseResolve(promise,x),这里的参数promise指的是then中new出来的那个promise</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PromiseResolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//x为promise，对象或者函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> isCall <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标记resolvePromise或rejectPromise是否被调用</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果 then 是函数，将 x 作为函数的作用域 this 调用之。传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>                    isCall <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token comment" spellcheck="true">//如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span>                    <span class="token function">PromiseResolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>                    isCall <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token comment" spellcheck="true">//如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span>                    promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果 then 不是函数，以 x 为参数执行 promise</span>                promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// then 方法抛出了异常 e,如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>            isCall <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">//取x.then抛出异常或者then方法抛出异常以 e 为据因拒绝 promise</span>            promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果 x 不为对象或者函数，以 x 为参数执行 promise</span>        promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>按照以上代码，运行结果为</p><pre class=" language-javascript"><code class="language-javascript">promise1 resolvedpromise2 resolvedpromise3 resolved<span class="token operator">--</span> <span class="token operator">--</span><span class="token number">2</span>promise4 resolvedpromise5 resolved</code></pre><p>这个结果与浏览器中的结果仍然不同，似乎是少了一轮，也就是在PromiseResolve解决过程中，x.then函数不是直接执行了，而是被加入了事件队列</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">PromiseResolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//x为promise，对象或者函数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> isCall <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标记resolvePromise或rejectPromise是否被调用</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果 then 是函数，将 x 作为函数的作用域 this 调用之。传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//++</span>                    then<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>                        isCall <span class="token operator">=</span> <span class="token boolean">true</span>                        <span class="token comment" spellcheck="true">//如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span>                        <span class="token function">PromiseResolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> y<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>                        isCall <span class="token operator">=</span> <span class="token boolean">true</span>                        <span class="token comment" spellcheck="true">//如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span>                        promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//++</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果 then 不是函数，以 x 为参数执行 promise</span>                promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// then 方法抛出了异常 e,如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCall<span class="token punctuation">)</span> <span class="token keyword">return</span>            isCall <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token comment" spellcheck="true">//取x.then抛出异常或者then方法抛出异常以 e 为据因拒绝 promise</span>            promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果 x 不为对象或者函数，以 x 为参数执行 promise</span>        promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样运行结果就跟浏览器一致了,但关于最后这点纯属个人看法，反正这一顿操作下来，对promise的理解加深了不少，具体浏览器或node如何实现的欢迎指教~</p><p><a href="../code/MyPromise.js">这里是完整代码</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTMLCollection和NodeList</title>
      <link href="/2018/05/08/HTMLCollection%E5%92%8CNodeList/"/>
      <url>/2018/05/08/HTMLCollection%E5%92%8CNodeList/</url>
      
        <content type="html"><![CDATA[<h4 id="问题和解决过程"><a href="#问题和解决过程" class="headerlink" title="问题和解决过程"></a>问题和解决过程</h4><p>对这两个概念有疑惑的起因是我想在阿里图标库批量下载当前页面上的图标，但在页面上没找到如何批量加入购物车的功能，在查看了dom结构后我在控制台写了几句代码希望能批量选择这一页的图标，代码如下：<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"icon-cover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但结果是选中不了，检查了dom结构感觉自己并没有写错，无奈之下只能试试看能不能选中一个：</p><pre class=" language-javascript"><code class="language-javascript">elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这句代码执行后，选中了页面上的第一个图标（），奇怪的是拿elements[1]再去执行选中的话选中的第一个图标被删除了？？？我打印了elements元素之后，发现它比之前多出了一个元素</p><p>之前:<br><img src="http://oj056g1gy.bkt.clouddn.com/%E5%8A%A0%E5%85%A5%E8%B4%AD%E7%89%A9%E8%BD%A6%E4%B9%8B%E5%89%8D.png" alt><br>之后<br><img src="http://oj056g1gy.bkt.clouddn.com/%E9%80%89%E4%B8%AD%E4%B9%8B%E5%90%8E.png" alt></p><p>多出来的这个span的className也是”icon-cover”，但它的click事件是”remove(xxxx)”，也就是删除添加在购物车的图标，这个元素右侧滑块中，点击购物车可以看到这个span元素，鼠标移上去是一个删除的图标<br><img src="http://oj056g1gy.bkt.clouddn.com/delete.png" alt><br>总结一下发生了什么，也就是在我选择一个图标加入购物车后，页面的dom结构发生了改变，并且这个改变也影响了改变前我们选中的元素集合，elements。<br>因为getElementsByClassName得到的是一个HTMLCollection集合，我去MDN看了HTMLCollection，找到了这句话</p><blockquote><p>HTML DOM 中的 HTMLCollection 是即时更新的（live）；当其所包含的文档结构发生改变时，它会自动更新。</p></blockquote><p>这是我以前没有注意过的，赶紧记在我的小本本上= =</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>事情到现在我又回去看了dom结构，发现我去取document.getElementsByClassName(“icon-cover”)就是多次一举，我完全可以用<br>document.getElementsByClassName(“icon-gouwuche1”)直接取到这个添加到购物车的span，</p><p><img src="http://oj056g1gy.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20180508142320.png" alt></p><p>控制台上代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> spans <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">"icon-gouwuche1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>  <span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    spans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就解决了，成功选到了这125个图标，最开始的问题解决了我又开始想，可以取到及时更新的dom集合，但如果只想取到不更新的怎么办呢,我印象中记得querySelectorAll取到的好像是静态的集合，所以尝试了querySelectorAll方法，先用querySelectorAll选中页面中的div赋值给divs变量，再把div删除几个输出divs发现divs没有任何变化，咦，querySelectorAll不是及时更新的，那么下面这种实现也可以了：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"icon-cover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>顺便发现了一点不同，querySelectorAll取到的是NodeList集合，去MDN看NodeList的API，有这么一句</p><blockquote><p>document.querySelectorAll 返回一个静态的 NodeList, 也就意味着随后对文档对象模型的任何改动都不会影响集合的内容。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>问题结束了，我不禁产生了疑问，HTMLCollection和NodeList有什么不同，找到一篇不错的<a href="https://segmentfault.com/a/1190000006782004" target="_blank" rel="noopener">文章</a>，我做一下总结，方便日后复习：</p><p>HTMLCollection和NodeList相同点：</p><ol><li>都有length属性，所以都是类数组对象</li><li>都可以直接用[index]取值，或者.item(index)取值</li></ol><p>HTMLCollection和NodeList不同点：</p><ol><li>来源不同<br>HTMLCollection由getElementById,getElementsByClassName等方法返回<br>NodeList由childNodes属性，querySelectorAll方法返回</li><li>包含节点的类型不同<br>HTMLCollection只包含html元素节点<br>NodeList包含元素节点和其他节点，如文本节点，注释节点等</li><li>实时和有时实时<br>HTMLCollection集合都是动态的，实时更新<br>NodeList由childNodes属性返回时是动态的，querySelectorAll方法返回的是静态的html元素集合，即本质上是一个静态的HTMLCollection集合对象</li><li>HTMLCollection还有一个nameItem()方法，可以返回集合中name属性和id属性值的元素</li></ol><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>出发点很简单但扯出了一堆东西耽误了一点时间，自己对于js基础还是掌握的不好，非常惭愧，继续学习吧，生命不息折腾不止。</p><blockquote><p>参考：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noopener">MDN-NodeList</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection" target="_blank" rel="noopener">MDN-HTMLCollection</a><br><a href="https://segmentfault.com/a/1190000006782004" target="_blank" rel="noopener">HTMLCollection与NodeList</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>孜孜不倦,必能求索;风尘仆仆,终有归途.</title>
      <link href="/2017/12/30/%E5%AD%9C%E5%AD%9C%E4%B8%8D%E5%80%A6%E5%BF%85%E8%83%BD%E6%B1%82%E7%B4%A2%E9%A3%8E%E5%B0%98%E4%BB%86%E4%BB%86%E7%BB%88%E6%9C%89%E5%BD%92%E9%80%94/"/>
      <url>/2017/12/30/%E5%AD%9C%E5%AD%9C%E4%B8%8D%E5%80%A6%E5%BF%85%E8%83%BD%E6%B1%82%E7%B4%A2%E9%A3%8E%E5%B0%98%E4%BB%86%E4%BB%86%E7%BB%88%E6%9C%89%E5%BD%92%E9%80%94/</url>
      
        <content type="html"><![CDATA[<h4 id="1-关于题目"><a href="#1-关于题目" class="headerlink" title="1.关于题目"></a>1.关于题目</h4><p>题目是2017年一直激励我的一句话，第一次看到是在一个技术博客的签名里，内心因为某个问题无法解决而焦躁的心也安定下来，文字真的是奇妙的东西，它安慰人于无形，如果一直在思考，一直在往前走，那么总能到达一个地方吧，哪怕那个地方没有你想象中那么的好。<br><a id="more"></a></p><h4 id="2-关于毕业"><a href="#2-关于毕业" class="headerlink" title="2.关于毕业"></a>2.关于毕业</h4><p>今年其实发生了很多事情，以前想起来觉得特别困难的事就在今年发生，并且都过来了。只觉得时光匆匆，我还来不及仔细的回想，这一年就到头了。<br>年初我在北京实习，元旦假期的时候窝在群租房的床铺上搭了这个博客，然后打下了一篇总结2016年的文章发在这里，那篇文章里充满对未来的迷茫和不确定，但又有憧憬，虽然做着机械的实习工作，但回到出租屋里打开电脑学习的时候是最安心的，我是在那一段时间真的体会到学习能够让人快乐，因为学习了就有希望。在四月初我下定决心辞掉工作回到学校，那时候离毕业答辩还有一个半月的时间，我是第一批回到宿舍的，除了我之外寝室长比我早了一天，八个人的宿舍只到了两个人显得很冷清，给北方的四月也添了一点凉意。大四在学校的人很少，大家都在外忙着自己的事，毕业设计被排到微不足道的地位，报着大不了买一个的想法很少有人自己动手去做，但我想做，最后一次了，扔了上学时糊弄的那一套，就算给自己的大学时代一个交代吧。我用这样的想法激励自己，开始每天泡图书馆的生活，忙碌也充实，看着学弟学妹们散漫的样子，为他们感到惋惜，但处在那个时段的人永远不知道自己挥霍的是什么，别人点不醒，只能在经历过后才会有体会。<br>五月初完成了毕业设计和论文，期间室友也陆陆续续的回到学校，宿舍渐渐热闹起来，早上起床可以看到对面的床铺上躺着熟悉的面孔，中午大家互相带饭，晚上熄灯后可以看到每个床铺上手机屏幕亮起的光，睡觉前互相聊上几句无关痛痒的话，平凡普通的宿舍生活，一如这四年来每一个大家一起在学校里度过的日日夜夜，可是这样的日子不多了，等待答辩的日子有些煎熬，毕业未知，工作未知，前途未知，可是我还是留恋那一段时间，过去了我就再也不是一个学生了。<br>毕业那天其实挺平淡的，没有那些青春片里讲述的那么轰轰烈烈和充满仪式感吧，就是同级的几个班一起吃了饭，很多男生喝醉了，但是女生大都清醒，平静的回到宿舍平静的睡觉，之后有工作的匆忙的赶去工作，没有工作的又开始投入找工作的战役中，当宿舍里能卖的东西都被处理掉，四年里用过的教材也被几毛钱一斤卖掉后，我们真的要毕业了。<br>今年冬至那天，班长在群里发消息，毕业后的第一个冬至，大家记得吃饺子，看到的这条消息的时候我正在公司忙碌，眼眶却瞬间有些湿，在学校时，每年冬至班长都会组织包饺子，今年没有了，突然觉得时光真是太快了，已经半年过去了。<br><img src="http://oj056g1gy.bkt.clouddn.com/psb.jfif" alt="毕业照"></p><h4 id="2-关于第一份正式工作"><a href="#2-关于第一份正式工作" class="headerlink" title="2.关于第一份正式工作"></a>2.关于第一份正式工作</h4><p>我找工作的一点儿经历之前写过一篇文章来记录，就不再过多去写了，总之毕业后机缘巧合就来到了现在的公司，工作上的事说太多不好，大概就是公司的主要业务不在技术这一块儿，所以工作也比较轻松，压力不大，但相对的也不太受重视，可能在技术上的成长也不快，总之在这份工作中我才真正开始迈进前端的门槛，知识多且杂，工作之余常常觉得迷茫，不知道怎么能更好的提升自己，买了很多书却没有耐心看下去，心里难免沮丧，觉得自己好像比年初时浮躁了很多，把学习抛到脑后了，可能是公司整体环境的原因吧，对自己的要求也不自觉的放松了，年底开始反省自己的状态才猛地惊觉，又重新拾起书来，每天下班要求自己静心看书，又重新体会到看书的好处，内心充实的结束这一天。</p><h4 id="3-好像烂尾了"><a href="#3-好像烂尾了" class="headerlink" title="3.好像烂尾了"></a>3.好像烂尾了</h4><p>2018年已经过去将近三个月了，这篇2017年的总结还没搞完，烂尾了….</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见面试题</title>
      <link href="/2017/11/07/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2017/11/07/%E5%89%8D%E7%AB%AF%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-数组扁平化"><a href="#1-数组扁平化" class="headerlink" title="1.数组扁平化"></a>1.数组扁平化</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种方法</span><span class="token keyword">function</span> <span class="token function">flattening</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">flattening</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种</span>array<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span></code></pre><a id="more"></a><h4 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="2.数组去重"></a>2.数组去重</h4><p>方法有很多，写几种</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种方法</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二种方法</span><span class="token keyword">let</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    tempArr<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>tempArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三种方法</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> index <span class="token operator">===</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>//第四种</p><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="3-细节"><a href="#3-细节" class="headerlink" title="3.细节"></a>3.细节</h4><h5 id="3-1-toFixed"><a href="#3-1-toFixed" class="headerlink" title="3.1 toFixed"></a>3.1 toFixed</h5><p>42.toFixed(3)    //SyntaxError  .运算符会被优先识别为数字常量的一部分，42. == 42.0<br>42..toFixed(3)   //正确<br>42 .toFixed(3)   //正确</p><h5 id="3-2-较小的数值"><a href="#3-2-较小的数值" class="headerlink" title="3.2 较小的数值"></a>3.2 较小的数值</h5><p>0.1+0.2 === 0.3  //false 0.1+0.2 = 0.300000000000000004</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//polyfill</span><span class="token keyword">function</span> <span class="token function">numbersCloseEnoughToEqual</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span>EPSILON<span class="token punctuation">)</span><span class="token punctuation">{</span>        Number<span class="token punctuation">.</span>EPSILON <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n1<span class="token operator">-</span>n2<span class="token punctuation">)</span><span class="token operator">&lt;</span>Number<span class="token punctuation">.</span>EPSILON<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="3-3-NaN"><a href="#3-3-NaN" class="headerlink" title="3.3 NaN"></a>3.3 NaN</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span>  <span class="token comment" spellcheck="true">//false</span></code></pre><h4 id="4-this、作用域、闭包、对象"><a href="#4-this、作用域、闭包、对象" class="headerlink" title="4.this、作用域、闭包、对象"></a>4.this、作用域、闭包、对象</h4><p>这两个题来自掘金，<a href="https://juejin.im/post/59aa71d56fb9a0248d24fae3" target="_blank" rel="noopener">原文链接</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Question 1 */</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'person1'</span><span class="token punctuation">,</span>  show1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  show2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>  show3<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  show4<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'person2'</span> <span class="token punctuation">}</span>person1<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span>show1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span>show2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>show3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person1<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span>person1<span class="token punctuation">.</span>show4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>问题1答案：</p><pre class=" language-javascript"><code class="language-javascript">person1<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person1</span>person1<span class="token punctuation">.</span>show1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person2</span>person1<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span>show2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person2</span>person1<span class="token punctuation">.</span>show3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>person1<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person1</span>person1<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person1</span>person1<span class="token punctuation">.</span>show4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// person2</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Question 2 */</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'window'</span><span class="token keyword">function</span> Person <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show1 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>show4 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> personA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'personA'</span><span class="token punctuation">)</span><span class="token keyword">var</span> personB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'personB'</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span>show1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span>show2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span>personA<span class="token punctuation">.</span>show3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>personA<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span>personA<span class="token punctuation">.</span>show4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>问题2答案：</p><pre class=" language-javascript"><code class="language-javascript">personA<span class="token punctuation">.</span><span class="token function">show1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personA</span>personA<span class="token punctuation">.</span>show1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personB</span>personA<span class="token punctuation">.</span><span class="token function">show2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personA</span>personA<span class="token punctuation">.</span>show2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personA</span>personA<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>personA<span class="token punctuation">.</span><span class="token function">show3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personB</span>personA<span class="token punctuation">.</span>show3<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// window</span>personA<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personA</span>personA<span class="token punctuation">.</span><span class="token function">show4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personA</span>personA<span class="token punctuation">.</span>show4<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>personB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// personB</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现鼠标向上滑动显示导航栏，向下滑动隐藏导航栏.md</title>
      <link href="/2017/11/07/js%E5%AE%9E%E7%8E%B0%E9%BC%A0%E6%A0%87%E5%90%91%E4%B8%8A%E6%BB%91%E5%8A%A8%E6%98%BE%E7%A4%BA%E5%AF%BC%E8%88%AA%E6%A0%8F%EF%BC%8C%E5%90%91%E4%B8%8B%E6%BB%91%E5%8A%A8%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2017/11/07/js%E5%AE%9E%E7%8E%B0%E9%BC%A0%E6%A0%87%E5%90%91%E4%B8%8A%E6%BB%91%E5%8A%A8%E6%98%BE%E7%A4%BA%E5%AF%BC%E8%88%AA%E6%A0%8F%EF%BC%8C%E5%90%91%E4%B8%8B%E6%BB%91%E5%8A%A8%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h4><p>这个效果是掘金的导航栏效果，在实现之前先来看一下实现后的样子，打开<a href="https://juejin.im/timeline" title="掘金" target="_blank" rel="noopener">掘金</a>后，上下滚动鼠标滚轮查看导航栏的表现。<br><a id="more"></a></p><h4 id="2-js滚轮事件"><a href="#2-js滚轮事件" class="headerlink" title="2.js滚轮事件"></a>2.js滚轮事件</h4><p>用js实现一个导航栏随着鼠标滚轮的滚动来显示和隐藏的效果，向上滚动时显示导航栏，向下滚动时隐藏导航栏。想实现这个效果首先要了解鼠标的滚轮事件，滚轮事件的在浏览器兼容方面分为火狐和其他，火狐支持DomMouseScroll，包括ie6在内的其他浏览器支持onmousewheel:</p><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"DOMMouseScroll"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//火狐</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//其他</span>    event <span class="token operator">=</span> event <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="3-判断滚动方向"><a href="#3-判断滚动方向" class="headerlink" title="3.判断滚动方向"></a>3.判断滚动方向</h4><p>在onmousewheel事件中，每次向上滚动event.wheelDelta的值是-120，向下滚动是120；<br>在DOMMouseScroll事件中，每次向上滚动event.detail的值是3，向下滚动是-3，这里要注意区分。<br>用一个例子来测试一下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scrollfn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'向上滚动：'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'向下滚动：'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'向下滚动'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'向上滚动'</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span><span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMMouseScroll'</span><span class="token punctuation">,</span>scrollfn<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> document<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> scrollfn<span class="token punctuation">;</span></code></pre><h4 id="4-实现掘金导航栏的效果"><a href="#4-实现掘金导航栏的效果" class="headerlink" title="4.实现掘金导航栏的效果"></a>4.实现掘金导航栏的效果</h4><p>现在实现起来就很简单了，在上文代码的基础上进行修改，检测到滚轮向下滚动时，隐藏导航栏，检测滚轮向上滚动时，就显示导航栏，为了表现出来的效果不那么生硬，再加入动画效果，下面放上部分代码<br><a href="https://github.com/ForeveHG/Js-Demo/blob/master/juejin-nav/index.html" target="_blank" rel="noopener">完整代码查看</a><br>[具体的效果查看]<br>(<a href="https://ForeveHG.github.io/Js-Demo/juejin-nav/index.html" target="_blank" rel="noopener">https://ForeveHG.github.io/Js-Demo/juejin-nav/index.html</a>)</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.nav</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">5</span>rem<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.2</span>s<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.slide_hide</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.2</span>s<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">100%</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content_nav</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">3</span>rem<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#eee</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">5</span>rem<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.2</span>s<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content_nav.top</span> </span><span class="token punctuation">{</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">.2</span>s<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, -<span class="token number">5</span>rem, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> showNav <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nav<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nav<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        contentNav<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'content_nav'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> hideNav <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nav<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> classVal <span class="token operator">=</span> navClassName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">' slide_hide'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> classContentNav <span class="token operator">=</span> contentNavClassName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">' top'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nav<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> classVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentNav<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> classContentNav<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> scrollFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e <span class="token operator">=</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//判断浏览器IE，谷歌滑轮事件               </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当滑轮向上滚动时</span>            <span class="token function">showNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log("滑轮向上滚动",e.wheelDelta);  </span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>wheelDelta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当滑轮向下滚动时 </span>            <span class="token function">hideNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log("滑轮向下滚动",e.wheelDelta);  </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//Firefox滑轮事件 在火狐中e.detail为负值时是向上滚动，正值是向下滚动 </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当滑轮向上滚动时  </span>            <span class="token function">showNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log("滑轮向上滚动",e.detail);</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>detail <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当滑轮向下滚动时  </span>            <span class="token function">hideNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// console.log("滑轮向下滚动",e.detail);  </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//给页面绑定滑轮滚动事件  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//firefox  </span>    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMMouseScroll'</span><span class="token punctuation">,</span> scrollFunc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//滚动滑轮触发scrollFunc方法  //ie 谷歌  </span>window<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> document<span class="token punctuation">.</span>onmousewheel <span class="token operator">=</span> scrollFunc<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析zepto.js源码</title>
      <link href="/2017/10/07/%E5%88%86%E6%9E%90zepto-js%E6%BA%90%E7%A0%81/"/>
      <url>/2017/10/07/%E5%88%86%E6%9E%90zepto-js%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h4 id="1-zepto整体结构"><a href="#1-zepto整体结构" class="headerlink" title="1.zepto整体结构"></a>1.zepto整体结构</h4><p>zepto的整体结构比较简单，就是将一个立即执行函数表达式赋值给Zepto变量，然后在全局暴露这个Zepto变量，如果$符号没有被占用，$符号也被赋值为Zepto变量，代码结构如下：<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Zepto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> $    $ <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> $<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span>Zepto <span class="token operator">=</span> Zeptowindow<span class="token punctuation">.</span>$ <span class="token operator">===</span> undefined <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> Zepto<span class="token punctuation">)</span></code></pre><h5 id="1-1-立即执行函数表达式-IIFE"><a href="#1-1-立即执行函数表达式-IIFE" class="headerlink" title="1.1 立即执行函数表达式(IIFE)"></a>1.1 立即执行函数表达式(IIFE)</h5><p>使用立即执行函数表达，可以避免全局作用域被污染，立即执行函数表达式相当于一个容器，容器内可以访问容器外的变量，但容器外不能访问容器内的变量，这样内外不会发生冲突，相当于建立了一个私有命名空间。</p><h4 id="2-Zepto集合对象"><a href="#2-Zepto集合对象" class="headerlink" title="2 Zepto集合对象"></a>2 Zepto集合对象</h4><p>在Zepto文档中，首先看到的就是几个核心方法,可以知道$()根据传入参数的不同分别进行了不同的处理，最后都是返回了一个zepto集合对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token punctuation">[</span>context<span class="token punctuation">]</span><span class="token punctuation">)</span>   ⇒ collection<span class="token function">$</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Zepto collection<span class="token operator">></span><span class="token punctuation">)</span>   ⇒ same collection<span class="token function">$</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>DOM nodes<span class="token operator">></span><span class="token punctuation">)</span>   ⇒ collection<span class="token function">$</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">)</span>   ⇒ collection<span class="token function">$</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span>   ⇒ collection v1<span class="token number">.0</span><span class="token operator">+</span><span class="token function">Zepto</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  </code></pre><p>源码中$符号被赋值了一个函数，执行$()就相当于在执行这个函数，看一下这个函数的源码：</p><pre class=" language-javascript"><code class="language-javascript">$ <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这个函数接收了两个参数，看意思是选择器符号和上下文，并返回了zepto.init函数的执行结果，在这里又出现了一个小写的zepto，那来找一下zepto是怎么定义的吧</p><pre class=" language-javascript"><code class="language-javascript">zepto <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>在代码大概30多行的地方找到了zepto的定义，它被定义为一个空对象，那么zepto.init是它的一个属性，属性值是一个function函数，再来看一下zepto.init主要干了什么吧</p><pre class=" language-javascript"><code class="language-javascript">zepto<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> dom    <span class="token comment" spellcheck="true">//一堆判断</span>    <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这个方法对传进来的选择器字符串参数进行一系列的判断，最后返回的都是zepto.Z(xxx)的结果，看一下zepto.Z和它用到的Z这个构造函数</p><pre class=" language-javascript"><code class="language-javascript">zepto<span class="token punctuation">.</span>Z <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span> selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i<span class="token punctuation">,</span> len <span class="token operator">=</span> dom <span class="token operator">?</span> dom<span class="token punctuation">.</span>length <span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dom<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> len    <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selector <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">}</span></code></pre><p>也就是说zepto.init最后返回的都是一个Z对象，代码到目前为止是在根据传入的参数包装dom节点，创建一个zepto集合对象，现在忽略复杂的判断，假设传入的参数都是一个css选择器，把代码简化成下面这样，引入到一个html文件中试一下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//简化的js文件</span><span class="token keyword">var</span> Zepto <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> $<span class="token punctuation">,</span>zepto<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>selector<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> i<span class="token punctuation">,</span>len <span class="token operator">=</span> dom <span class="token operator">?</span> dom<span class="token punctuation">.</span>length <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dom<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> len        <span class="token keyword">this</span><span class="token punctuation">.</span>selector <span class="token operator">=</span> selector <span class="token operator">||</span> <span class="token string">''</span>    <span class="token punctuation">}</span>    zepto<span class="token punctuation">.</span>Z <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>selector<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>selector<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    zepto<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>        <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">Z</span><span class="token punctuation">(</span>dom<span class="token punctuation">,</span>selector<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    $ <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> zepto<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>context<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> $<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>Zepto <span class="token operator">=</span> Zepto<span class="token punctuation">;</span>window<span class="token punctuation">.</span>$ <span class="token operator">===</span> undefined <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>$ <span class="token operator">=</span> Zepto<span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zepto.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>现在可以根据传入的css选择器选择页面上的dom元素并包装成Zepto集合对象了，但只这样接受css选择符不满足复杂的需求，所以，要对用户传入的参数进行分析，最后都要封装成Zepto对象</p><h5 id="分析selector"><a href="#分析selector" class="headerlink" title="分析selector"></a>分析selector</h5><p>用户传入的selector可能有下面几种情况：<br>1.空的，就是什么也没传进来<br>2.字符串<br>3.Dom元素<br>4.Zepto元素<br>5.其他</p><h4 id="2-zepto内部函数"><a href="#2-zepto内部函数" class="headerlink" title="2. zepto内部函数"></a>2. zepto内部函数</h4><h5 id="2-1-compact删除数组中的null和undefined值"><a href="#2-1-compact删除数组中的null和undefined值" class="headerlink" title="2.1 compact删除数组中的null和undefined值"></a>2.1 compact删除数组中的null和undefined值</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compact</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> filter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> item <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>这里用的是’!=’,undefined也会被隐式转换为null,所以可以删除掉null和undefined的值</p><h5 id="2-2-flatten数组扁平化"><a href="#2-2-flatten数组扁平化" class="headerlink" title="2.2 flatten数组扁平化"></a>2.2 flatten数组扁平化</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> array<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">:</span> array <span class="token punctuation">}</span></code></pre><p>array的第二个参数是一个数组，它会自动将数组转换为参数列表传递给方法，参考：<a href="巧用apply">http://www.cnblogs.com/KeenLeung/archive/2012/11/19/2778229.html</a>zepto中的flatten方法利用这一特性，将二维数组转化为一维数组</p><h4 id="2-3-uniq数组去重"><a href="#2-3-uniq数组去重" class="headerlink" title="2.3 uniq数组去重"></a>2.3 uniq数组去重</h4><pre class=" language-javascript"><code class="language-javascript"> uniq <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> filter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">==</span> idx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>indexOf函数得到的是元素在数组中第一次出现的位置索引值，如果当前的元素与元素第一次出现的位置不同，说明这个元素在数组中出现了多次，就将这个元素从数组中删除</p><h4 id="2-4-数据类型判断"><a href="#2-4-数据类型判断" class="headerlink" title="2.4 数据类型判断"></a>2.4 数据类型判断</h4>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> zepto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中给列表的每一项设置定时器(倒计时)</title>
      <link href="/2017/08/03/vue%E4%B8%AD%E7%BB%99%E5%88%97%E8%A1%A8%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%99%A8-%E5%80%92%E8%AE%A1%E6%97%B6/"/>
      <url>/2017/08/03/vue%E4%B8%AD%E7%BB%99%E5%88%97%E8%A1%A8%E7%9A%84%E6%AF%8F%E4%B8%80%E9%A1%B9%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%99%A8-%E5%80%92%E8%AE%A1%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>目前做的项目相当于一个接任务平台，对时效性要求较高，我刚好负责任务模块，最近基本都在跟任务列表打交道，有一个需求，需要对列表中的每一项任务进行倒计时，刚开始想到的就是为每个任务都添加一个定时器来控制它的时间，<br><a id="more"></a><br>但作完之后发现这简直是傻逼才会干的事儿，在一个页面上添加n个定时器，这么多定时器难以维护，而且这些定时器什么时候销毁也成了问题，况且这个项目中有任务列表的明显不止一页，每一页也不确定有多少数据，凡是跟任务挂钩的都需要定时器，如果按刚开始的思路来，后期我可能会疯掉，我不敢这么玩儿。。。于是开始想办法统一来管理定时器，我发现并不需要为每一项都添加定时器，我只需要在列表数据初始化的时候收集每一项的截止时间减去当前时间，得到每一项数据需要到倒计时的时间，把这些时间放在一个时间数组中，然后给这个页面添加一个定时器，每秒钟为这个时间数组中的每一个时间减一秒，这个时间数组在vue的data中返回，所以每次时间数组发生变化也会反映到页面上去，在跳转到其他页面的时候再销毁本页面的定时器，这是当前的一个思路，代码就不粘了，感觉思路最重要。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue使用时遇到的小问题及解决</title>
      <link href="/2017/07/20/vue%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/07/20/vue%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>现在已经是2018年的1月20号了，从2017年7月20号左右开始用vue做东西，差不多半年的时间做了两个项目，一个移动端，一个PC端，第一个项目真的是文档大概浏览一下就直接上手干了，刚开始感觉有点儿艰难，不过熟悉之后觉得vue的开发体验简直太棒了，<a id="more"></a>所以第二个项目也果断选择了vue开发，现在项目第一个阶段已经初步完成马上测试了，感觉选择vue真是太对了，虽然也遇到很多问题，但整体开发过程都很顺畅。从这篇文章也可以看出从最开始的小白一点儿点儿学习进步吧，这些问题在发生的时候都是真真实实的给我造成了一些问题，所以解决后选择记录下来，但现在回过头来看发现其实这些都是很小的一些问题，有粗心造成，有因为对vue-cli一知半解闹的笑话，有在提交代码时跟团队另一个前端代码冲突发生的一些小问题，有使用各种组件时遇见的坑，还有在业务场景中遇见的一些小需求的解决过程，半年里所有的这些都是自己去学习尝试去解决，公司里没有前端这方面的人可以带带我，所以也是自己在琢磨，希望新的一年不仅要知道如何使用vue，更要去学习vue的原理是什么，只要还在用vue，这篇文章就会一直更新下去，加油吧我自己。    —2018.1.20有感</p><p>最近的在使用vue做东西，初次使用遇见很多问题，把这些小问题记录下来，希望给遇到同样问题的同学一个参考，也便于自己以后查阅，持续更新中。<br><!--more--></p><h4 id="1-vue-cli构建的项目端口冲突"><a href="#1-vue-cli构建的项目端口冲突" class="headerlink" title="1.vue-cli构建的项目端口冲突"></a>1.vue-cli构建的项目端口冲突</h4><p>报错：Error: listen EADDRINUSE :::8080 错误原因是端口冲突，修改当前项目的端口即可，在项目下的config/index.js文件中修改</p><pre class=" language-javascript"><code class="language-javascript">  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    env<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./dev.env'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8081</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//修改端口号</span>    autoOpenBrowser<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    cssSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span></code></pre><h4 id="2-解决在vue-cli构建的项目中无法使用stylus的问题"><a href="#2-解决在vue-cli构建的项目中无法使用stylus的问题" class="headerlink" title="2.解决在vue-cli构建的项目中无法使用stylus的问题"></a>2.解决在vue-cli构建的项目中无法使用stylus的问题</h4><p>报错：Module build failed: Error: Cannot find module ‘stylus’<br>解决：</p><h5 id="2-1-首先在package-json的devDependencies中写入依赖"><a href="#2-1-首先在package-json的devDependencies中写入依赖" class="headerlink" title="2.1 首先在package.json的devDependencies中写入依赖"></a>2.1 首先在package.json的devDependencies中写入依赖</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"stylus-loader"</span><span class="token punctuation">:</span> <span class="token string">"^2.1.2"</span><span class="token punctuation">,</span><span class="token string">"stylus"</span><span class="token punctuation">:</span> <span class="token string">"^0.52.4"</span><span class="token punctuation">,</span></code></pre><h5 id="2-2-安装这两个插件"><a href="#2-2-安装这两个插件" class="headerlink" title="2.2 安装这两个插件"></a>2.2 安装这两个插件</h5><pre><code>npm i stylus-loader stylus --save</code></pre><p>或者直接在项目文件夹下<br>    npm install</p><h5 id="2-3-重新编译运行"><a href="#2-3-重新编译运行" class="headerlink" title="2.3 重新编译运行"></a>2.3 重新编译运行</h5><pre><code>npm run dev</code></pre><h4 id="3-运行后一片空白，chrome控制台报错"><a href="#3-运行后一片空白，chrome控制台报错" class="headerlink" title="3.运行后一片空白，chrome控制台报错"></a>3.运行后一片空白，chrome控制台报错</h4><p>报错：Uncaught TypeError: <strong>WEBPACK_IMPORTED_MODULE_2</strong>router__.a is not a constructor<br>描述：在使用vue-router时出现了这个问题,在网上搜索后发现是版本不同导致的问题，在vue2.x中使用了1.0的vue-router的写法，<br>在vue1.0中:<br>    <a v-link="{path:'/goods'}">商品</a><br>修改为vue2.0中的写法:<br>    <router-link to="/goods">商品</router-link></p><h4 id="4-配置默认路径"><a href="#4-配置默认路径" class="headerlink" title="4.配置默认路径"></a>4.配置默认路径</h4><p>没有进行配置时，引用组件只能通过下面的方式<br>    import Goods from ‘../components/goods/goods’;<br>并且’../‘写多了也很烦人，如果不加’../‘会报一下错误：<br>报错：Module not found: Error: Can’t resolve ‘components/goods/goods’ in ‘F:\vuetest\vue-project\src\router’<br>为此我们可以配置默认路径来解决这个问题。<br>1.找到build文件夹下的webpack.base.conf.js文件<br>2.在文件中找到这一段代码:</p><pre class=" language-javascript"><code class="language-javascript">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>alias是别名的意思，我们可以为常用的路径起一个别名,如下面这样</p><pre class=" language-javascript"><code class="language-javascript">resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">'components'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../src/components'</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>在修改完成后要重新运行，才能生效，现在页面中的<code>import Goods from &#39;components/goods/goods&#39;;</code>应该就可以了。</p><p>补充：这样配置的路径只在script标签中有效，也就是只能在js中用。</p><h4 id="5-使用v-for在获取computed中的值时出现的问题"><a href="#5-使用v-for在获取computed中的值时出现的问题" class="headerlink" title="5.使用v-for在获取computed中的值时出现的问题"></a>5.使用v-for在获取computed中的值时出现的问题</h4><p>报错：xxx is not defined on the instance but referenced during render.Make sure to declare reactive data properties in the data option.<br>这个问题犯得很不应该，错把computed属性写在了props属性中，导致vue找不到computed中定义的计算函数，是个低级错误，不多说了。</p><h4 id="6-在vue中实现左右滑动切换"><a href="#6-在vue中实现左右滑动切换" class="headerlink" title="6.在vue中实现左右滑动切换"></a>6.在vue中实现左右滑动切换</h4><p>watch路由变化，当路由发生改变时，根据地址中’/‘的数量来判断当前路由地址的深浅，以此决定要左滑还是右滑</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        transitionName <span class="token punctuation">:</span><span class="token string">'slide-left'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//绑定在组件上面的动效class</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'$route'</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> toDepth <span class="token operator">=</span> to<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length        <span class="token keyword">const</span> fromDepth <span class="token operator">=</span> <span class="token keyword">from</span><span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length        <span class="token keyword">this</span><span class="token punctuation">.</span>transitionName <span class="token operator">=</span> toDepth <span class="token operator">&lt;</span> fromDepth <span class="token operator">?</span> <span class="token string">'vux-pop-out'</span> <span class="token punctuation">:</span> <span class="token string">'vux-pop-in'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css">&lt;style lang=<span class="token string">"stylus"</span> rel=<span class="token string">"stylesheet/stylus"</span>>  <span class="token comment" spellcheck="true">/* 左右滑动 */</span><span class="token number">.</span>vux-pop-out-enter-active,<span class="token number">.</span>vux-pop-out-leave-active,<span class="token number">.</span>vux-pop-in-enter-active,<span class="token number">.</span>vux-pop-in-leave-active  <span class="token property">will-change</span><span class="token punctuation">:</span> transform <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">350</span>ms <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span> <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token number">.</span>vux-pop-out-enter <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>-<span class="token number">100%</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">.</span>vux-pop-out-leave-active <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100%</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-<span class="token number">3</span>d<span class="token punctuation">;</span><span class="token number">.</span>vux-pop-in-enter <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">100%</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-<span class="token number">3</span>d<span class="token punctuation">;</span><span class="token number">.</span>vux-pop-in-leave-active <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token property">transform</span><span class="token punctuation">:</span> translate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span>-<span class="token number">100%</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token property">transform-style</span><span class="token punctuation">:</span> preserve-<span class="token number">3</span>d<span class="token punctuation">;</span>&lt;/style></code></pre><h4 id="7-在keep-alive中只更新某个组件的数据"><a href="#7-在keep-alive中只更新某个组件的数据" class="headerlink" title="7.在keep-alive中只更新某个组件的数据"></a>7.在keep-alive中只更新某个组件的数据</h4><p>我有一个列表，点击列表的项可以打开详情页，在我没有使用keep-alive时，一切正常，我点击某一项，详情页中显示的是当前项的数据，不过在使用keep-alive进行组件缓存后就出事了，我不管点击哪一项总是会打开第一次缓存的详情组件，数据也不会改变，我是通过vue-router传参到详情页面的:</p><pre class=" language-javascript"><code class="language-javascript">taskDetail<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/task/detail'</span><span class="token punctuation">,</span>query<span class="token punctuation">:</span><span class="token punctuation">{</span>item<span class="token punctuation">:</span>item<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>查看官方文档，发现下面这段话：</p><blockquote><p>在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 <keep-alive> 树内的所有嵌套组件中触发。</keep-alive></p></blockquote><p>那么我只要每次在activated中做数据更新就行了，如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">activated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="8-使用better-scroll时列表不滚动的问题"><a href="#8-使用better-scroll时列表不滚动的问题" class="headerlink" title="8.使用better-scroll时列表不滚动的问题"></a>8.使用better-scroll时列表不滚动的问题</h4><p>有必要先了解一下better-scroll的原理,下面的链接中讲的非常清楚：<br><a href="https://juejin.im/post/59300b2e2f301e006bcdd91c" target="_blank" rel="noopener">better-scroll</a><br>也就是说滚动列表的父元素要有一个固定的高度，只有这样滚动列表的高度超过父元素的高度是列表才会滚动，不超过时就不滚动，总之在better-scroll的引入和写法没错的情况下还不能滚动，那大多数原因就是css的样式没写对，导致不符合better-scroll滚动的条件，那来看一个非常简单的例子吧,主要是css部分：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"parent"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"child_div"</span> ref<span class="token operator">=</span><span class="token string">"wrapper"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">...</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">299</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">300</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/ecmascritp-6"</span><span class="token operator">></span>  <span class="token keyword">import</span> BScroll <span class="token keyword">from</span> <span class="token string">'better-scroll'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>parent<span class="token punctuation">{</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  top<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  bottom<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>child_div<span class="token punctuation">{</span>  position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>child_div li<span class="token punctuation">{</span>  height<span class="token punctuation">:</span>20vw<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h4 id="9-better-scroll中警告-Intervention-Unable-to-preventDefault-inside-passive-event-listener-due-to-target-being-treated-as-passive"><a href="#9-better-scroll中警告-Intervention-Unable-to-preventDefault-inside-passive-event-listener-due-to-target-being-treated-as-passive" class="headerlink" title="9.better-scroll中警告[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive"></a>9.better-scroll中警告[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive</h4><p>这个警告信息是因为在新版的chrome中监听touch类事件时，无法被动侦听事件preventDefault造成的，在better-scroll中暂时解决的方法是在初始化better-scroll时设置preventDefault: false</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>scroll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BScroll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>wrapper<span class="token punctuation">,</span> <span class="token punctuation">{</span>  preventDefault<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//暂时解决chrome中无法被动监听preventdefault</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="10-只在一级菜单显示底部导航"><a href="#10-只在一级菜单显示底部导航" class="headerlink" title="10.只在一级菜单显示底部导航"></a>10.只在一级菜单显示底部导航</h4><p>在网上搜索之后发现两种方法可以解决，先说第一种：<br>在router文件夹下的index.js中将需要显示底部导航的路由中加入meta属性,在meta属性中添加一个标志属性，用来标志是否显示底部导航，这里我们用navShow来做为标志属性，如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>  component<span class="token punctuation">:</span> home<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*主页组件*/</span>  meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'首页'</span><span class="token punctuation">,</span>    navShow<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*是否一级页面*/</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>不需要显示底部导航的设置为下面这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>    meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'登陆'</span><span class="token punctuation">,</span>      navShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*是否一级页面*/</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    component<span class="token punctuation">:</span> login <span class="token comment" spellcheck="true">/*登录组件*/</span><span class="token punctuation">}</span></code></pre><p>然后，在APP.vue中，底部导航的组件上加上判断,就完成了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>vTab v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"$route.meta.navShow"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>vTab<span class="token operator">></span></code></pre><p>第二种方法比较笨，在你不希望底部导航显示的组件中，直接设置css样式，让它盖在底部导航上，用户就看不到了，比如可以设置z-index属性为一个较大值。</p><h4 id="11-本地跨域"><a href="#11-本地跨域" class="headerlink" title="11.本地跨域"></a>11.本地跨域</h4><p>由于刚开始工作，没有什么经验，又是刚开始接触vue，虽然网上有很多文章介绍vue本地跨域，但是还是一知半解，设置了也没有成功，在纠结了好大一通后终于成了，发现哦原来这么简单，但是不明白时却觉得很难，</p><h4 id="12-去掉路由中的-号"><a href="#12-去掉路由中的-号" class="headerlink" title="12.去掉路由中的#号"></a>12.去掉路由中的#号</h4><p>路由中总是会带有一个#号，如<a href="http://192.168.0.144:8098/#/index" target="_blank" rel="noopener">http://192.168.0.144:8098/#/index</a><br>看起来很别扭， 要去除这个#号，可以使用路由的history模式，在router/index.js中的new VueRouter方法中添加：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Routes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>这样路由就会变成<a href="http://192.168.0.144:8098/index" target="_blank" rel="noopener">http://192.168.0.144:8098/index</a></p><h4 id="13-iview中的upload组件上传图片到七牛云"><a href="#13-iview中的upload组件上传图片到七牛云" class="headerlink" title="13.iview中的upload组件上传图片到七牛云"></a>13.iview中的upload组件上传图片到七牛云</h4><p>项目中用到iview中的upload组件将图片上传到七牛云，比较简单，主要是uptoken在测试阶段后台没有弄好，一时不知道在哪儿搞，后来发现可以在线生成uptoken，<a href="http://pchou.qiniudn.com/qiniutool/uptoken.html" target="_blank" rel="noopener">在线地址</a>，下面写一下示例，具体的组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Upload</span> <span class="token attr-name">:action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>camera<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Icon</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Upload</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">{</span>    domain<span class="token punctuation">:</span> config<span class="token punctuation">.</span>domain<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//如下图中被马赛克掉的内容</span>    url<span class="token punctuation">:</span> config<span class="token punctuation">.</span>qiniuUrl<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//http://up-z2.qiniu.com/</span>    uptoken<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//生成或者从后台拿到uptoken</span>    form<span class="token punctuation">:</span> <span class="token punctuation">{</span>      token<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      key<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="http://olmhb4zos.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170912174726.png" target="_blank" rel="noopener">domain</a></p><h4 id="14-vue中图片路径问题"><a href="#14-vue中图片路径问题" class="headerlink" title="14.vue中图片路径问题"></a>14.vue中图片路径问题</h4><p>以下两种情况会导致找不到图片路径的问题：</p><pre><code>1. ``` &lt;img :src=&quot;./img/a.jpg&quot; /&gt;&quot; ```2. ``` &lt;div :style=&quot;{ backgroundImage: &#39;url(./img/a.jpg)&#39; }&quot;&gt;&lt;/div&gt; ```</code></pre><p>可以使用下面的两种方法解决：</p><pre class=" language-javascript"><code class="language-javascript">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        img<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path/to/your/source'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>在标签里使用：<span class="token operator">&lt;</span>img <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"img"</span> <span class="token operator">/</span><span class="token operator">></span>`</code></pre><p>如果是背景：</p><pre class=" language-javascript"><code class="language-javascript">data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        img<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path/to/your/source'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>div <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"{backgroundImage: 'url(' + img + ')'}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h4 id="15-图片加载失败时显示默认图片"><a href="#15-图片加载失败时显示默认图片" class="headerlink" title="15.图片加载失败时显示默认图片"></a>15.图片加载失败时显示默认图片</h4><p>在使用img标签时，当图片加载失败的时候显示默认图片，这样的用户体验比较友好。<br>方法是绑定img标签的onerror，在图片加载失败时就会自动加载errorImg01的图片</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bg"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>img <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"goods.phoneFloorAd.resUrl"</span> <span class="token punctuation">:</span>onerror<span class="token operator">=</span><span class="token string">"errorImg01"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/ecmascript-6"</span><span class="token operator">></span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        errorImg01<span class="token punctuation">:</span> ‘<span class="token keyword">this</span><span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">"‘ + require(‘assets/images/load_logo01.png‘) + ‘"</span>‘  　　<span class="token punctuation">}</span><span class="token punctuation">;</span>  　<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>第二种情况是设置的背景图片加载失败时显示默认图片，方法是可以利用计算属性获取背景图片，图片获取成功时正常显示，获取失败时显示默认图片，代码如下：</p><h4 id="16-vue-cli打包时报错"><a href="#16-vue-cli打包时报错" class="headerlink" title="16. vue-cli打包时报错"></a>16. vue-cli打包时报错</h4><p>错误代码：vuex requires a Promise polyfill in this browser.<br>这个错误的原因是使用了es6的promise，但是ie版本(使用ie11)的浏览器不支持，解决的方法是安装 babel-polyfill ， babel-polyfill 可以模拟es6的使用环境</p><h5 id="1-安装-babel-polyfill"><a href="#1-安装-babel-polyfill" class="headerlink" title="1.安装 babel-polyfill"></a>1.安装 babel-polyfill</h5><pre><code>npm install  babel-polyfill</code></pre><h5 id="2-修改webpack-base-config-js"><a href="#2-修改webpack-base-config-js" class="headerlink" title="2.修改webpack.base.config.js"></a>2.修改webpack.base.config.js</h5><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>        main<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-polyfill"</span><span class="token punctuation">,</span> <span class="token string">"./src/main"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//修改后</span>        <span class="token comment" spellcheck="true">// main: './src/main',  //原来</span>        vendors<span class="token punctuation">:</span> <span class="token string">'./src/vendors'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>参考<a href="https://www.cnblogs.com/weiqinl/p/6794612.html" target="_blank" rel="noopener">https://www.cnblogs.com/weiqinl/p/6794612.html</a></p></blockquote><h4 id="17-vue-cli打包时报错"><a href="#17-vue-cli打包时报错" class="headerlink" title="17. vue-cli打包时报错"></a>17. vue-cli打包时报错</h4><p>运行npm run dev时没有问题，但运行npm run build时报错</p><pre class=" language-javascript"><code class="language-javascript">Error<span class="token punctuation">:</span> <span class="token string">"extract-text-webpack-plugin"</span> loader is used without the corresponding plugin</code></pre><p>是在我把vue-cli升级到@2.9.2之后出现的问题，没有找到原因，删除又安装了@2.8.2后可以打包了</p><h4 id="18-vscode格式化vue中template代码"><a href="#18-vscode格式化vue中template代码" class="headerlink" title="18.vscode格式化vue中template代码"></a>18.vscode格式化vue中template代码</h4><h6 id="1-安装-vetur"><a href="#1-安装-vetur" class="headerlink" title="1.安装 vetur"></a>1.安装 vetur</h6><h6 id="2-在User-Setting中增加设置"><a href="#2-在User-Setting中增加设置" class="headerlink" title="2.在User Setting中增加设置:"></a>2.在User Setting中增加设置:</h6><p><code>&quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;</code></p><h6 id="3-格式化快捷键：Alt-Shift-F"><a href="#3-格式化快捷键：Alt-Shift-F" class="headerlink" title="3.格式化快捷键：Alt+Shift+F"></a>3.格式化快捷键：Alt+Shift+F</h6><h4 id="19-vue中通过a标签下载文件"><a href="#19-vue中通过a标签下载文件" class="headerlink" title="19.vue中通过a标签下载文件"></a>19.vue中通过a标签下载文件</h4><p>想不通过后台直接下载一个excel文件，我用了<br><code>&lt;a href=&quot;/file/filename&quot; download=&quot;filename&quot;&gt;</code><br>但是提示我找不到文件，想到img标签的src属性，是要把文件通过require引入，再通过url-loader解析一下，才能正常显示图片，所以想这个href属性是不是同样的套路，那excel文件用什么解析呢，搜索之后发现有一个file-loader，所以在webpack的配置文件里加上了下面的几行配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(xls)$/</span><span class="token punctuation">,</span>  loader<span class="token punctuation">:</span> <span class="token string">'file-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>在代码中只需要把这个文件require进来，在href中写上这个变量就可以了，跟img一样</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileHref<span class="token punctuation">"</span></span> <span class="token attr-name">download</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span><span class="token punctuation">{</span>    fileHref<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"/file/filename"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>待续吧…</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目中小知识点的积累</title>
      <link href="/2017/07/15/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E7%A7%AF%E7%B4%AF/"/>
      <url>/2017/07/15/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<p>这一篇用来记录一下项目中遇见的小问题，以及解决方法<br><a id="more"></a></p><h4 id="1-多行文字的垂直居中"><a href="#1-多行文字的垂直居中" class="headerlink" title="1.多行文字的垂直居中"></a>1.多行文字的垂直居中</h4><h4 id="2-jQuery-Ajax结果用prepend实现淡入及滑动效果"><a href="#2-jQuery-Ajax结果用prepend实现淡入及滑动效果" class="headerlink" title="2.jQuery+Ajax结果用prepend实现淡入及滑动效果"></a>2.jQuery+Ajax结果用prepend实现淡入及滑动效果</h4><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。由于其可以减少服务器请求并能提升用户体验，现在很多地方都在用。<br>这两天做一个Ajax评论的时候，用 prepend() 方法把结果直接插入到页面上，虽然可以实现功能，但是页面直接多出这么一块东西，效果不是很好，所以就想用 fadeIn() 方法或 slideDown() 方法来把结果展现出来，但是发现直接在 prepend() 方法后接上 fadeIn() 并不管用。<br>后来发现在调用 prepend() 方法的时候，结果其实本身已经是显示状态了，所以 fadeIn() 方法起不到作用。解决办法是在 prepend() 之前让结果先隐藏，即加上一个 hide() 方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token string">'&lt;li class="list-group-item">This is a additional line !&lt;/li>'</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.b1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.list-group'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token string">'slow'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或者 $('.list-group').prepend($(response).hide().fadeIn('slow'));</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-七牛云uptoken在线生成器"><a href="#4-七牛云uptoken在线生成器" class="headerlink" title="4.七牛云uptoken在线生成器"></a>4.七牛云uptoken在线生成器</h4><p><a href="http://pchou.qiniudn.com/qiniutool/uptoken.html" target="_blank" rel="noopener">在线uptoken生成</a></p><h4 id="5-支持中文的base64转码和解码"><a href="#5-支持中文的base64转码和解码" class="headerlink" title="5.支持中文的base64转码和解码"></a>5.支持中文的base64转码和解码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//转码</span><span class="token keyword">function</span> <span class="token function">base64Encode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> rv<span class="token punctuation">;</span>    rv <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    rv <span class="token operator">=</span> <span class="token function">unescape</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>    rv <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">btoa</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rv<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//解码</span><span class="token keyword">function</span> <span class="token function">base64Decode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">{</span>    rv <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    rv <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>    rv <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rv<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="6-在线加密解密"><a href="#6-在线加密解密" class="headerlink" title="6.在线加密解密"></a>6.在线加密解密</h4><p><a href="http://encode.chahuo.com/" target="_blank" rel="noopener">在线加密解密</a></p><h4 id="7-手机上访问pc端编写的页面"><a href="#7-手机上访问pc端编写的页面" class="headerlink" title="7.手机上访问pc端编写的页面"></a>7.手机上访问pc端编写的页面</h4><p>服务器用的是Apache,先开启服务器，将项目文件夹放在服务器指定的文件夹下，这是在电脑上可以通过<a href="http://localhost/文件目录" target="_blank" rel="noopener">http://localhost/文件目录</a> 来访问，手机想要访问的话要与pc在同一个局域网，同时查到pc端的ip地址，将localhost改为ip地址，即可在手机上访问。<br>这次遇到一个问题，在pc端可以成功访问，但是放在手机上就报403 forbidden拒绝访问的错误，经过查找，发现httpd.conf文件中的配置有问题，当前的配置如图<br><img src="http://oj056g1gy.bkt.clouddn.com/403forbidden.png" alt="配置">,几个配置的含义：<br>Require local 仅允许本地访问；<br>Require all denied 拒绝所有访问；<br>Require all granted 允许所有访问；<br>Require ip 192.168.0.1 仅允许IP：192.168.0.1 访问；<br>Require not ip 192.168.0.1 仅禁止IP：192.168.0.1访问；<br>所以我们应该修改成Require all granted 允许所有访问，修改后如下图：<br><img src="http://oj056g1gy.bkt.clouddn.com/success403.png" alt><br><a href="http://www.cnblogs.com/chayu/p/6889793.html" target="_blank" rel="noopener">参考http://www.cnblogs.com/chayu/p/6889793.html</a>非常感谢</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从头学习HTMl5(一)</title>
      <link href="/2017/06/04/%E4%BB%8E%E5%A4%B4%E5%AD%A6%E4%B9%A0HTMl5-%E4%B8%80/"/>
      <url>/2017/06/04/%E4%BB%8E%E5%A4%B4%E5%AD%A6%E4%B9%A0HTMl5-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h4 id="1-注释标签"><a href="#1-注释标签" class="headerlink" title="1.注释标签"></a>1.注释标签</h4><!--注释内容,不会显示在浏览器中--><p>注释标签除了在代码中添加注释的功能外，还可以在不支持js的浏览器中隐藏js代码：<br><a id="more"></a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--        alert("支持JavaScript")    //--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在不支持js的浏览器中，最后的//–&gt;不会被当成注释，注释标签可以成功闭合，js代码就不会执行；在支持js的浏览器中//后面的内容被解析为js注释，<!-- -->没有闭合，中间的js代码可以执行。</p><h4 id="2-html5中新增的结构标签"><a href="#2-html5中新增的结构标签" class="headerlink" title="2.html5中新增的结构标签"></a>2.html5中新增的结构标签</h4><p>article、aside、</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交文件到GitHub时出现的问题记录</title>
      <link href="/2017/05/19/Git%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E5%88%B0GitHub%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/19/Git%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E5%88%B0GitHub%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="1-输入命令-git-push-origin-master时，出现Everything-up-to-date"><a href="#1-输入命令-git-push-origin-master时，出现Everything-up-to-date" class="headerlink" title="1.输入命令$ git push origin master时，出现Everything up-to-date"></a>1.输入命令$ git push origin master时，出现Everything up-to-date</h4><p>我是在提交项目中新创建的文件时出现这个问题，是因为没有对新创建的文件执行<br><a id="more"></a></p><pre class=" language-javascript"><code class="language-javascript">git add 新文件git commit <span class="token operator">-</span>m <span class="token string">'提交描述信息'</span></code></pre><p>这两个命令执行成功后再去执行</p><pre class=" language-javascript"><code class="language-javascript">git push origin master</code></pre><p>现在应该就没有问题了</p><h4 id="2-Untracked-files"><a href="#2-Untracked-files" class="headerlink" title="2.Untracked files"></a>2.Untracked files</h4><pre class=" language-javascript"><code class="language-javascript"> git commit <span class="token operator">-</span>m <span class="token string">'内容提交'</span>On branch masterYour branch is up<span class="token operator">-</span>to<span class="token operator">-</span>date <span class="token keyword">with</span> <span class="token string">'origin/master'</span><span class="token punctuation">.</span>Untracked files<span class="token punctuation">:</span>        <span class="token punctuation">.</span>gitignore        <span class="token punctuation">.</span>tmp<span class="token operator">/</span>        <span class="token punctuation">.</span>watchmanconfig        JsCode<span class="token operator">/</span>        Test<span class="token operator">/</span>        __tests__<span class="token operator">/</span>        android<span class="token operator">/</span>        app<span class="token punctuation">.</span>json        index<span class="token punctuation">.</span>android<span class="token punctuation">.</span>js        index<span class="token punctuation">.</span>ios<span class="token punctuation">.</span>js        ios<span class="token operator">/</span>        <span class="token keyword">package</span><span class="token punctuation">.</span>json        setup<span class="token punctuation">.</span>js        yarn<span class="token punctuation">.</span>locknothing added to commit but untracked files present</code></pre><h4 id="3-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#3-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="3.Your local changes to the following files would be overwritten by merge"></a>3.Your local changes to the following files would be overwritten by merge</h4><p>git stash<br>git pull<br>git stash pop</p><h4 id="4-error-Pulling-is-not-possible-because-you-have-unmerged-files"><a href="#4-error-Pulling-is-not-possible-because-you-have-unmerged-files" class="headerlink" title="4 error: Pulling is not possible because you have unmerged files"></a>4 error: Pulling is not possible because you have unmerged files</h4><p>1.pull会使用git merge导致冲突，需要将冲突的文件resolve掉 git add -u, git commit之后才能成功pull.</p><p>2.如果想放弃本地的文件修改，可以使用git reset –hard FETCH_HEAD，FETCH_HEAD表示上一次成功git pull之后形成的commit点。然后git pull.<br>注意：</p><p>git merge会形成MERGE-HEAD(FETCH-HEAD) 。git push会形成HEAD这样的引用。HEAD代表本地最近成功push后形成的引用。</p><h4 id="5-git-push时报错The-requested-URL-returned-error-403"><a href="#5-git-push时报错The-requested-URL-returned-error-403" class="headerlink" title="5.git push时报错The requested URL returned error: 403"></a>5.git push时报错The requested URL returned error: 403</h4><p>起因是在网上下载了后台代码，经过修改后想上传到github，git push时报错The requested URL returned error: 403，原因是这个代码中的.git文件夹是原代码的项目github仓库，这个网址我是提交不上的，那么，就要把原来的github地址改成自己的地址，修改 config 文件，找到 [remote “origin”] 节点下的 url 项，将这个url地址改为自己的github仓库地址，另一种方法是直接把项目中的.git文件夹删掉，再执行git init，然后进行提交。</p><h4 id="6-github-Host-key-verification-failed"><a href="#6-github-Host-key-verification-failed" class="headerlink" title="6.github Host key verification failed"></a>6.github Host key verification failed</h4><p>主机密钥验证失败，其实这是缺少了 known_hosts 文件, 而且必须生成 github.com 的ip执行内容。<br>输入：ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>回车后出现下图的内容，输入yes，这时再提交，就没事了<br><img src="../imgs/QQ截图20180120225429.png" alt></p><h4 id="7-git-pull报错：error-Your-local-changes-to-‘c-environ-c’-would-be-overwritten-by-merge-Aborting"><a href="#7-git-pull报错：error-Your-local-changes-to-‘c-environ-c’-would-be-overwritten-by-merge-Aborting" class="headerlink" title="7. git pull报错：error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting."></a>7. git pull报错：error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.</h4><p>在使用git pull代码时，经常会碰到有冲突的情况，提示如下信息：<br>error: Your local changes to ‘c/environ.c’ would be overwritten by merge.  Aborting.<br>Please, commit your changes or stash them before you can merge.<br>这个意思是说更新下来的内容和本地修改的内容有冲突，先提交你的改变或者先将本地修改暂时存储起来。<br>处理的方式非常简单，主要是使用git stash命令进行处理，分成以下几个步骤进行处理。</p><h5 id="1、先将本地修改存储起来"><a href="#1、先将本地修改存储起来" class="headerlink" title="1、先将本地修改存储起来"></a>1、先将本地修改存储起来</h5><p><code>$ git stash</code><br>这样本地的所有修改就都被暂时存储起来 。这时用git stash list可以看到保存的信息：<br>git stash暂存修改<br>其中stash@{0}就是刚才保存的标记。</p><h5 id="2、pull内容"><a href="#2、pull内容" class="headerlink" title="2、pull内容"></a>2、pull内容</h5><p>暂存了本地修改之后，就可以pull了。<br><code>$ git pull</code></p><h5 id="3、还原暂存的内容"><a href="#3、还原暂存的内容" class="headerlink" title="3、还原暂存的内容"></a>3、还原暂存的内容</h5><p><code>$ git stash pop stash@{0}</code><br>系统提示如下类似的信息：</p><pre><code>Auto-merging c/environ.cCONFLICT (content): Merge conflict in c/environ.c</code></pre><p>意思就是系统自动合并修改的内容，但是其中有冲突，需要解决其中的冲突。</p><h5 id="4、解决文件中冲突的的部分"><a href="#4、解决文件中冲突的的部分" class="headerlink" title="4、解决文件中冲突的的部分"></a>4、解决文件中冲突的的部分</h5><p>打开冲突的文件，会看到类似如下的内容：<br>git冲突内容<br>其中Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容。碰到这种情况，git也不知道哪行内容是需要的，所以要自行确定需要的内容。<br>解决完成之后，就可以正常的提交了。</p><h4 id="5-回复到merge前"><a href="#5-回复到merge前" class="headerlink" title="5. 回复到merge前"></a>5. 回复到merge前</h4><p>第一步：git checkout到你要恢复的那个分支上</p><p><code>git checkout 分支名</code></p><p>第二步：git reflog查出要回退到merge前的版本号</p><p><code>git reflog</code></p><p>第三步：<code>git reset --hard [版本号]</code>就回退到merge前的代码状态了</p><p><code>git reset --hard f82cfd2</code></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用JS代码片段</title>
      <link href="/2017/05/17/%E5%B8%B8%E7%94%A8JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2017/05/17/%E5%B8%B8%E7%94%A8JS%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h4 id="1-隐藏部分数字，如手机号码，身份证号码"><a href="#1-隐藏部分数字，如手机号码，身份证号码" class="headerlink" title="1.隐藏部分数字，如手机号码，身份证号码"></a>1.隐藏部分数字，如手机号码，身份证号码</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mask</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>start<span class="token punctuation">,</span>length<span class="token punctuation">,</span>mask_char<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Array</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>mask_char<span class="token operator">||</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><a id="more"></a><h4 id="2-获取指定范围内的随机数"><a href="#2-获取指定范围内的随机数" class="headerlink" title="2.获取指定范围内的随机数"></a>2.获取指定范围内的随机数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">randNum</span><span class="token punctuation">(</span>minnum<span class="token punctuation">,</span>maxnum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minnum<span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>maxnum<span class="token operator">-</span>minnum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>randNum(0,10)得到的是0到9之间的随机数</p><h4 id="3-全选，全不选"><a href="#3-全选，全不选" class="headerlink" title="3.全选，全不选"></a>3.全选，全不选</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkAll<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>全选    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>吃饭    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>睡觉    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>打豆豆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> checkAll <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'checkAll'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> checkBoxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> select <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>checkAll<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    select <span class="token operator">=</span> <span class="token operator">!</span>select<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> checkBoxs<span class="token punctuation">)</span><span class="token punctuation">{</span>        checkBoxs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>checked <span class="token operator">=</span> select<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span></code></pre><h4 id="4-js原生判断元素是否隐藏"><a href="#4-js原生判断元素是否隐藏" class="headerlink" title="4.js原生判断元素是否隐藏"></a>4.js原生判断元素是否隐藏</h4><p>当容器元素的style.display 被设置为 “none”时（IE和Opera除外），offsetParent属性返回 null。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> isHidden <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>offsetParent <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="5-jquery中判断对象是否为空对象"><a href="#5-jquery中判断对象是否为空对象" class="headerlink" title="5.jquery中判断对象是否为空对象"></a>5.jquery中判断对象是否为空对象</h4><p>空对象{}肯定是没有属性的，所以通过遍历他的属性来判断它是否是空对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> t<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>t <span class="token keyword">in</span> e<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">!</span><span class="token number">0</span>  <span class="token punctuation">}</span>  </code></pre><h4 id="5-数组去重"><a href="#5-数组去重" class="headerlink" title="5.数组去重"></a>5.数组去重</h4><p>判断当前元素的位置是否是该元素第一次出现的位置，如果不是说明元素重复。indexOf是查找元素第一次出现位置的索引值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">uniq</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>idx<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">==</span> idx<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在React-Native项目中引入react-native-sqlite-storage</title>
      <link href="/2017/03/30/%E5%9C%A8React%20Native%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%95%E5%85%A5react-native-sqlite-storage/"/>
      <url>/2017/03/30/%E5%9C%A8React%20Native%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BC%95%E5%85%A5react-native-sqlite-storage/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近在使用React Native做毕业设计，因为第一次接触踩了不少坑，不过好在都解决了，这篇主要记录一下在React-Native中引入’react-native-sqlite-storage’的方法：<br><a id="more"></a><br>目前在react-native中主要有两种数据存储方案，第一种是官方的AsyncStorage，AsyncStorage是一个简单的、异步的、持久化的Key-Value存储系统，它对于App来说是全局性的<br>它适用于存储些系统设置、全局变量等简单的key-value数据，不适用于过于庞大的数据，也不适用于一些包含数据结构等复杂数据，对于复杂的数据结构，我们需要使用SQLite，轻量的数据库，但RN并没有提供，不过有这种需求的肯定不止我一个，所以现在拿来直接使用，我在这里用的是react-native-sqlite-storage。且由于没有ios设备，这里只说安卓平台。</p><h4 id="1-命令行安装"><a href="#1-命令行安装" class="headerlink" title="1. 命令行安装"></a>1. 命令行安装</h4><pre><code>npm install --save react-native-sqlite-storage</code></pre><h4 id="2-全局Gradle的设置"><a href="#2-全局Gradle的设置" class="headerlink" title="2.  全局Gradle的设置"></a>2.  全局Gradle的设置</h4><p>文件目录：android/settings.gradle</p><pre><code>...include &#39;:react-native-sqlite-storage&#39;project(&#39;:react-native-sqlite-storage&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-sqlite-storage/src/android&#39;)</code></pre><h4 id="3-修改android-app-build-gradle"><a href="#3-修改android-app-build-gradle" class="headerlink" title="3. 修改android/app/build.gradle"></a>3. 修改android/app/build.gradle</h4><p>目录：android/app/build.gradle</p><pre><code>...dependencies {    ...    compile project(&#39;:react-native-sqlite-storage&#39;)}</code></pre><h4 id="4-在MainActivity-java中注册模块"><a href="#4-在MainActivity-java中注册模块" class="headerlink" title="4. 在MainActivity.java中注册模块"></a>4. 在MainActivity.java中注册模块</h4><p>目录：android\app\src\main\java\com\项目名\MainActivity.java</p><pre><code>import android.app.Activity;import android.os.Bundle;import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;import com.facebook.react.ReactInstanceManager;import com.facebook.react.ReactRootView;import com.facebook.react.shell.MainReactPackage;import com.facebook.react.common.LifecycleState;import com.facebook.react.ReactActivity;import org.pgsqlite.SQLitePluginPackage;public class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {    private ReactInstanceManager mReactInstanceManager;    private ReactRootView mReactRootView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mReactRootView = new ReactRootView(this);        mReactInstanceManager = ReactInstanceManager.builder()                .setApplication(getApplication())                .setBundleAssetName(&quot;index.android.bundle&quot;)  // this is dependant on how you name you JS files, example assumes index.android.js                .setJSMainModuleName(&quot;index.android&quot;)        // this is dependant on how you name you JS files, example assumes index.android.js                .addPackage(new MainReactPackage())                .addPackage(new SQLitePluginPackage(this))   // register SQLite Plugin here                .setUseDeveloperSupport(BuildConfig.DEBUG)                .setInitialLifecycleState(LifecycleState.RESUMED)                .build();        mReactRootView.startReactApplication(mReactInstanceManager, &quot;AwesomeProject&quot;, null); //这里把AwesomeProject        setContentView(mReactRootView);    }     @Override     public void invokeDefaultOnBackPressed() {          super.onBackPressed();     }}</code></pre><h4 id="5-引入"><a href="#5-引入" class="headerlink" title="5. 引入"></a>5. 引入</h4><p>这样应该就引入成功了，具体的使用还在学习，后续再补充上来。</p><h4 id="6-坑"><a href="#6-坑" class="headerlink" title="6. 坑"></a>6. 坑</h4><p>今天跑起来后发现出事儿了，开发者菜单调不出来了，而且我用来测试的alert语句会发出一个警告，如图：<br><img src="http://oj056g1gy.bkt.clouddn.com/IMG20170331221314.jpg" alt="http://oj056g1gy.bkt.clouddn.com/IMG20170331221314.jpg"><br>在网上没有找到同样的问题，但是sqlite能工作，而且只发出警告有感觉是因为版本的问题，试着将配置方式改了一下，结果就成了。<br>将MainActivity.java中添加和修改的内容都删除了，还原到原来的内容：</p><pre><code>package com.项目名;import com.facebook.react.ReactActivity;public class MainActivity extends ReactActivity {    /**     * Returns the name of the main component registered from JavaScript.     * This is used to schedule rendering of the component.     */    @Override    protected String getMainComponentName() {        return &quot;项目名&quot;;    }}</code></pre><p>MainApplication文件中的内容：</p><pre><code>package com.weidao;import android.app.Application;import android.util.Log;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import com.facebook.soloader.SoLoader;import org.pgsqlite.SQLitePluginPackage;import java.util.Arrays;import java.util.List;public class MainApplication extends Application implements ReactApplication {  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {    @Override    public boolean getUseDeveloperSupport() {      return BuildConfig.DEBUG;    }    @Override    protected List&lt;ReactPackage&gt; getPackages() {      return Arrays.&lt;ReactPackage&gt;asList(          new MainReactPackage(),          new SQLitePluginPackage()      );    }  };  @Override  public ReactNativeHost getReactNativeHost() {    return mReactNativeHost;  }  @Override  public void onCreate() {    super.onCreate();    SoLoader.init(this, /* native exopackage */ false);  }}</code></pre><p>其他没变，这样终于可以了&gt;_&lt;_</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native控件的使用之ListView</title>
      <link href="/2017/03/18/React%20Native%E4%B8%AD%E7%9A%84ListView%E5%92%8CScrollView%E6%8E%A7%E4%BB%B6/"/>
      <url>/2017/03/18/React%20Native%E4%B8%AD%E7%9A%84ListView%E5%92%8CScrollView%E6%8E%A7%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h5 id="1-ListView控件"><a href="#1-ListView控件" class="headerlink" title="1.ListView控件"></a>1.ListView控件</h5><p>  功能：用于显示一个可垂直滚动的变化的数据列表。下面用一个简单的例子来展示一下ListView的用法<br><a id="more"></a></p><h6 id="1-1-案例效果"><a href="#1-1-案例效果" class="headerlink" title="1.1 案例效果"></a>1.1 案例效果</h6><p><img src="http://oj056g1gy.bkt.clouddn.com/ListViewTest1.gif" alt="ListViewTest"></p><h6 id="1-2-案例代码"><a href="#1-2-案例代码" class="headerlink" title="1.2 案例代码"></a>1.2 案例代码</h6><pre><code>//定义原始数据：数组（字符串）//假装一数组的男神都是我的&gt;_&lt;    var contents =[        &#39;1. 韩庚&#39;,         &#39;2. 韩庚&#39;,        &#39;3. 韩庚&#39;,        &#39;4. 韩庚&#39;,        &#39;5. 韩庚&#39;,        &#39;6. 韩庚&#39;,        &#39;7. 韩庚&#39;,        &#39;8. 韩庚&#39;,        &#39;9. 韩庚&#39;,        &#39;10. 韩庚&#39;,        &#39;11. 韩庚&#39;,        &#39;12. 韩庚&#39;,        &#39;13. 韩庚&#39;    ];//ListViewTest1export default class ListViewTest1 extends Component{    constructor(props){        super(props);        //创建一个ListView.DataSource数据源，然后给它传递一个普通的数据数组        let ds = new ListView.DataSource({            //通过判断决定渲染哪些行组件，避免全部渲染，提高渲染效率            rowHasChanged: (oldRow, newRow) =&gt; oldRow != newRow        });        this.state = {            //在dataSource中，不直接使用提供的原始数据            //使用cloneWithRows方法对数据源进行复制，            //使用复制后的数据源实例化ListView            //好处：当原始数据发生变化时，ListView的dataSource不会改变            dataSource: ds.cloneWithRows(contents)        }    }    //渲染row的方法，参数是每行显示的数据对象    _renderRow(rowData:string){        return (            &lt;View style={styles.row}&gt;                &lt;Text style={styles.content}&gt;{rowData}&lt;/Text&gt;            &lt;/View&gt;        )    }    render(){        return (            &lt;ListView                style={styles.container}                //设置数据源                dataSource={this.state.dataSource}                //配置每一行的组件                renderRow={this._renderRow}            /&gt;        )    }}const styles = StyleSheet.create({    container:{        flex:1,        marginTop:25    },    row:{        justifyContent:&#39;center&#39;,        alignItems:&#39;center&#39;,        padding:25,        borderBottomWidth:1,        borderColor:&quot;#ccc&quot;,    },    content:{        flex:1,        fontSize:20,        color:&#39;blue&#39;    }});</code></pre><h5 id="2-ScrollView控件"><a href="#2-ScrollView控件" class="headerlink" title="2.ScrollView控件"></a>2.ScrollView控件</h5><h6 id="2-1-案例演示"><a href="#2-1-案例演示" class="headerlink" title="2.1 案例演示"></a>2.1 案例演示</h6><h6 id="2-2-案例代码"><a href="#2-2-案例代码" class="headerlink" title="2.2 案例代码"></a>2.2 案例代码</h6><pre><code>import React ,{Component} from &#39;react&#39;;import{    View,    Text,    RefreshControl,    StyleSheet,    ScrollView,    TouchableWithoutFeedback}from &#39;react-native&#39;;class Row extends Component{    _onClick(){        this.props.onClick(this.props.data)    };    render(){        return (            &lt;TouchableWithoutFeedback                style={{backgroundColor:'red'}}                onPress={this._onClick.bind(this)}            &gt;                &lt;View style={styles.row}&gt;                    &lt;Text&gt;                        {this.props.data.text+&#39; 已收到&#39;+this.props.data.clicks+&#39;颗心&#39;}                    &lt;/Text&gt;                &lt;/View&gt;            &lt;/TouchableWithoutFeedback&gt;        )    }}export default class RefreshControlTest extends Component{    constructor(props){        super(props);        this.state={            isRefreshing:false,            rowData:Array.from(new Array(20)).map(                (val,i)=&gt;({text:&#39;韩庚韩庚我爱韩庚&#39;+i,clicks:0})            )        }    };    _onClick(row){        row.clicks++;        this.setState({            rowData: this.state.rowData,        });    };    render(){        const rows = this.state.rowData.map(            (row,ii)=&gt;{                return (&lt;Row key={ii} data={row} onClick={this._onClick.bind(this)} /&gt;)            }        );        return(            &lt;ScrollView                style={styles.containers}                refreshControl={                    &lt;RefreshControl                        refreshing={this.state.isRefreshing}                        onRefresh={this._onRefresh.bind(this)}                        colors={[&#39;#FFB3B3&#39;]}                        progressBackgroundColor=&quot;#fff&quot;                    /&gt;                }            &gt;                {rows}            &lt;/ScrollView&gt;        );    }    _onRefresh(){        this.setState({isRefreshing:true});        setTimeout(()=&gt;{            const rowData = this.state.rowData.map((item,i)=&gt;(                {text:&#39;送你我的小心心 点击送心：&#39;,clicks:0}            ));            this.setState({                isRefreshing:false,                rowData:rowData            })        },2000)    }}const styles = StyleSheet.create({    containers:{        flex:1,        backgroundColor:&quot;#eee&quot;    },    row:{        flex:1,        padding:25,        borderWidth:1,        borderColor:&#39;#000&#39;    }});</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用React实现的Todo List Demo</title>
      <link href="/2017/03/17/%E4%BD%BF%E7%94%A8React%E5%AE%9E%E7%8E%B0%E7%9A%84Todo-Demo/"/>
      <url>/2017/03/17/%E4%BD%BF%E7%94%A8React%E5%AE%9E%E7%8E%B0%E7%9A%84Todo-Demo/</url>
      
        <content type="html"><![CDATA[<p>1.demo预览<br><a href="https://ForeveHG.github.io/React-MyDemo-TodoList/" target="_blank" rel="noopener">实现后的效果在线查看</a><br><a href="https://github.com/ForeveHG/React-MyDemo-TodoList/" target="_blank" rel="noopener">github地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native学习过程中的资料收集</title>
      <link href="/2017/02/24/React%20Native%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
      <url>/2017/02/24/React%20Native%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="1-中文文档和相关技术博客"><a href="#1-中文文档和相关技术博客" class="headerlink" title="1.中文文档和相关技术博客"></a>1.中文文档和相关技术博客</h3><p>1.<a href="http://reactnative.cn/docs/0.41/getting-started.html" target="_blank" rel="noopener">React-Native中文文档</a><br>2.<a href="http://www.lcode.org/%E3%80%90react-native%E5%BC%80%E5%8F%91%E3%80%91react-native%E6%8E%A7%E4%BB%B6%E4%B9%8Bnavigator%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8A%E5%AE%9E%E4%BE%8B23/" target="_blank" rel="noopener">江青清的技术专栏-React Native技术文章</a><br><a id="more"></a><br>2.<a href="http://www.devio.org/2016/09/05/React-Native-%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E7%B2%BE%E9%80%89%E4%BB%93%E5%BA%93/" target="_blank" rel="noopener">React-Native-学习资源精选仓库</a><br>3.<a href="http://www.devio.org/2016/08/09/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%8A" target="_blank" rel="noopener">React-Native之React速学教程-(上)</a>/)<br><a href="http://www.devio.org/2016/08/10/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%AD" target="_blank" rel="noopener">React-Native之React速学教程-(中)</a>/)<br><a href="http://www.devio.org/2016/08/11/React-Native%E4%B9%8BReact%E9%80%9F%E5%AD%A6%E6%95%99%E7%A8%8B-(%E4%B8%8B" target="_blank" rel="noopener">React-Native之React速学教程-(下)</a>/)</p><h3 id="2-视频"><a href="#2-视频" class="headerlink" title="2.视频"></a>2.视频</h3><p>1.<a href="http://edu.csdn.net/course/detail/3129/52498?auto_start=1" target="_blank" rel="noopener">React Native零基础入门到项目实战-CSDN学院视频</a></p><h3 id="3-组件"><a href="#3-组件" class="headerlink" title="3.组件"></a>3.组件</h3><p>1.<a href="http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">新手理解navigator的教程</a><br>2.<a href="http://www.2cto.com/kf/201601/486262.html" target="_blank" rel="noopener">react native组件学习之listview</a><br>3.<a href="http://www.jianshu.com/p/b7788c3d106e" target="_blank" rel="noopener">react-native-scrollable-tab-view(入门篇)</a><br>4.<a href="http://www.jianshu.com/p/b0cfe7f11ee7" target="_blank" rel="noopener">react-native-scrollable-tab-view(进阶篇)</a></p><h3 id="4-实战"><a href="#4-实战" class="headerlink" title="4.实战"></a>4.实战</h3><p>1.<a href="http://blog.csdn.net/a631855639/article/category/6355254" target="_blank" rel="noopener">React Native实现一个看韩剧App</a></p><h3 id="5-开源项目"><a href="#5-开源项目" class="headerlink" title="5.开源项目"></a>5.开源项目</h3><p>1.<a href="https://github.com/liumingmusic/react-native-full-example" target="_blank" rel="noopener">慕课网全栈项目:小明找厕所</a></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC,MVP,MVVM的区别</title>
      <link href="/2017/02/03/MVC-MVP-MVVM/"/>
      <url>/2017/02/03/MVC-MVP-MVVM/</url>
      
        <content type="html"><![CDATA[<p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p><p>MVC（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身很容易理解，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。<br><a id="more"></a></p><h4 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h4><p>MVC模式的意思是，软件可以分成三个部分。<br><img src="http://oj056g1gy.bkt.clouddn.com/1.png" alt></p><pre><code>    视图（View）：用户界面。    控制器（Controller）：业务逻辑    模型（Model）：数据保存</code></pre><p>各部分之间的通信方式如下。<br><img src="http://oj056g1gy.bkt.clouddn.com/2.png" alt></p><pre><code>    View 传送指令到 Controller    Controller 完成业务逻辑后，要求 Model 改变状态    Model 将新的数据发送到 View，用户得到反馈</code></pre><p>所有通信都是单向的。</p><h4 id="二、互动模式"><a href="#二、互动模式" class="headerlink" title="二、互动模式"></a>二、互动模式</h4><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。<br><img src="http://oj056g1gy.bkt.clouddn.com/3.png" alt></p><p>另一种是直接通过controller接受指令。<br><img src="http://oj056g1gy.bkt.clouddn.com/4.png" alt></p><h4 id="三、实例：Backbone"><a href="#三、实例：Backbone" class="headerlink" title="三、实例：Backbone"></a>三、实例：Backbone</h4><p>实际项目往往采用更灵活的方式，以 Backbone.js 为例。<br><img src="http://oj056g1gy.bkt.clouddn.com/5.png" alt></p><ol><li><p>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</p></li><li><p>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</p></li><li><p>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</p></li></ol><h4 id="四、MVP"><a href="#四、MVP" class="headerlink" title="四、MVP"></a>四、MVP</h4><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br><img src="http://oj056g1gy.bkt.clouddn.com/6.png" alt></p><ol><li><p>各部分之间的通信，都是双向的。</p></li><li><p>View 与 Model 不发生联系，都通过 Presenter 传递。</p></li><li><p>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</p></li></ol><h4 id="五、MVVM"><a href="#五、MVVM" class="headerlink" title="五、MVVM"></a>五、MVVM</h4><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。<br><img src="http://oj056g1gy.bkt.clouddn.com/7.png" alt></p><p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和 Ember 都采用这种模式。</p><blockquote><footer><strong>转载</strong><cite><a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="noopener">www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html</a></cite></footer></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node学习笔记</title>
      <link href="/2017/01/20/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/01/20/Node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>1.exports和module.exports的区别：<br>  module.exports的初始值是一个空对象{};<br>  exports指向module.exports<br>  require()返回的module.exports而不是exports<br><a id="more"></a><br>2.express中的中间件：<br>所谓中间件，就是在收到请求后和发送响应之前这个阶段执行的一些函数。<br>参考这篇博客，写的非常好，通俗易懂<a href="http://blog.csdn.net/foruok/article/details/47354737" target="_blank" rel="noopener">http://blog.csdn.net/foruok/article/details/47354737</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3 手动配置Nodejs环境</title>
      <link href="/2017/01/20/Sublime3-%E9%85%8D%E7%BD%AEnodejs%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/01/20/Sublime3-%E9%85%8D%E7%BD%AEnodejs%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>用了几天命令行，感觉挺麻烦的，因为常用sublime3开发，就想能不能在sublime3中配置一个运行nodejs的环境，果然有很多这方面的教程，参考后手动配置了nodejs环境，下面是配置过程：<br><a id="more"></a><br>1.首先在github上下载该包<img src="https://github.com/tanepiper/SublimeText-Nodejs" alt="https://github.com/tanepiper/SublimeText-Nodejs">解压后放到sublimeText3的Packages目录下</p><p>2.接下来修改配置文件，打开刚才复制进去的文件夹中，找到Nodejs.sublime-settings文件，打开后修改两个地方：<br><code>&quot;node_command&quot;</code><br><code>&quot;npm_command&quot;</code><br>修改后文件中的代码：</p><pre><code>{  // save before running commands  &quot;save_first&quot;: true,  // if present, use this command instead of plain &quot;node&quot;  // e.g. &quot;/usr/bin/node&quot; or &quot;C:\bin\node.exe&quot;  &quot;node_command&quot;: &quot;D:\\Program Files\\nodejs\\node.exe&quot; ,  // Same for NPM command  &quot;npm_command&quot;: &quot;D:\\Program Files\\nodejs\\npm.cmd&quot;,  // as &#39;NODE_PATH&#39; environment variable for node runtime  &quot;node_path&quot;: false,  &quot;expert_mode&quot;: false,  &quot;ouput_to_new_tab&quot;: false}</code></pre><p>同样，在这个文件夹中找到Nodejs.sublime-build文件，打开修改两个地方：<br>第一：<code>&quot;encoding&quot;: &quot;utf8&quot;</code><br>第二：”windows”中的<code>&quot;cmd&quot;: [&quot;taskkill&quot;,&quot;/F&quot;, &quot;/IM&quot;, &quot;node.exe&quot;,&quot;&amp;&quot;,&quot;node&quot;, &quot;$file&quot;]</code></p><pre><code>{  &quot;cmd&quot;: [&quot;node&quot;, &quot;$file&quot;],  &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,  &quot;selector&quot;: &quot;source.js&quot;,  &quot;shell&quot;:true,  &quot;encoding&quot;: &quot;utf8&quot;,  &quot;windows&quot;:    {        &quot;cmd&quot;: [&quot;taskkill&quot;,&quot;/F&quot;, &quot;/IM&quot;, &quot;node.exe&quot;,&quot;&amp;&quot;,&quot;node&quot;, &quot;$file&quot;]    },  &quot;linux&quot;:    {        &quot;cmd&quot;: [&quot;killall node; node $file&quot;]    },    &quot;osx&quot;:    {        &quot;cmd&quot;: [&quot;killall node; node $file&quot;]    }}</code></pre><p>3.测试<br>新建一个test.js文件，输入<code>console.log(&quot;success!&quot;)</code><br><code>Ctrl+B</code>编译一下，就能看到输出的内容<br><img src="http://oj056g1gy.bkt.clouddn.com/sublimit.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs小问题：express不是内部或外部命令</title>
      <link href="/2017/01/20/NodeJs%E5%B0%8F%E9%97%AE%E9%A2%98%EF%BC%9Aexpress%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/01/20/NodeJs%E5%B0%8F%E9%97%AE%E9%A2%98%EF%BC%9Aexpress%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1.nodejs安装之后就需要安装express,使用熟悉的npm install -g express命令安装,但是,安装成功之后居然提示express不是内部或外部命令.<br><a id="more"></a></p><p><img src="http://oj056g1gy.bkt.clouddn.com/024f78f0f736afc3137f86e1b119ebc4b64512c6.jpg" alt><br><img src="http://oj056g1gy.bkt.clouddn.com/express-v.jpg" alt></p><ol start="2"><li><p>为什么会这样子呢?当我们找到安装后的express目录发现比之前熟悉的express少了很多东西,原来,最新express4.0版本中将命令工具分家出来了<a href="&quot;https://github.com/expressjs/generator&quot;">项目地址</a>,所以我们还需要安装一个命令工具,命令如下:</p><p> npm install -g express-generator</p></li></ol><p><img src="http://oj056g1gy.bkt.clouddn.com/express-generation.png" alt></p><p>3.既然安装好了我们就要测试一下新安装的express到底可不可以使用<br>于是我使用express创建一个工程:</p><pre><code>express helloworld</code></pre><p>新版本中命令发生了一些改变, 创建好project之后还需要用npm进行添加依赖和启动:</p><pre><code>cd helloworldnpm installnpm start</code></pre><p>然后新创建的helloworld就已经运行在3000端口上.<br><img src="http://oj056g1gy.bkt.clouddn.com/express%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg" alt></p><p>4.访问<a href="http://localhost:3000/就看到熟悉的页面了" target="_blank" rel="noopener">http://localhost:3000/就看到熟悉的页面了</a><br><img src="http://oj056g1gy.bkt.clouddn.com/express3000.png" alt></p><p>5.以及创建出来的目录效果<br><img src="http://oj056g1gy.bkt.clouddn.com/express%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E6%95%88%E6%9E%9C.png" alt></p><p>转载：<a href="&quot;http://www.cnblogs.com/wmkf/articles/3913215.html&quot;">http://www.cnblogs.com/wmkf/articles/3913215.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs入门案例</title>
      <link href="/2017/01/01/NodeJs%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
      <url>/2017/01/01/NodeJs%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>刚开始接触nodejs，看了nodejs入门指南，根据上面的例子实现了一个特别简单的图片上传功能.<br>文件目录：<br>nodeTest<br>–index.js<br><a id="more"></a><br>–server.js<br>–route.js<br>–requestHandlers.js</p><p>下面是代码：</p><pre><code>&lt;!--index.js--&gt;var server = require(&#39;./server&#39;);var route = require(&#39;./route&#39;);var requestHandlers = require(&#39;./requestHandlers&#39;);var handle = {}handle[&quot;/&quot;] = requestHandlers.start;handle[&quot;/start&quot;] = requestHandlers.start;handle[&quot;/upload&quot;] = requestHandlers.upload;handle[&quot;/show&quot;] = requestHandlers.show;server.start(route.route,handle);</code></pre><pre><code>&lt;!--server.js--&gt;var http = require(&quot;http&quot;);var url = require(&quot;url&quot;);function start(route,handle){    http.createServer(function(request,response){        var pathname = url.parse(request.url).pathname;        console.log(&quot;Request for &quot;+pathname+&quot; received.&quot;);        route(pathname,handle,response,request);       }).listen(8888);    console.log(&quot;Server has started.&quot;);}exports.start=start;</code></pre><pre><code>&lt;!--route.js--&gt;function route(pathname,handle,response,request){    console.log(pathname,handle);    if(typeof handle[pathname] === &#39;function&#39;){        return handle[pathname](response,request);    }else{        console.log(&quot;No reuest handle found for &quot;+pathname)        response.writeHead(404,{&quot;Content-Type&quot;:&quot;text/plain; charset=&#39;utf-8&#39;&quot;});        response.write(&quot;404 Not Found&quot;);    }}exports.route = route;</code></pre><pre><code>&lt;!--srequestHandlers--&gt;var exec = require(&quot;child_process&quot;).exec;var querystring = require(&quot;querystring&quot;);var formidable = require(&quot;formidable&quot;);var fs = require(&quot;fs&quot;);var util = require(&quot;util&quot;);function start(response,request){    console.log(&quot;Request handler &#39;start&#39; was called&quot;);    var body = &#39;&lt;html&gt;&#39;+    &#39;&lt;head&gt;&#39;+    &#39;&lt;meta http-equiv=&quot;Content-Type&quot; &#39;+    &#39;content=&quot;text/html; charset=UTF-8&quot; /&gt;&#39;+    &#39;&lt;/head&gt;&#39;+    &#39;&lt;body&gt;&#39;+    &#39;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &#39;+    &#39;method=&quot;post&quot;&gt;&#39;+    &#39;&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&#39;+    &#39;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&#39;+    &#39;&lt;/form&gt;&#39;+    &#39;&lt;/body&gt;&#39;+    &#39;&lt;/html&gt;&#39;;    response.writeHead(200,{&quot;Content-Type&quot;:&quot;text/html&quot;});    response.write(body);    response.end();}function upload(response,request){    console.log(&quot;Request handler &#39;upload&#39; was called&quot;);    var form = new formidable.IncomingForm();    form.uploadDir = &quot;G:\\tmp&quot;;    console.log(&quot;abliut to parse&quot;);    form.parse(request,function(error,fields,files){        console.log(&quot;parsing done&quot;);        fs.renameSync(files.upload.path,&quot;G:\\tmp\\test.png&quot;);        response.writeHead(200,{&quot;Content-Type&quot;:&quot;text/html&quot;});        response.write(&quot;received image:&lt;br/&gt;&quot;);        response.write(&quot;&lt;img src=&#39;/show&#39; /&gt;&quot;);        response.end();        });}function show(response){    console.log(&quot;Request handler &#39;show&#39; was called&quot;);    fs.readFile(&quot;G:\\tmp\\test.png&quot;,&quot;binary&quot;,function(error,file){        if(error){            response.writeHead(500,{&quot;Content-Type&quot;:&quot;text/plain&quot;});            response.write(error+&quot;\n&quot;);            response.end();        }else{            response.writeHead(200,{&quot;Content-Type&quot;:&quot;image/png&quot;});            response.write(file,&quot;binary&quot;);            response.end();        }    })}exports.start = start;exports.upload = upload;exports.show = show;</code></pre><p>踩坑：<br>1.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法学习</title>
      <link href="/2016/12/31/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2016/12/31/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1 标题"></a>1 标题</h4><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre><code>一级标题===二级标题---# 一级标题## 二级标题### 三级标题...</code></pre><a id="more"></a><h4 id="2-列表"><a href="#2-列表" class="headerlink" title="2 列表"></a>2 列表</h4><h5 id="无序列表示例"><a href="#无序列表示例" class="headerlink" title="无序列表示例"></a>无序列表示例</h5><pre><code>&lt;!-- 无序列表,这三种写法效果相同 --&gt;* 红* 绿* 蓝+ 红+ 绿+ 蓝- 红- 绿- 蓝</code></pre><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><ul><li>红</li><li>绿</li><li>蓝</li></ul><ul><li>红</li><li>绿</li><li>蓝</li></ul><ul><li>红</li><li>绿</li><li>蓝</li></ul><h5 id="有序列表示例"><a href="#有序列表示例" class="headerlink" title="有序列表示例"></a>有序列表示例</h5><pre><code>&lt;!-- 有序列表 --&gt;1. 红2. 绿3. 蓝&lt;!-- 列表项目包含段落 --&gt;1. This is a list item with two paragraphs. Lorem ipsum dolor   sit amet, consectetuer adipiscing elit. Aliquam hendrerit   mi posuere lectus.2. This is a list item with two paragraphs. Lorem ipsum dolor   sit amet, consectetuer adipiscing elit. Aliquam hendrerit   mi posuere lectus.</code></pre><h5 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h5><ol><li>红</li><li>绿</li><li>蓝</li></ol><ol><li>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</li><li>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</li></ol><h4 id="3-代码"><a href="#3-代码" class="headerlink" title="3 代码"></a>3 代码</h4><h5 id="3-1-代码行"><a href="#3-1-代码行" class="headerlink" title="3.1 代码行"></a>3.1 代码行</h5><p>在Markdown中建立代码区块非常简单，只需要一个制表符或者四个空格,显示时制表符和空格会自动删除。</p><h6 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h6><pre><code>`    使用四个空格生成代码行`</code></pre><h6 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h6><pre><code>使用四个空格生成代码行</code></pre><h5 id="3-2-代码块"><a href="#3-2-代码块" class="headerlink" title="3.2 代码块"></a>3.2 代码块</h5><p>我们可以使用一个`包裹行内代码块，使用三个`包裹多行代码块。</p><h6 id="行内代码块示例"><a href="#行内代码块示例" class="headerlink" title="行内代码块示例"></a>行内代码块示例</h6><pre><code>`使用一个反引号生成行内代码块`</code></pre><h6 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h6><p><code>使用一个反引号生成行内代码块</code></p><h6 id="多行代码块示例"><a href="#多行代码块示例" class="headerlink" title="多行代码块示例"></a>多行代码块示例</h6><p>```<br>function test(){<br>    alert(“test”);<br>}<br>```</p><h6 id="效果-4"><a href="#效果-4" class="headerlink" title="效果"></a>效果</h6><pre><code>function test(){    alert(&quot;test&quot;);}</code></pre><h4 id="4-引用"><a href="#4-引用" class="headerlink" title="4 引用"></a>4 引用</h4><p>如果需要引用别处的句子可以用&gt;符号</p><h5 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h5><pre><code>&gt; 春眠不觉晓&gt; 处处闻啼鸟&gt;&gt; 夜来风雨声&gt;&gt; 花落知多少</code></pre><h5 id="效果-5"><a href="#效果-5" class="headerlink" title="效果"></a>效果</h5><blockquote><p>春眠不觉晓<br>处处闻啼鸟</p><blockquote><p>夜来风雨声<br>花落知多少</p></blockquote></blockquote><h4 id="5-链接"><a href="#5-链接" class="headerlink" title="5 链接"></a>5 链接</h4><p>markdow有两种形式的链接：行内式和参考式</p><h5 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h5><p><code>[要显示的链接名](连接地址 &quot;鼠标移上去显示的title&quot;)</code>;</p><h6 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h6><pre><code>这是一个[百度](http://www.baidu.com &quot;百度&quot;)行内链接</code></pre><h6 id="效果-6"><a href="#效果-6" class="headerlink" title="效果"></a>效果</h6><p>这是一个<a href="http://www.baidu.com" title="百度" target="_blank" rel="noopener">百度</a>行内链</p><h5 id="同一主机"><a href="#同一主机" class="headerlink" title="同一主机"></a>同一主机</h5><p>如果要链接到同一主机的资源，你可以使用相对路径</p><h6 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h6><pre><code>链接到主机[关于我](/aubout/)使用相对路径</code></pre><h6 id="效果-7"><a href="#效果-7" class="headerlink" title="效果"></a>效果</h6><p>链接到主机<a href="/aubout/">关于我</a>使用相对路径</p><h5 id="参考式"><a href="#参考式" class="headerlink" title="参考式"></a>参考式</h5><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断.</p><h6 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h6><pre><code>&lt;!--这是一个[百度][id]参考式链接--&gt;[id]: http://www.baidu.com</code></pre><h6 id="效果-8"><a href="#效果-8" class="headerlink" title="效果"></a>效果</h6><p>这是一个[百度][id]参考式链接<br>[id]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a></p><h5 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h5><p>用&lt;&gt;括起来，就会自动转换成链接。</p><h6 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h6><pre><code>&lt;http://www.baidu.com/&gt;</code></pre><h6 id="效果-9"><a href="#效果-9" class="headerlink" title="效果"></a>效果</h6><p><a href="http://www.baidu.com/" target="_blank" rel="noopener">http://www.baidu.com/</a></p><h4 id="6-强调"><a href="#6-强调" class="headerlink" title="6 强调"></a>6 强调</h4><p>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号,被 </em> 或 _ 包围的字词会被转成用 <em> 标签包围,用两个 *或_包起来的话，则会被转成 <strong>标签。</strong></em></p><h5 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h5><pre><code>&lt;!-- 斜体 --&gt;*我会被转成em标签* _me too_&lt;!-- 粗体 --&gt;**我会被转成strong标签**__me to__</code></pre><h5 id="效果-10"><a href="#效果-10" class="headerlink" title="效果"></a>效果</h5><p><em>我会被转成em标签</em><br><em>me too</em></p><p><strong>我会被转成strong标签</strong><br><strong>me to</strong></p><p>注：如果要插入普通的星号和下划线可以使用反斜线* 和反斜线 _,Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:center">代码</th><th style="text-align:right">效果</th></tr></thead><tbody><tr><td style="text-align:left">\</td><td style="text-align:center"><code>\\</code></td><td style="text-align:right">\</td></tr><tr><td style="text-align:left">`</td><td style="text-align:center"><code>\</code>`</td><td style="text-align:right">`</td></tr><tr><td style="text-align:left">*</td><td style="text-align:center"><code>\*</code></td><td style="text-align:right">*</td></tr><tr><td style="text-align:left">_</td><td style="text-align:center"><code>\_</code></td><td style="text-align:right">_</td></tr><tr><td style="text-align:left">{</td><td style="text-align:center"><code>\{</code></td><td style="text-align:right">{</td></tr><tr><td style="text-align:left">[</td><td style="text-align:center"><code>\[</code></td><td style="text-align:right">[</td></tr><tr><td style="text-align:left">(</td><td style="text-align:center"><code>\(</code></td><td style="text-align:right">(</td></tr><tr><td style="text-align:left">#</td><td style="text-align:center"><code>\#</code></td><td style="text-align:right">#</td></tr><tr><td style="text-align:left">+</td><td style="text-align:center"><code>\+</code></td><td style="text-align:right">+</td></tr><tr><td style="text-align:left">-</td><td style="text-align:center"><code>\-</code></td><td style="text-align:right">-</td></tr><tr><td style="text-align:left">.</td><td style="text-align:center"><code>\.</code></td><td style="text-align:right">.</td></tr><tr><td style="text-align:left">!</td><td style="text-align:center"><code>\!</code></td><td style="text-align:right">!</td></tr></tbody></table><h5 id="特殊字符转换"><a href="#特殊字符转换" class="headerlink" title="特殊字符转换"></a>特殊字符转换</h5><pre><code>&lt;!-- 普通星号和反斜线 --&gt; \*\_</code></pre><h4 id="7-分割线"><a href="#7-分割线" class="headerlink" title="7 分割线"></a>7 分割线</h4><h5 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h5><pre><code>**** * * - - -</code></pre><h5 id="效果-11"><a href="#效果-11" class="headerlink" title="效果"></a>效果</h5><hr><hr><hr><h4 id="8-图片"><a href="#8-图片" class="headerlink" title="8 图片"></a>8 图片</h4><p>Markdown 使用和链接很相似的语法来标记图片，同样也允许两种样式：行内式和参考式。</p><h5 id="行内式的图片示例"><a href="#行内式的图片示例" class="headerlink" title="行内式的图片示例"></a>行内式的图片示例</h5><pre><code>![头像](/images/avatar.gif)![头像](/images/avatar.gif &quot;Optional title&quot;)</code></pre><h5 id="效果-12"><a href="#效果-12" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/avatar.gif" alt="头像"><br><img src="/images/avatar.gif" alt="头像" title="Optional title"><br>详细叙述如下：<br>一个叹号 ! 接着一个方括号[]，里面放上图片的替代文字(alt)<br>接着一个普通括号()，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 文字。</p><!--参考式的图片语法--><pre><code>![name][id]「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</code></pre><h5 id="参考式图片示例"><a href="#参考式图片示例" class="headerlink" title="参考式图片示例"></a>参考式图片示例</h5><pre><code>![头像][id][id]: /images/avatar.gif  &quot;Optional title attribute&quot;</code></pre><h5 id="效果-13"><a href="#效果-13" class="headerlink" title="效果"></a>效果</h5><p>![头像][id]<br>[id]: /images/avatar.gif  “Optional title attribute”<br>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p><h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><p>1.标题后面必须加一个空格。<br>2.必须按照标题大小的顺序写才能正确的生成目录，如果大标题用<code>#</code>,小标题直接用<code>###</code>目录会混乱，用<code>#</code>后接下来应该用<code>##</code>才会准确的生成文章目录。<br>3.生成表格前要加一个空行</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><h5 id="markdown中使用echarts"><a href="#markdown中使用echarts" class="headerlink" title="markdown中使用echarts"></a>markdown中使用echarts</h5><p>在markdown中使用echarts，有已经写好的hexo插件，直接拿来用</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>tag<span class="token operator">-</span>charts3 <span class="token operator">--</span>save</code></pre><p>这个插件似乎已经很久不更新了，插件中的echarts版本比较旧，下载到项目之后，可以手动的进行echarts版本更新，进入项目的node_modules/hexo-tag-echarts3/template.html中，将echarts的引用版本替换成新版echarts即可，我用的bootstrap的cdn，<a href="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js" target="_blank" rel="noopener">https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts-en.common.js</a></p><h5 id="markdown中引用变量"><a href="#markdown中引用变量" class="headerlink" title="markdown中引用变量"></a>markdown中引用变量</h5>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a><span class="header">个人信息</span></h2><ul><li>孙佳丽 / 女 / 1994</li><li><span class="span_100">电话/微信：</span>18506576297 / sunjl97</li><li><p><span class="span_100">Email：</span><a href="mailto:1217304483@qq.com" target="_blank" rel="noopener">1217304483@qq.com</a></p></li><li><p><span class="span_100">教育经历：</span>本科 / 河南科技学院-计算机科学与技术(2013 年~2017 年)</p></li><li><span class="span_100">工作年限：</span>7 年</li><li><span class="span_100">期望职位：</span>Web 前端开发</li><li><p><span class="span_100">期望城市：</span>杭州</p></li><li><p><span class="span_100">技术博客：</span><a href="http://sunjl729.cn"><font color="#EF7060">http://sunjl729.cn</font></a></p></li><li><span class="span_100">Github：</span><a href="https://github.com/ForeveHG" target="_blank" rel="noopener"><font color="#EF7060">https://github.com/forevehg</font></a></li></ul><h2 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a><span class="header">技能清单</span></h2><h3 id="熟练的技能"><a href="#熟练的技能" class="headerlink" title="熟练的技能"></a>熟练的技能</h3><ul><li><span class="span_100">Web 开发：</span>Html / Css / Javascript</li><li><span class="span_100">前端框架：</span>Vue2 / Vue3</li><li><span class="span_100">小程序：</span>微信小程序原生 / uni-app</li><li><span class="span_100">前端UI库：</span>Element / iView / Ant-Design / Vant</li><li><span class="span_100">前端工程化：</span>Webpack / Vite / TypeScript / Sass / Less / Stylus / Tailwind</li><li><span class="span_100">版本管理：</span>Git</li><li><span class="span_100">其他：</span>Echarts / Photoshop</li></ul><h3 id="了解的技能"><a href="#了解的技能" class="headerlink" title="了解的技能"></a>了解的技能</h3><ul><li>React / React Native / Electron / Node / Express / Koa2 / Nuxt / QianKun / Superset / JinJia2 / D3.js</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a><span class="header">工作经历</span></h2><h3 id="杭州微医集团有限公司（2021-年-8-月-2025-年-3-月）"><a href="#杭州微医集团有限公司（2021-年-8-月-2025-年-3-月）" class="headerlink" title="杭州微医集团有限公司（2021 年 8 月 ~ 2025 年 3 月）"></a><span class="project-name">杭州微医集团有限公司（2021 年 8 月 ~ 2025 年 3 月）</span></h3><h4 id="慢病一体化管理平台"><a href="#慢病一体化管理平台" class="headerlink" title="慢病一体化管理平台"></a>慢病一体化管理平台</h4><ul><li>项目背景：该项目以区域内居民健康档案为基础，实现慢病的全流程管理，包括居民慢病筛查，慢病签约、慢病全周期管理等内容</li><li>工作内容：<ul><li>负责慢病管理健管师PC端、患者小程序端、公众号H5页面的开发</li><li>使用 Vue3，Vite，Vue-Router，Element-Plus，Echarts，Vant，uni-app，等技术</li><li>设计和实现基于RBAC模型的通用权限管理系统，标准化权限管理</li><li>实现通过配置生成各类慢病档案和慢病随访表单，提高开发效率</li></ul></li></ul><h4 id="齐鲁保"><a href="#齐鲁保" class="headerlink" title="齐鲁保"></a>齐鲁保</h4><ul><li>项目背景：该项目是济南城市定制的商业医疗保险产品，已成功运营和维护三年</li><li>工作内容：<ul><li>负责投保H5页面、商保搭建平台、保司后台等系统开发和维护</li><li>使用集团SSR脚手架搭建保险C端项目，使用Vue2，Vuex，Vue-Router，Vant等技术</li><li>实现通过页面配置组件直接生成投保H5页面、预览投保页，减少开发工作量</li><li>封装和维护搭建商业保险页面所需的公共基础组件和业务组件</li></ul></li></ul><h4 id="云HIS系统"><a href="#云HIS系统" class="headerlink" title="云HIS系统"></a>云HIS系统</h4><ul><li>项目背景：该项目是一套标准化的医疗信息管理系统，涵盖了体检、门诊、住院、药房药库等医疗机构的业务全流程，上线后累计接入20+医疗机构</li><li>工作内容：<ul><li>负责云HIS挂号登记、医生接诊、开方、收费、发药等功能模块</li><li>使用 Vue2，Vuex，Vue-Router，Element-UI， QianKun等技术</li><li>封装医保接入流程，成功接入多个省市的医保</li></ul></li></ul><h3 id="杭州浮云网络科技（2020-年-6-月-2021-年-8-月）"><a href="#杭州浮云网络科技（2020-年-6-月-2021-年-8-月）" class="headerlink" title="杭州浮云网络科技（2020 年 6 月 ~ 2021 年 8 月）"></a><span class="project-name">杭州浮云网络科技（2020 年 6 月 ~ 2021 年 8 月）</span></h3><h4 id="斗地主牌库系统"><a href="#斗地主牌库系统" class="headerlink" title="斗地主牌库系统"></a>斗地主牌库系统</h4><ul><li>项目背景: 该项目为斗地主业务提供牌库支持</li><li>工作内容: <ul><li>独立负责前端开发</li><li>使用 Umi 搭建项目，使用React，TypeScript，Ant-Design 等技术</li><li>实现通过页面配置生成斗地主牌方案</li><li>封装web端斗地主的对局流程，实现牌局回放、牌局标注、残局试打等功能</li></ul></li></ul><h4 id="伏羲平台-独立开发"><a href="#伏羲平台-独立开发" class="headerlink" title="伏羲平台-独立开发"></a>伏羲平台-独立开发</h4><ul><li>项目背景: 该项目是一个BI可视化平台</li><li>工作内容: <ul><li>基于superset开源项目进行二次开发</li><li>使用 React，Echarts，D3JS，JinJia2 等技术</li><li>实现模板⻚面修改，可视化图表开发，新增图例，开发定制化大屏</li><li>阅读superset的源码，了解大型开源项目的架构，对日后的工作很有帮助</li></ul></li></ul><h3 id="杭州通明文化传媒有限公司（2017-年-6-月-2020-年-6-月）"><a href="#杭州通明文化传媒有限公司（2017-年-6-月-2020-年-6-月）" class="headerlink" title="杭州通明文化传媒有限公司（2017 年 6 月 ~ 2020 年 6 月）"></a><span class="project-name">杭州通明文化传媒有限公司（2017 年 6 月 ~ 2020 年 6 月）</span></h3><h4 id="舆情监测平台-舆情助手小程序"><a href="#舆情监测平台-舆情助手小程序" class="headerlink" title="舆情监测平台/舆情助手小程序"></a>舆情监测平台/舆情助手小程序</h4><ul><li>项目背景: 该项目的中后台系统用于收集和监测网络舆情信息，支持将近 20 个主流社交平台，每个平台提供特定的舆情分析，正负面判断，舆情维护，统计等功能；小程序的主要功能为收集用户的舆情监测计划、生成舆情报告、推送重点舆情等</li><li>工作内容: <ul><li>负责舆情监测、舆情维护、项目统计模块开发，独立负责舆情助手小程序开发</li><li>使用 Vue，Vuex，Vue-Router，Element-UI，Echarts，微信小程序原生等技术</li><li>封装小程序导航栏，日期选择，Tab切换等公共组件</li><li>按舆情平台将业务操作和展示差异封装为策略类，提高了新增或者下架平台时的开发效率</li></ul></li></ul><h2 id="开源项目和作品"><a href="#开源项目和作品" class="headerlink" title="开源项目和作品"></a><span class="header">开源项目和作品</span></h2><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><ul><li><a href="https://github.com/ForeveHG/XiaoShiTang" target="_blank" rel="noopener"><font color="#EF7060">小食堂</font></a>：使用 React Native + Mobx 实现的美食资讯类 APP</li><li><a href="https://github.com/ForeveHG/vue-live2d-model" target="_blank" rel="noopener"><font color="#EF7060">vue-live2d-model</font></a>：实现在 vue 中添加 live2d</li><li><a href="https://github.com/ForeveHG/wechat-applet-word-cloud" target="_blank" rel="noopener"><font color="#EF7060">wechat-applet-word-cloud</font></a>：在原生微信小程序中使用 wordcloud2.js 以及一些 demo</li></ul><h3 id="技术文章"><a href="#技术文章" class="headerlink" title="技术文章"></a>技术文章</h3><ul><li><a href="http://sunjl729.cn/2021/05/28/vue-loader%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/"><font color="#EF7060">vue-loader都做了些什么</font></a></li><li><a href="http://sunjl729.cn/2019/10/20/%E4%B8%BA%E4%BA%86%E5%BC%84%E6%98%8E%E7%99%BDPromise%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/"><font color="#EF7060">写一个 Promise</font></a></li><li><a href="https://forevehg.github.io/2019/11/27/%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B9%8Bflex%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener"><font color="#EF7060">弹性盒模型之 flex 属性</font></a></li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a><span class="header">致谢</span></h2><p>最后要感谢您花时间阅读我的简历，期待能有机会和您共事。</p><style>   body {    line-height: 1.75;    color: #323232;    font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light;    letter-spacing: 2px;    /* background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); */    background-size: 20px 20px;    background-position: center center;   }   hr {      height: 1px;      padding: 0;      border: none;      border-top: 1px solid rgba(239, 112, 96, 0.5);   }   h2 {      color: #323232;      margin: 1em auto;      border-bottom: 2px solid rgb(239, 112, 96);   }   .header {      display: inline-block;      border-bottom: 2px solid rgb(239, 112, 96);   }   .project-name {      font-weight: 500;      padding-left: 10px;      border-left: 3px solid rgb(239, 112, 96);   }   .highlight {      font-weight: 500;      font-size: 15px;      color: rgb(239, 112, 96);      a {         color: rgb(239, 112, 96);      }   }   ul {      padding-inline-start: 30px;   }   .span_100 {      /* color: blue; */      display: inline-block;      width: 100px;   }</style>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>写写刚走出校门的这两个多月</title>
      <link href="/cache/%E5%86%99%E5%86%99%E5%88%9A%E8%B5%B0%E5%87%BA%E6%A0%A1%E9%97%A8%E7%9A%84%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%9C%88.html"/>
      <url>/cache/%E5%86%99%E5%86%99%E5%88%9A%E8%B5%B0%E5%87%BA%E6%A0%A1%E9%97%A8%E7%9A%84%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%9C%88.html</url>
      
        <content type="html"><![CDATA[<p>五月初答辩结束后，开始在网上投简历，那时候特别迷茫，完全不知道下一步该去哪儿，只确定了一点，绝不回家。来杭州的决定其实纯属偶然，现在想想是自己的冲动吧，只因为投了很多简历却没有反应，在五月底的一天突然收到杭州一家公司的面试邀请，让我当天下午就过去面试，<a id="more"></a> 石沉大海的简历终于有所反应让我瞬间有些激动，心里生出了想来试一试的冲动，就这样我跟公司约好了下周一面试，也就是三天后。<br>我在当天晚上就买好了火车票，当时的想法简单，只是去面试一下试试，不行了再回学校来，我连东西都没有收拾，想背着一个小包就直接过去，可是室友的一番话惊醒了我，她说我们要毕业了，你去了还有回来的必要么，我们能在学校的时间不多了。是啊，我冷静下来，在学校的最后一些时间，还有很多杂事要处理，导师时不时还要找我们过去补些毕业前必须交齐的材料，何况6月8号，大四的宿舍就封了，我去了，什么时候回来呢？<br>在一番思索后，我决定把学校的事情处理好之后，直接去杭州，之后几天，和几个还未离开的舍友把大家的书整理好卖掉，把一些还能用又带不走的东西拿到宿舍楼下，楼下是由我们这一届大四毕业生搞起来的二手市场，把这些东西友情价的卖给学弟学妹们，再把一些能寄到家的东西打包邮回家，送一些人走，再被一些人送走，我的大学生活就这样结束了。<br>写到这里我眼睛里还是有了点儿泪，到底我作为女生，还是太容易掉眼泪。<br>到杭州之后，住在一个高中同学这里，是很好的朋友，一直都有联系，因为有她的帮助，我的初来乍到没有经历什么艰辛，就是穷，有一天手机欠费了，我连充话费的十块钱都凑不够，从微信红包上转了5块，银行卡的最后余额还有3块，我却想不到哪儿还有钱了。在这个时候刚好我大学的上铺跟我聊天，她还在她实习的公司工作，已经转正，她问我现在还有钱么，我嘴硬了两句，就跟她说了实话，我们都刚刚还完学校的学费贷款，不然我也不至于这么穷，她比我稍好，当时给我转了500块钱，才让我能继续生活。<br>找工作还算顺利，一天差不多总有一个面试的机会，有遇见很奇葩的，一群男生光着膀子在一个三居室里算是创业吧， 吃住一起，我进去后什么也不问我，直接说我这里有个问题，你看看原因，我第一次经历这样的事情，有点儿懵，我看了看他是说四个字体图标，有一个图标不会显示，让我把这个图标显示出来，我之前自己做些东西没用到字体图标，只是有些了解，还好看了一会儿之后知道怎么回事儿之后就给它改好了，他就让我到旁边去谈，还是说我没有经验不能直接上手干活对公司价值不大，然后又说他们现在创业阶段，要是我想要这工作也可以接受我试试，就是没有工资，管吃，我听了就明确的拒绝了，我虽然想快点儿找到工作，但还是不能接受没有工资的工作。还有一个让我后怕的是一个跟最近李文星事件很像的经历，同样也是电话面试，面试之后说等通知，然后告诉我公司在天津有一个项目需要我去出差两个月，两个月后再回到杭州来，我一听天津就心生警惕，因为还在学校时，就听老师说有几个上一届学长就是被骗到天津去传销，我留了个心眼跟他说我考虑一下就挂了电话，在宿舍的群里聊天的时候，跟她们说起这事儿，宿舍长竟然说她遇到了跟我一样的套路，我们两个一对，立马觉得这一定是传销，第二天他又给我打电话的时候，我直接跟他说我已经找到工作了，不会再去天津，直到看到李文星的事情时，我心里一阵后怕，还好当时足够警惕，还好虽然急于找工作但还很理智。<br>就这样找了差不多半个月，来到了现在的公司里，说起来感觉当时面试时自己的表现并不好，出门后心态也很平和，还很高兴的想着这个公司离住的地方挺近，骑自行车就可以回去了，就一路走着一路找着小黄车，没想到小黄车没找到公司的电话就来了，是人事姐姐的，直接说面试通过了，问我什么时候能上班，我一瞬间有些懵，恩恩啊啊的应着就说了一个日子，挂了电话然意识到，我找到工作了。当时也没想过什么条件，什么也没想，只觉得有个工作就好，其他都好说，幸运的是，离住的地方近，除了单休之外一切都挺好，我开始上班了。<br>工作算不上忙，只是刚开始做前端，我也没有前端的工作经验，有些手忙脚乱，在适应了一个星期后就习惯了这样的生活，陆陆续续收到舍友的消息，有辗转几个城市最终回家乡找到工作的，有在父母安排下进了类似事业单位比较安稳的，有在北京从试用期转正的，也有在上海终于确定了工作的，还有至今没有找到仍在努力的，毕业后我们有了不同的选择，或主动或者无奈，但都在自己的路上往前走了。<br>我现在依然后悔我浪费了大学的几年时间，如果能好好学习，一定比现在更加从容，但我也感慨我已经足够幸运，毕业后没有去培训依然找到了自己想找的工作，入了行，虽然也有很困难的时候，但到底因为没有选择培训身上没有背上贷款，在大学四年里，通过助学金，奖学金，寒暑假打工，做兼职，在网络中心勤工俭学，学费贷款这些，在不问家里要钱的情况下上完的大学，说实话，我用大四实习的工资还上大学学费贷款的时候心里是有一些自豪的，至此我终于做到了在入学前做出的决定，整个大学里，我靠着自己终于过完了，虽然还完之后全身上下也就几百块钱了，但未来的事情未来再说吧，那一刻我就是这样想的。工作后，生活也都走上了正轨，我想着，只要我努力，会越来越好的。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3变化记录</title>
      <link href="/cache/Vue3%E5%8F%98%E5%8C%96%E8%AE%B0%E5%BD%95.html"/>
      <url>/cache/Vue3%E5%8F%98%E5%8C%96%E8%AE%B0%E5%BD%95.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-GlobalAPI"><a href="#1-GlobalAPI" class="headerlink" title="1. GlobalAPI"></a>1. GlobalAPI</h4><p>2.x 中所有 vue 实例共享全局 api 和全局配置，给单元测试造成了困难，3.0 中添加新的全局 api，createApp</p><p><code>Vue.prototype</code>替换成<code>config.globalProperties</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// before - Vue 2</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// after - Vue 3</span><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$http <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以此类推，2.x 中其他挂在 Vue 中的属性都要改为挂在 app(Vue.createApp())上</p><h4 id="2-data"><a href="#2-data" class="headerlink" title="2. data"></a>2. data</h4><p>组件的 data 选项在 vue2.x 时可以定义为对象或函数返回一个对象，在 3.0 中，只接受函数返回对象</p><p>3.0 中组件的 data 与 mixins 或 extends 中的 data 合并时执行浅合并</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Mixin <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span>        id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> CompA <span class="token operator">=</span> <span class="token punctuation">{</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>Mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//vue2.x的结果</span><span class="token punctuation">{</span>  user<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'Jack'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//vue3的结果</span><span class="token punctuation">{</span>  user<span class="token punctuation">:</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-v-model"><a href="#3-v-model" class="headerlink" title="3. v-model"></a>3. v-model</h4><h5 id="1-绑定变化"><a href="#1-绑定变化" class="headerlink" title="1. 绑定变化"></a>1. 绑定变化</h5><p>2.x 默认绑定<br>props -&gt; value,<br>event -&gt; input,</p><p>3.0 改为<br>props -&gt; modelValue,<br>event -&gt; update:modelValue;</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ChildComponent v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"pageTitle"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> would be shorthand <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ChildComponent  <span class="token punctuation">:</span>modelValue<span class="token operator">=</span><span class="token string">"pageTitle"</span>  @update<span class="token punctuation">:</span>modelValue<span class="token operator">=</span><span class="token string">"pageTitle = $event"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h5 id="2-弃用了-sync-修饰符，用-v-model-代替"><a href="#2-弃用了-sync-修饰符，用-v-model-代替" class="headerlink" title="2. 弃用了.sync 修饰符，用 v-model 代替"></a>2. 弃用了.sync 修饰符，用 v-model 代替</h5><h5 id="3-可以在同一个组件上多次使用-v-model"><a href="#3-可以在同一个组件上多次使用-v-model" class="headerlink" title="3. 可以在同一个组件上多次使用 v-model"></a>3. 可以在同一个组件上多次使用 v-model</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ChildComponent v<span class="token operator">-</span>model<span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle"</span> v<span class="token operator">-</span>model<span class="token punctuation">:</span>content<span class="token operator">=</span><span class="token string">"pageContent"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> would be shorthand <span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>ChildComponent  <span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle"</span>  @update<span class="token punctuation">:</span>title<span class="token operator">=</span><span class="token string">"pageTitle = $event"</span>  <span class="token punctuation">:</span>content<span class="token operator">=</span><span class="token string">"pageContent"</span>  @update<span class="token punctuation">:</span>content<span class="token operator">=</span><span class="token string">"pageContent = $event"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><p>可以添加自定义的 v-model 修饰符;</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">v-model.capitalize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pageTitle<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      myText<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'my-component'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    modelValue<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    modelModifiers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'update:modelValue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">emitValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>modelModifiers<span class="token punctuation">.</span>capitalize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:modelValue'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;input    type="text"    :value="modelValue"    @input="emitValue">`</span></span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-v-if-v-for-在同一个元素上使用时优先级"><a href="#4-v-if-v-for-在同一个元素上使用时优先级" class="headerlink" title="4. v-if v-for 在同一个元素上使用时优先级"></a>4. v-if v-for 在同一个元素上使用时优先级</h4><p>2.x 中 v-for 比 v-if 优先级大<br>3.0 中 v-if 始终比 v-for 优先级大</p><h4 id="5-key"><a href="#5-key" class="headerlink" title="5. key"></a>5. key</h4><p>3.0 中 key 值的使用变化</p><h5 id="1-lt-template-gt-标签上可以使用-key"><a href="#1-lt-template-gt-标签上可以使用-key" class="headerlink" title="1. &lt;template&gt; 标签上可以使用 key"></a>1. <code>&lt;template&gt;</code> 标签上可以使用 key</h5><p><code>v-for</code>中可以直接将 key 添加到<code>&lt;template&gt;</code>标签上</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h5 id="2-v-if-v-else-if-v-else"><a href="#2-v-if-v-else-if-v-else" class="headerlink" title="2. v-if,v-else-if,v-else"></a>2. <code>v-if</code>,<code>v-else-if</code>,<code>v-else</code></h5><p><code>v-if</code>,<code>v-else-if</code>,<code>v-else</code>会自动添加唯一的 key 值，如果手动添加，key 值必须唯一</p><h4 id="6-v-bind-的绑定顺序影响渲染结果"><a href="#6-v-bind-的绑定顺序影响渲染结果" class="headerlink" title="6. v-bind 的绑定顺序影响渲染结果"></a>6. v-bind 的绑定顺序影响渲染结果</h4><p>2.x 中 v-bind 的单个属性将始终覆盖对象中的绑定</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: <span class="token punctuation">'</span>blue<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- result --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>3.0 中 v-bind 的绑定顺序决定了如何合并</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: <span class="token punctuation">'</span>blue<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- result --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- template --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: <span class="token punctuation">'</span>blue<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- result --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="7-v-on"><a href="#7-v-on" class="headerlink" title="7. v-on"></a>7. v-on</h4><p>2.x中的<code>native</code>修饰符的作用是监听组件根元素的原生事件<br>3.x中移除了<code>v-on.native</code>修饰符，新增了一个emits选项,参考以下示例：</p><p>child-view.vue文件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#eee</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这样写在点击根元素div时就会自动触发父元素的click事件</span><span class="token comment" spellcheck="true">//emits: ['add', 'click'], 这样写只有在点击span元素时handleClick事件触发,然后通过$emit触发父元素的click事件</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>parent-view.vue</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-view</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">@add</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h4 id="8-事件名称和验证触发的事件"><a href="#8-事件名称和验证触发的事件" class="headerlink" title="8. 事件名称和验证触发的事件"></a>8. 事件名称和验证触发的事件</h4><p>与 props 的属性验证相似，emits 的值为对象时，可以添加事件验证</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'custom-form'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  emits<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// No validation</span>    click<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Validate submit event</span>    submit<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Invalid submit event payload!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">submitForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正常触发</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'submit'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Invalid submit event payload!</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="9-v-for-中-ref"><a href="#9-v-for-中-ref" class="headerlink" title="9. v-for 中 ref"></a>9. v-for 中 ref</h4><p>2.x 中 v-for 的列表中使用 ref 会自动创建一个数组，包含列表中每一项的$ref 属性，但在嵌套的 v-for 中，这一默认行为的含义很模糊</p><p>3.x 中取消了这一默认行为,参考下面的例子</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>setItemRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ item }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      itemRefs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">setItemRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>itemRefs<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>用composition api</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>  <span class="token keyword">import</span> <span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> itemRef <span class="token operator">=</span>  <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> setItemRef <span class="token operator">=</span> <span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> itemRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h4 id="10-函数式组件"><a href="#10-函数式组件" class="headerlink" title="10. 函数式组件"></a>10. 函数式组件</h4><p>2.x中的函数式组件主要有两个使用场景</p><p>—- 优化性能</p><p>—- 多个根节点</p><p>在3.x中，带状态的组件性能已优化，性能方便可以忽略不计，也已经支持多个根节点，所以大多数情况下使用带状态的组件就可以，只有在简单</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>山与山从不相见，人与人总会重逢</title>
      <link href="/cache/%E5%B1%B1%E4%B8%8E%E5%B1%B1%E4%BB%8E%E4%B8%8D%E7%9B%B8%E8%A7%81%EF%BC%8C%E4%BA%BA%E4%B8%8E%E4%BA%BA%E6%80%BB%E4%BC%9A%E9%87%8D%E9%80%A2.html"/>
      <url>/cache/%E5%B1%B1%E4%B8%8E%E5%B1%B1%E4%BB%8E%E4%B8%8D%E7%9B%B8%E8%A7%81%EF%BC%8C%E4%BA%BA%E4%B8%8E%E4%BA%BA%E6%80%BB%E4%BC%9A%E9%87%8D%E9%80%A2.html</url>
      
        <content type="html"><![CDATA[<p>清明节过后一周左右吧，和朋友去了宁波的象山，这是一趟计划了很久的旅程，我叫它毕业旅行。<br><a id="more"></a><br>从杭州坐动车到宁波，再从宁波坐大巴到象山，我在象山涌金广场找到了他们一起散过步的街道，找到了令在中感到疑惑的JJ麻辣烫的店，我走进去吃了一碗麻辣烫，不管他们是否吃过，就假装我get了一个同款吧，我就是想多留点念想，打了滴滴坐到他们住过的酒店，下车时突然刮风下雨，司机又把我扔在半路，伞快要被吹飞，我知道在中来的时候肯定车接车送，哪儿有我这么惨，但我仍忍不住想，我只是从临近的城市来到这里，在中是从另一个国家漂洋过海的来到这里，语言不通，路途也不熟悉，全凭着对一个人的信任就这么过来了，心里就忍不住感动，那天晚上我们四个在一起吃饭聊天，我很想让时间过的再慢一点，可是终究还是要过去，这两天结束的时候我坐在回程的车上，有点儿难过，就这么结束了吧，从此以后再也不喜欢你们了，我要努力过自己的生活了，后悔过吗？其实是有的，但从十四岁到二十四岁，这么多年既是追星也是相互陪伴，很多事情都历历在目，可太细腻的表现情感总觉得很矫情，一百多斤的成年人好像没有资格去悲春伤秋了，何况这是在不曾经历过的人看来根本无法理解的事情，那么就不再说太多了吧，其实本来我也只是想单纯的留下纪念而已。纪念2017年10月11日的久别重逢，纪念我喜欢的你们，纪念我的十年青春，纪念我的梦一场。<br><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205832.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205845.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205837.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205851.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205859.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205815.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205821.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205904.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205908.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509205826.jpg" alt></p><p>下面几张是五一时大学室友从上海过来杭州，一起去西湖时拍下的，感觉有几张照的还可以，也放在这里留个念想。</p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509203145.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509203221.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509203216.jpg" alt></p><p><img src="http://oj056g1gy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180509203225.jpg" alt></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>所谓热爱，一想起就会眼眶发热--读全职高手</title>
      <link href="/cache/%E6%89%80%E8%B0%93%E7%83%AD%E7%88%B1%EF%BC%8C%E4%B8%80%E6%83%B3%E8%B5%B7%E5%B0%B1%E4%BC%9A%E7%9C%BC%E7%9C%B6%E5%8F%91%E7%83%AD-%E8%AF%BB%E5%85%A8%E8%81%8C%E9%AB%98%E6%89%8B.html"/>
      <url>/cache/%E6%89%80%E8%B0%93%E7%83%AD%E7%88%B1%EF%BC%8C%E4%B8%80%E6%83%B3%E8%B5%B7%E5%B0%B1%E4%BC%9A%E7%9C%BC%E7%9C%B6%E5%8F%91%E7%83%AD-%E8%AF%BB%E5%85%A8%E8%81%8C%E9%AB%98%E6%89%8B.html</url>
      
        <content type="html"><![CDATA[<p>从初中开始我就有了看电子书的习惯，那时候是抱着一个滑盖的按键手机，屏幕很小，翻页还是靠音量键的上下键，高中后高一高二时除了上课时间几乎都抱着个手机看电子书，<br><a id="more"></a><br>看的书很杂，都不是什么正儿八经有深度的书，算是娱乐，我不喜欢很多女生喜欢看的霸道总裁，灰姑娘变公主这样套路的言情小说，反而更喜欢看一些男生们看的，类似于坏蛋是怎样炼成的，斗破苍穹这些，好比一个小说阅读网站的男频，更和我胃口点儿，不过我看的最多的是耽美，在高三前看了很多耽美，也有很多喜欢的文，后来上了大学，有了智能手机，更方便了，我却发现很难静下心来看一本小说了，如果白天躺在宿舍里，心里常常会有自责感，所以宁愿自己忙碌起来，在大学四年我反而基本没有完整看完过小说了。<br>全职高手我很早就被人推荐过，只是碍于我并不喜欢玩儿游戏，更不了解网游所以一直不喜欢网游文的原因一直没有去看，在今年四月，全职高手的动漫上线了，我又被基友安利，于是下定决心去看看，这一看就入了坑，在我看来，全职高手的动漫真的可以看做是目前国漫中的精品，无论是情节还是画面，值得一看。<br>全职高手动漫吸引我之后，我决定去看看小说，我一向不喜欢主角叽叽歪歪谈了一整本恋爱的文，更喜欢整本描绘了一个完整的世界，故事有情节，主角有热血的小说，真巧，全职是这样的小说，上班之余，我用了一个月的时间一口气看完了，11M的小说读完最后一页我竟然觉得太短了，是我看过最长的小说，也是我最不舍得看完的小说<br><img src="http://oj056g1gy.bkt.clouddn.com/screenshot_2017_08_06T15_28_41+0801.png" alt="kindle上全职高手的最后一页"><br>全职高手从头到尾，只跟热爱有关，在全职中，我看到了一群人，他们对喜欢的游戏充满热血，哪怕电子竞技人的职业生涯非常有限，他们每个人都为自己热爱的东西拼尽全力。而我呢，我一向是个三分钟热度的人，所以我更加喜欢和羡慕他们，人一生如果能找到自己为之热爱和努力的东西，何其有幸啊。<br>想想自己的行业，很多人吃的都是青春饭，那我能在这一行干多久呢，从大学一直到毕业，我从来没为自己设想过其他的路，我就要写代码，我就要进这一行，现在我不知道自己算不算进来了，勉强入门，那然后呢，就这么一只脚跨进门里，另一只脚还在门外吗，不是的，我想变得更好，我热爱这个东西吗，我想是的。<br><img src="http://oj056g1gy.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170820175828.png" alt><br><img src="http://oj056g1gy.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720170820175835.png" alt><br><img src="http://oj056g1gy.bkt.clouddn.com/IMG_20170820_174318.jpg" alt></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html>    <html>    <head><meta name="generator" content="Hexo 3.9.0">        <meta charset="UTF-8">        <title>&#x8054;&#x7CFB;&#x65B9;&#x5F0F;</title>        <style>/* From extension zhuangtongfa.material-theme */.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body {  box-sizing: border-box;  min-width: 200px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote {  background-color: initial;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  color: initial;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body code {  color: inherit;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre code {  color: initial;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body code > div {  background: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table th, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table td {  border: 1px solid rgba(171, 178, 191, 0.5) !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body.showEditorSelection .code-active-line:before {  border-left: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body.showEditorSelection .code-line:hover:before {  border-left: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body.showEditorSelection .code-line .code-line:hover:before {  border-left: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body p, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dl, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  margin-top: 16px;  margin-bottom: 16px;}/* Generated from 'node_modules/github-markdown-css/github-markdown.css' */@font-face {  font-family: octicons-link;  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==) format("woff");}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body {  -ms-text-size-adjust: 100%;  -webkit-text-size-adjust: 100%;  line-height: 1.5;  color: #abb2bf;  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";  font-size: 16px;  line-height: 1.5;  word-wrap: break-word;  background: #282c34;  padding-top: 20px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-c {  color: #6a737d;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-c1, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-s .pl-v {  color: #005cc5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-e, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-en {  color: #6f42c1;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-smi, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-s .pl-s1 {  color: #24292e;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-ent {  color: #22863a;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-k {  color: #d73a49;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-s, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-pds, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-s .pl-pse .pl-s1, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sr, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sr .pl-cce, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sr .pl-sre, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sr .pl-sra {  color: #032f62;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-v, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-smw {  color: #e36209;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-bu {  color: #b31d28;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-ii {  color: #fafbfc;  background-color: #b31d28;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-c2 {  color: #fafbfc;  background-color: #d73a49;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-c2::before {  content: "^M";}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sr .pl-cce {  font-weight: bold;  color: #22863a;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-ml {  color: #735c0f;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mh, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mh .pl-en, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-ms {  font-weight: bold;  color: #005cc5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mi {  font-style: italic;  color: #24292e;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mb {  font-weight: bold;  color: #24292e;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-md {  color: #b31d28;  background-color: #ffeef0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mi1 {  color: #22863a;  background-color: #f0fff4;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mc {  color: #e36209;  background-color: #ffebda;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mi2 {  color: #f6f8fa;  background-color: #005cc5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-mdr {  font-weight: bold;  color: #6f42c1;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-ba {  color: #586069;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-sg {  color: #959da5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-corl {  text-decoration: underline;  color: #032f62;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .octicon {  display: inline-block;  vertical-align: text-top;  fill: currentColor;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a {  background-color: transparent;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a:active, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a:hover {  outline-width: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body strong {  font-weight: inherit;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body strong {  font-weight: bolder;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1 {  font-size: 2em;  margin: 0.67em 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body img {  border-style: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body code, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body kbd, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  font-family: monospace, monospace;  font-size: 1em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr {  box-sizing: content-box;  height: 0;  overflow: visible;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body input {  font: inherit;  margin: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body input {  overflow: visible;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body [type=checkbox] {  box-sizing: border-box;  padding: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body * {  box-sizing: border-box;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body input {  font-family: inherit;  font-size: inherit;  line-height: inherit;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a {  color: #528bff;  text-decoration: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a:hover {  text-decoration: underline;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body strong {  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr {  height: 0;  margin: 15px 0;  overflow: hidden;  background: transparent;  border: 0;  border-bottom: 1px solid #dfe2e5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr::before {  display: table;  content: "";}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr::after {  display: table;  clear: both;  content: "";}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table {  border-spacing: 0;  border-collapse: collapse;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body td, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body th {  padding: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6 {  margin-top: 0;  margin-bottom: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1 {  font-size: 32px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2 {  font-size: 24px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3 {  font-size: 20px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4 {  font-size: 16px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5 {  font-size: 14px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6 {  font-size: 12px;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body p {  margin-top: 0;  margin-bottom: 10px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote {  margin: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol {  padding-left: 0;  margin-top: 0;  margin-bottom: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul ol {  list-style-type: lower-roman;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul ul ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul ol ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol ul ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol ol ol {  list-style-type: lower-alpha;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dd {  margin-left: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body code {  font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;  font-size: 12px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  margin-top: 0;  margin-bottom: 0;  font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;  font-size: 12px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .octicon {  vertical-align: text-bottom;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-0 {  padding-left: 0 !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-1 {  padding-left: 4px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-2 {  padding-left: 8px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-3 {  padding-left: 16px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-4 {  padding-left: 24px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-5 {  padding-left: 32px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .pl-6 {  padding-left: 40px !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body::before {  display: table;  content: "";}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body::after {  display: table;  clear: both;  content: "";}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body > *:first-child {  margin-top: 0 !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body > *:last-child {  margin-bottom: 0 !important;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body a:not([href]) {  color: inherit;  text-decoration: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .anchor {  float: left;  padding-right: 4px;  margin-left: -20px;  line-height: 1;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .anchor:focus {  outline: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body p, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dl, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  margin-top: 0;  margin-bottom: 16px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr {  height: 0.25em;  padding: 0;  margin: 24px 0;  background-color: #e1e4e8;  border: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote {  /* padding: 0 1em;  color: #6a737d;  border-left: 0.25em solid #dfe2e5; */  padding: 8.5px 17px;  margin: 1.5em 0;  font-size: inherit;  color: #7c879c;  border-color: #4b5362;  border-width: 4px;  border-left: 5px solid #4b5362;  background: transparent;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote > :first-child {  margin-top: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body blockquote > :last-child {  margin-bottom: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body kbd {  display: inline-block;  padding: 3px 5px;  font-size: 11px;  line-height: 10px;  color: #444d56;  vertical-align: middle;  background-color: #fafbfc;  border: solid 1px #c6cbd1;  border-bottom-color: #959da5;  border-radius: 3px;  box-shadow: inset 0 -1px 0 #959da5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6 {  margin-top: 24px;  margin-bottom: 16px;  font-weight: 600;  line-height: 1.25;  color: #f0f0f0;  border-bottom: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1 .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2 .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3 .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4 .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5 .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6 .octicon-link {  color: #1b1f23;  vertical-align: middle;  visibility: hidden;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1:hover .anchor, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2:hover .anchor, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3:hover .anchor, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4:hover .anchor, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5:hover .anchor, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6:hover .anchor {  text-decoration: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1:hover .anchor .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2:hover .anchor .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3:hover .anchor .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4:hover .anchor .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5:hover .anchor .octicon-link, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6:hover .anchor .octicon-link {  visibility: visible;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h1 {  padding-bottom: 0.3em;  font-size: 2em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h2 {  padding-bottom: 0.3em;  font-size: 1.5em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h3 {  font-size: 1.25em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h4 {  font-size: 1em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h5 {  font-size: 0.875em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body h6 {  font-size: 0.85em;  color: #6a737d;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol {  padding-left: 2em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul ul, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ul ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol ol, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body ol ul {  margin-top: 0;  margin-bottom: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body li {  word-wrap: break-all;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body li > p {  margin-top: 16px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body li + li {  margin-top: 0.25em;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dl {  padding: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dl dt {  padding: 0;  margin-top: 16px;  font-size: 1em;  font-style: italic;  font-weight: 600;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body dl dd {  padding: 0 16px;  margin-bottom: 16px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table {  display: block;  width: 100%;  overflow: auto;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table th {  font-weight: 700;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table th, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table td {  padding: 6px 13px;  /* border: 1px solid #dfe2e5; */}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table tr {  /* background-color: #fff; */  /* border-top: 1px solid #c6cbd1; */}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body table tr:nth-child(2n) {  /* background-color: #f6f8fa; */}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body img {  max-width: 100%;  box-sizing: content-box;  display: inline-block;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body img[align=right] {  padding-left: 20px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body img[align=left] {  padding-right: 20px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body code {  padding: 0.2em 0.4em;  margin: 0;  font-size: 85%;  background-color: #3a3f4b;  border-radius: 3px;  color: white;  margin: 0 1px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  word-wrap: normal;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre > code {  padding: 0;  margin: 0;  font-size: 100%;  word-break: normal;  white-space: pre;  background: transparent;  border: 0;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .highlight {  margin-bottom: 16px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .highlight pre {  margin-bottom: 0;  word-break: normal;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .highlight pre, .vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre {  padding: 16px;  overflow: auto;  font-size: 85%;  line-height: 1.45;  /* background-color: #f6f8fa; */  border-radius: 3px;  background-color: #31363f;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body pre code {  display: inline;  max-width: auto;  padding: 0;  margin: 0;  overflow: visible;  line-height: inherit;  word-wrap: normal;  background-color: transparent;  border: 0;  color: #abb2bf;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .full-commit .btn-outline:not(:disabled):hover {  color: #005cc5;  border-color: #005cc5;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body kbd {  display: inline-block;  padding: 3px 5px;  font: 11px "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;  line-height: 10px;  color: #444d56;  vertical-align: middle;  background-color: #fafbfc;  border: solid 1px #d1d5da;  border-bottom-color: #c6cbd1;  border-radius: 3px;  box-shadow: inset 0 -1px 0 #c6cbd1;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body :checked + .radio-label {  position: relative;  z-index: 1;  border-color: #0366d6;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .task-list-item {  list-style-type: none;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .task-list-item + .task-list-item {  margin-top: 3px;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body .task-list-item input {  margin: 0 0.2em 0.25em -1.6em;  vertical-align: middle;}.vscode-dark[data-vscode-theme-name="One Dark Pro"].vscode-body hr {  border-bottom-color: #eee;}/*Atom One Dark by Daniel GamageOriginal One Dark Syntax theme from https://github.com/atom/one-dark-syntaxbase:    #282c34mono-1:  #abb2bfmono-2:  #818896mono-3:  #5c6370hue-1:   #56b6c2hue-2:   #61aeeehue-3:   #c678ddhue-4:   #98c379hue-5:   #e06c75hue-5-2: #be5046hue-6:   #d19a66hue-6-2: #e6c07b*/.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs {  display: block;  overflow-x: auto;  padding: 0.5em;  color: #abb2bf;  background: #282c34;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-comment,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-quote {  color: #5c6370;  font-style: italic;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-doctag,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-keyword,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-formula {  color: #c678dd;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-section,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-name,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-selector-tag,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-deletion,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-subst {  color: #e06c75;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-literal {  color: #56b6c2;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-string,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-regexp,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-addition,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-attribute,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-meta-string {  color: #98c379;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-built_in,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-class .hljs-title {  color: #e6c07b;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-attr,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-variable,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-template-variable,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-type,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-selector-class,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-selector-attr,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-selector-pseudo,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-number {  color: #d19a66;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-symbol,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-bullet,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-link,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-meta,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-selector-id,.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-title {  color: #61aeee;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-emphasis {  font-style: italic;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-strong {  font-weight: bold;}.vscode-dark[data-vscode-theme-name="One Dark Pro"] .hljs-link {  text-decoration: underline;}</style>                <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/Microsoft/vscode/extensions/markdown-language-features/media/markdown.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/Microsoft/vscode/extensions/markdown-language-features/media/highlight.css"><style>            body {                font-family: -apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif;                font-size: 14px;                line-height: 1.6;            }        </style>        <style>.task-list-item { list-style-type: none; } .task-list-item-checkbox { margin-left: -20px; vertical-align: middle; }</style>                            <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head>    <body class="vscode-body vscode-light">        <hr><h2 id="title-aboutdate-2021-06-22-204756">title: aboutdate: 2021-06-22 20:47:56</h2><h1 id="联系方式">联系方式</h1><ul><li>手机：18506576297</li><li>Email：1217304483@qq.com</li></ul><hr><h1 id="个人信息">个人信息</h1><ul><li><p>孙佳丽/女/1994</p></li><li><p>学历：本科</p></li><li><p>教育经历：河南科技学院-计算机科学与技术(2013 年~2017 年)</p></li><li><p>工作年限：4 年</p></li><li><p>技术博客：<a href="http://sunjl729.cn/">http://sunjl729.cn/</a></p></li><li><p>Github：<a href="https://github.com/ForeveHG" target="_blank" rel="noopener">https://github.com/ForeveHG</a></p></li><li><p>期望职位：Web 前端开发</p></li><li><p>期望薪资：面议</p></li><li><p>期望城市：杭州/上海(目前在杭州，可去上海)</p></li></ul><hr><h1 id="技能清单">技能清单</h1><p>熟练使用的技能</p><ul><li>Web 开发：Html/Css/Javascript/TypeScript</li><li>前端框架：Vue/React</li><li>前端 UI 组件库：Element-UI/iView/Ant-Design/Vant/Bootstrap</li><li>前端工具：Webpack/Sass/Less/Stylus</li><li>脚手架：Vue-Cli/UmiJS</li><li>版本管理：Git</li><li>其他：微信小程序原生，Echarts，Photoshop</li></ul><p>了解的技能</p><ul><li>React Native/Mobx/Electronic/Node/Express/Koa2/NextJS/D3.js/jinjia2/superset</li></ul><h1 id="工作经历">工作经历</h1><h2 id="杭州浮云网络科技-大数据开发部">杭州浮云网络科技-大数据开发部</h2><p>职位名称：前端开发工程师</p><p>在职时间： 2020 年 6 月 ~ 2021 年 7 月</p><p>主要工作：</p><ul><li>参与项目评审，配合产品、UI 和后端人员，进行项目的开发和测试，最终部署上线</li><li>负责大数据部门的前端工作，包括后台系统、superset 二次开发、数据大屏、h5 活动页面等</li></ul><h2 id="杭州通明文化传媒有限公司-技术部">杭州通明文化传媒有限公司-技术部</h2><p>职位名称： 前端开发工程师</p><p>在职时间： 2017 年 6 月 ~ 2020 年 6 月</p><p>主要工作：</p><ul><li>参与项目评审，配合产品、UI 和后端人员，进行项目的开发和测试，最终部署上线</li><li>负责舆情监测产品线的前端工作，包括后台系统、微信小程序以及一些 h5 活动页面等</li></ul><hr><h1 id="项目经历">项目经历</h1><h2 id="浮云斗地主牌库系统-独立开发">(浮云)斗地主牌库系统-独立开发</h2><ul><li>项目背景：该项目的是一个后台系统，为斗地主业务提供牌库支持</li><li>工作内容：我负责该项目全部的前端开发工作，实现的主要功能：通过页面配置生成斗地主牌方案、为游戏房间指定牌方案、牌局试打、用户牌局回放、牌局标注、残局试打、伙牌剔除等，在技术上使用 Umi 搭建项目，React+TypeScript+Ant-Design 完成开发，项目主要难点首先是配置牌方案的表单非常复杂，在开发过程中也对react组件封装、antd表单使用都有了更深入的了解，其次是在系统内实现了简易斗地主，封装了对局流程，后续增加其他对局需求时，只用修改少量代码，节省了开发时间，方便后续维护。</li></ul><h2 id="浮云伏羲平台-独立开发">(浮云)伏羲平台-独立开发</h2><ul><li>项目背景：该项目是一个数据查询和可视化平台，基于superset开源项目进行二次开发</li><li>工作内容：我在此项目主要负责模板页面修改，可视化图表开发，新增图例，开发定制化大屏等，技术上用到 React，Echarts，D3JS，JinJia2等，这个项目中，superset自身是一个很优秀的开源项目，但要进行深度二次开发的话发现网络上资料比较少，大部分靠自己摸索，并且在之前没接触过python的模板语言，通过这个项目，阅读了superset的源码，了解了一个大型开源项目的架构，对日后的工作很有帮助。</li></ul><h2 id="通明舆情监测平台-主开发">(通明)舆情监测平台-主开发</h2><ul><li>项目背景：该项目用于监测网络舆情信息，支持将近 20 个主流社交平台，每个平台提供特定的舆情分析，正负面判断，舆情维护，统计等功能</li><li>工作内容：我在此项目主要负责舆情监测、舆情维护、项目统计模块，使用 Vue，Vuex，Vue-Router，Element-UI，Echarts 等技术实现，在这个项目中，平台的展示页面或业务功能都大同小异，包括之后如果新增或删除社交平台，还要添加相应的页面和一套功能，了解需求后采用 JS 策略模式，将业务操作和展示差异按平台封装成策略类，这样以后新增或者删除平台也变得非常容易，项目上线后，后期的维护和新需求的处理都变得非常快速，获得了业务部门的好评。</li></ul><h2 id="通明舆情助手小程序-独立开发">(通明)舆情助手小程序-独立开发</h2><ul><li>项目背景：该项目主要为客户提供热搜通知，历史热搜查询，分钟级热搜数据导出以及舆论方向统计等功能</li><li>工作内容：该项目由我独立开发和维护，使用微信小程序原生开发，图表展示使用了 f2Chart，词云图使用 wordcloud2.js 封装了微信小程序内可用的词云组件，根据需求和 UI 设计，封装了 Navigation 导航栏，日期选择，Tab 切换等组件，由于该小程序必须获取到用户手机号以及公司职位等个人信息，涉及到引导用户关注公众号，IOS 虚拟支付等微信不允许的问题，也通过这个项目在小程序审核方面获得了一些经验。</li></ul><h2 id="通明小-v-业务管理平台-辅助开发">(通明)小 V 业务管理平台-辅助开发</h2><ul><li>项目背景：该项目是一个派单系统，配合接单 APP，是支撑公司底层业务的主要项目</li><li>工作内容：我在此项目主要负责即时通讯模块，实现建群、群聊、单聊、群内派单、消息提醒等功能，在技术上我使用 Vue 搭建聊天窗口，Vuex 做状态管理，聊天功能接入了融云 im，这个项目中，最大的难点是如何在浏览器中存储聊天记录和会话信息，对比了目前浏览器本地存储的方式后我选择了 indexDB，可以在本地存储大量的数据，封装了增删改查的接口，配合云端记录，很好的实现了对聊天记录的存储、访问和清理。</li></ul><h2 id="通明数据中心erp-主开发">(通明)数据中心(ERP)-主开发</h2><ul><li>项目背景：该项目是公司的 OA 系统和 ERP 系统的结合</li><li>工作内容：我在此项目主要负责组织架构，绩效考核，周报，媒介资源库等功能，使用 Vue，Vuex，Vue-Router，iView 等技术实现，在该项目中，绩效考核模块主要是操作表格，当时 iView 中的表格组件满足不了很多需求，所以我二次开发了 iView 的表格组件，实现了单元格的合并行，合并列，以及单元格中添加各种组件等项目中常用的操作；另外比较困难的是对考核状态的管理，每个考核阶段表格以及表格中的组件呈现的样式也不一样，最后采用的 js 状态管理模式，避免了代码中大量的判断，对于考核步骤的添加或者修改都更加简单，方便后期的项目维护。</li></ul><h3 id="其他项目">其他项目</h3><p>浮云决策平台、势茂数智平台、势茂数智平台移动端、小 V 平台移动端，小 V 平台小程序版，爬虫预警系统，营销助手小程序以及一些节日活动所需的 h5 页面等。</p><hr><h1 id="开源项目和作品">开源项目和作品</h1><h2 id="开源项目">开源项目</h2><ul><li><a href="https://github.com/ForeveHG/XiaoShiTang" target="_blank" rel="noopener">小食堂</a>：使用 React Native + Mobx 实现的美食资讯类 APP</li><li><a href="https://github.com/ForeveHG/vue-live2d-model" target="_blank" rel="noopener">vue-live2d-model</a>：实现在 vue 中添加 live2d</li><li><a href="https://github.com/ForeveHG/wechat-applet-word-cloud" target="_blank" rel="noopener">wechat-applet-word-cloud</a>：在原生微信小程序中使用 wordcloud2.js 以及一些 demo</li></ul><h2 id="技术文章">技术文章</h2><ul><li><a href="http://sunjl729.cn/2021/05/28/vue-loader%E9%83%BD%E5%81%9A%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88/">vue-loader都做了些什么</a></li><li><a href="http://sunjl729.cn/2019/10/20/%E4%B8%BA%E4%BA%86%E5%BC%84%E6%98%8E%E7%99%BDPromise%E7%9A%84%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%BE%92%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AAPromise/">写一个 Promise</a></li><li><a href="http://sunjl729.cn/2019/11/27/%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%B9%8Bflex%E5%B1%9E%E6%80%A7/">弹性盒模型之 flex 属性</a></li></ul><hr><h1 id="致谢">致谢</h1><p>最后要感谢您花时间阅读我的简历，期待能有机会和您共事。</p>    </body>    </html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/cache/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E4%BE%8B.html"/>
      <url>/cache/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E4%BE%8B.html</url>
      
        <content type="html"><![CDATA[<p>添加新图例，引入 echarts</p><p><a href="https://blog.csdn.net/wenqiang1208/article/details/105362561/" target="_blank" rel="noopener">参考</a></p><p>以添加一个简单的折线图为例</p><ul><li>在 superset-frontend/src/visualizations/ 目录下新建文件夹 SimpleLine，在 SimpleLine 文件夹下新建 images 文件夹,images 文件夹中放 SimpleLine 这个新图例的的缩略图，然后继续在 SimpleLine 文件夹下新建 SimpleLine.jsx,SimpleLinePlugin.js,transformProps.js，</li></ul><h5 id="新建-SimpleLinePlugin-js"><a href="#新建-SimpleLinePlugin-js" class="headerlink" title="新建 SimpleLinePlugin.js"></a>新建 SimpleLinePlugin.js</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> t <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@superset-ui/translation"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ChartMetadata<span class="token punctuation">,</span> ChartPlugin <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@superset-ui/chart"</span><span class="token punctuation">;</span><span class="token keyword">import</span> transformProps <span class="token keyword">from</span> <span class="token string">"./transformProps"</span><span class="token punctuation">;</span><span class="token keyword">import</span> thumbnail <span class="token keyword">from</span> <span class="token string">"./images/thumbnail.png"</span><span class="token punctuation">;</span><span class="token keyword">const</span> metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChartMetadata</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"Simple Line"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  description<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  thumbnail<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SimpleLinePlugin</span> <span class="token keyword">extends</span> <span class="token class-name">ChartPlugin</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      metadata<span class="token punctuation">,</span>      transformProps<span class="token punctuation">,</span>      loadChart<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./SimpleLine.jsx"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="新建-transformProps-js"><a href="#新建-transformProps-js" class="headerlink" title="新建 transformProps.js"></a>新建 transformProps.js</h5><p>这个文件单纯的用来转换数据，可以在这里把从后端接收到的数据处理成前端展示需要的格式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">transformProps</span><span class="token punctuation">(</span>chartProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>    height<span class="token punctuation">,</span>    width<span class="token punctuation">,</span>    datasource<span class="token punctuation">,</span>    formData<span class="token punctuation">,</span>    queryData<span class="token punctuation">,</span>    rawFormData<span class="token punctuation">,</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> chartProps<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> records<span class="token punctuation">,</span> columns <span class="token punctuation">}</span> <span class="token operator">=</span> queryData<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    width<span class="token punctuation">,</span>    height<span class="token punctuation">,</span>    data<span class="token punctuation">:</span> records<span class="token punctuation">,</span>    columns<span class="token punctuation">:</span> columns<span class="token punctuation">,</span>    columns_x<span class="token punctuation">:</span> rawFormData<span class="token punctuation">.</span>all_columns_x<span class="token punctuation">,</span>    columns_y<span class="token punctuation">:</span> rawFormData<span class="token punctuation">.</span>all_columns_y<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="新建-SimpleLine-jsx"><a href="#新建-SimpleLine-jsx" class="headerlink" title="新建 SimpleLine.jsx"></a>新建 SimpleLine.jsx</h5><p>这部分代码我只放了个大概，主要做的工作就是通过 props 接收参数，然后导入<code>echarts-for-react</code>并使用，关于 echarts 的配置，直接参考 echarts 文档。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> PropTypes <span class="token keyword">from</span> <span class="token string">"prop-types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactEcharts <span class="token keyword">from</span> <span class="token string">"echarts-for-react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>array<span class="token punctuation">,</span>  columns<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>columns<span class="token punctuation">,</span>  width<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  height<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">,</span>  columns_x<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>  columns_y<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//检查类型，其中data包含viz.py中返回的数据，width和height为图表宽高</span><span class="token keyword">class</span> <span class="token class-name">SimpleLine</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>PureComponent</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"category"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"value"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> yName<span class="token punctuation">,</span>          data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          type<span class="token punctuation">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>ReactEcharts        option<span class="token operator">=</span><span class="token punctuation">{</span>options<span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>height <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ReactEcharts<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>SimpleLine<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token string">"simple line"</span><span class="token punctuation">;</span>SimpleLine<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> propTypes<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> SimpleLine<span class="token punctuation">;</span></code></pre><h5 id="修改文件-superset-frontend-src-setup-setupPlugins-ts"><a href="#修改文件-superset-frontend-src-setup-setupPlugins-ts" class="headerlink" title="修改文件/superset-frontend/src/setup/setupPlugins.ts"></a>修改文件/superset-frontend/src/setup/setupPlugins.ts</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 文件开头导入SimpleLine</span><span class="token keyword">import</span> SimpleLine <span class="token keyword">from</span> <span class="token string">'../explore/controlPanels/SimpleLine'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册SimpleLine,在getChartControlPanelRegistry()方法的链式调用后追加一句</span><span class="token punctuation">.</span><span class="token function">registerValue</span><span class="token punctuation">(</span><span class="token string">'simple_line'</span><span class="token punctuation">,</span> SimpleLine<span class="token punctuation">)</span></code></pre><h5 id="修改文件-superset-frontend-src-visualizations-presets-MainPreset-js"><a href="#修改文件-superset-frontend-src-visualizations-presets-MainPreset-js" class="headerlink" title="修改文件/superset-frontend/src/visualizations/presets/MainPreset.js"></a>修改文件/superset-frontend/src/visualizations/presets/MainPreset.js</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//导入</span><span class="token keyword">import</span> SimpleLineChartPlugin <span class="token keyword">from</span> <span class="token string">"../SimpleLine/SimpleLinePlugin"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在plugins后添加</span><span class="token keyword">new</span> <span class="token class-name">SimpleLineChartPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">{</span> key<span class="token punctuation">:</span> <span class="token string">"simple_line"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="后端代码添加-class-SimpleLine"><a href="#后端代码添加-class-SimpleLine" class="headerlink" title="后端代码添加 class SimpleLine"></a>后端代码添加 class SimpleLine</h5><p>修改<code>/superset/viz.py</code>文件,在<code>viz_types</code>的定义前添加<code>class SimpleLine</code>,下面这段代码根据你需要的数据自行进行处理，这里只做最简单的演示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SimpleLine</span><span class="token punctuation">(</span>BaseViz<span class="token punctuation">)</span><span class="token punctuation">:</span>    viz_type <span class="token operator">=</span> <span class="token string">'simple_line'</span>    verbose_name <span class="token operator">=</span> <span class="token string">"simple line"</span>    sort_series <span class="token operator">=</span> <span class="token boolean">False</span>    is_timeseries <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">query_obj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query_obj<span class="token punctuation">(</span><span class="token punctuation">)</span>        fd <span class="token operator">=</span> self<span class="token punctuation">.</span>form_data <span class="token comment" spellcheck="true">#form_data中包含界面左侧组件内容</span>        columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> fd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'all_columns'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这个字段对应×××组件，不为空</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Choose Columns'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> fd<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'all_columns'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d<span class="token punctuation">[</span><span class="token string">'columns'</span><span class="token punctuation">]</span> <span class="token operator">=</span> columns <span class="token comment" spellcheck="true"># all_columns是左侧组件名，后面会提到</span>        <span class="token keyword">return</span> d    <span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># df是pandas的DataFrame类型</span>        data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#假设数据很简单，不需要做别的处理</span>        <span class="token comment" spellcheck="true"># 如果除了绘图用的数据还有别的信息，可以构造一个字典来返回</span>        <span class="token comment" spellcheck="true"># data = {'plot_data':plot_data,'other_info':other_info}</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>handle_js_int_overflow<span class="token punctuation">(</span>            dict<span class="token punctuation">(</span>records<span class="token operator">=</span>df<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>list<span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span></code></pre>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>第一次自己住的心情</title>
      <link href="/cache/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E4%BD%8F%E7%9A%84%E5%BF%83%E6%83%85.html"/>
      <url>/cache/%E7%AC%AC%E4%B8%80%E6%AC%A1%E8%87%AA%E5%B7%B1%E4%BD%8F%E7%9A%84%E5%BF%83%E6%83%85.html</url>
      
        <content type="html"><![CDATA[<p>从高中开始住校，一直是一群人热热闹闹的生活，实习时候虽然住的群租的床位房，但最起码是有人的，陌生人也没关系，毕业后到杭州来，跟朋友合租，一直也是热热闹闹，现在是真正的开始自己一个人的租房生活了。<br><a id="more"></a><br>收拾好房间后觉得世界都安静下来了，自己说要出来住的勇气好像都卸掉不少，心里也慌张起来。<br>第一天晚上，旁边住着一个女生和她的狗，本来怕狗晚上会叫，吵到人休息，但那天凌晨之后那个女生才到家，到家就开始训她的狗，全程没听到狗狗叫一声，只有链子的响动和这个女生和狗说话的声音，一直吵闹到凌晨两三点。我才发现隔断房有多不好，其实不怪隔壁女生声音大， 她是压低声音说话的，但隔断墙的板子太薄了，我用手推一下墙都会晃动，第一天晚上我就失眠了。<br>第二天我见到了另一个隔壁住着的女生，我还不知道这层楼的wifi密码，看到这边灯光亮着就想敲门问问她，她打开门之后特别热情，真的是那种突然见到亲人的感觉，我有点儿被吓到，她极力邀请我进门坐坐，还拿出了一堆零食，我不好意思的走到她房间来，她说明天她就要走了，才在这里住了两天而已，我很惊讶，问她为什么，她说她男朋友让她去他那边，不让她在杭州呆了，还跟我讲了很多她和男朋友的故事，是个很可爱的女生，可惜那天晚上过后，我就再也没见过她了。<br>一周后我搬到了这个女生的房间，四面都是实墙，晚上能睡好了，对面住进来一个小哥哥，长的很好看，我以为是弟弟，后来认识了之后才发现竟然是91年的，那长的也太显嫩了吧，我说要给他介绍个女朋友他整个脸都红了，是不是吓到他了哈哈哈。<br>其他就没有什么了，继续我朝九晚六的生活，也渐渐开始喜欢一个人的生活，晚上回来看看书，想睡了就早早的睡下，不被打扰也不打扰别人，生活纯粹了很多。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>contact</title>
      <link href="/concat/index.html"/>
      <url>/concat/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
